
build/lpc40xx/firmware.elf:     file format elf32-littlearm
build/lpc40xx/firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000021d5

Program Header:
0x70000001 off    0x00017fb0 vaddr 0x00007fb0 paddr 0x00007fb0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007fb8 memsz 0x00007fb8 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00007fb8 align 2**16
         filesz 0x00000120 memsz 0x00000120 flags rw-
    LOAD off    0x00020120 vaddr 0x10000120 paddr 0x10000120 align 2**16
         filesz 0x00000000 memsz 0x000004c8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007fb0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  10000000  00007fb8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  20000000  20000000  00020120  2**2
                  CONTENTS
  3 .bss          000004c8  10000120  10000120  00020120  2**3
                  ALLOC
  4 .ARM.exidx    00000008  00007fb0  00007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .uninit_RESERVED 00000000  10000000  10000000  00020120  2**2
                  CONTENTS
  6 .noinit_RAM2  00000000  20000000  20000000  00020120  2**2
                  CONTENTS
  7 .noinit       00000000  100005e8  100005e8  00020120  2**2
                  CONTENTS
  8 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  9 .comment      00000079  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 10 .debug_info   000b7b1b  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007ea6  00000000  00000000  000d7ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001918  00000000  00000000  000dfb8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001868  00000000  00000000  000e14a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c9bc  00000000  00000000  000e2d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0003c5c1  00000000  00000000  000ef6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007860  00000000  00000000  0012bc88  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
10000120 l    d  .bss	00000000 .bss
00007fb0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
100005e8 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
0000369e l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000036ba l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007dbc l     O .text	00000004 config::kRtosFrequency
0000373c l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003758 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004760 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000477c l     F .text	00000034 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007f40 l     O .text	00000010 C.32.215511
0000505c l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000068 l     O .data	00000014 (anonymous namespace)::clock_configuration
1000007c l     O .data	0000001c (anonymous namespace)::system_controller
10000218 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
10000098 l     O .data	00000008 (anonymous namespace)::uart0
100000a0 l     O .data	0000000c (anonymous namespace)::system_timer
100000b8 l     O .data	00000004 (anonymous namespace)::interrupt_controller
0000549c l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
000054c0 l     F .text	00000038 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00005db6 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00005dd2 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00006206 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
0000622c l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000062f0 l     F .text	0000016c __static_initialization_and_destruction_0(int, int)
00006796 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/naterpotatoer/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/naterpotatoer/SJSU-Dev2/tools/gcc-arm-none-eabi-9-2019-q4-major/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000330 l     F .text	00000000 __do_global_dtors_aux
10000120 l       .bss	00000001 completed.10274
00000354 l     F .text	00000000 frame_dummy
10000124 l       .bss	00000018 object.10279
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
000018d8 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
00001934 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00001974 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
000019d0 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv
00000000 l    df *ABS*	00000000 diskio.cpp
10000160 l     O .bss	00000004 (anonymous namespace)::empty_storage
00001d54 l     F .text	00000028 (anonymous namespace)::FatfsDevice_t::FatfsDevice_t()
00001d54 l     F .text	00000028 (anonymous namespace)::FatfsDevice_t::FatfsDevice_t()
00001d7c l     F .text	00000030 std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()
00001d7c l     F .text	00000030 std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()
10000164 l     O .bss	00000008 (anonymous namespace)::drive
00001fbc l     F .text	00000098 __static_initialization_and_destruction_0(int, int)
00002054 l     F .text	00000010 _GLOBAL__sub_I__ZN4sjsu18RegisterFatFsDriveEPNS_7StorageEh
00000000 l    df *ABS*	00000000 exceptions.cpp
000021c4 l       .text	00000000 handler2_address_const
00002254 l     F .text	0000005c __static_initialization_and_destruction_0(int, int)
000022b0 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 tasks.c
10000174 l     O .bss	00000064 pxReadyTasksLists
100001d8 l     O .bss	00000004 uxTopReadyPriority
100001dc l     O .bss	00000004 xYieldPending
100001e0 l     O .bss	00000004 uxSchedulerSuspended
100001e4 l     O .bss	00000004 ulTaskSwitchedInTime
100001e8 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
0000249a l     F .text	0000002e _out_buffer(char, void*, unsigned int, unsigned int)
000024c8 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
000024e4 l     F .text	00000044 _strnlen_s(char const*, unsigned int)
00002528 l     F .text	00000028 _is_digit(char)
00002550 l     F .text	00000048 _atoi(char const**)
00002598 l     F .text	000000a0 _out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)
00002638 l     F .text	000001b8 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
000027f0 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
000028c0 l     F .text	000000de _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
0000299e l     F .text	00000046 _PowerOf10(unsigned long)
00007874 l     O .text	00000020 _imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)::kRounders
000029e4 l     F .text	000000fc _imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)
00002ae0 l     F .text	000008e8 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 trace_impl.cpp
00003498 l     F .text	000000c8 _trace_write_semihosting_stdout(char const*, unsigned int)
100001ec l     O .bss	00000004 _trace_write_semihosting_stdout(char const*, unsigned int)::handle
00000000 l    df *ABS*	00000000 port.c
000067d0 l       .text	00000000 pxCurrentTCBConst2
00006840 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
100000c0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00003850  w    F .text	0000004c sjsu::cortex::SystemTimer::SystemTimerHandler()
00006184  w    F .text	00000020 std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)
000036de  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
10000210  w    O .bss	00000001 sjsu::cortex::SystemTimer::dwt_counter
00001c60  w    F .text	0000001e sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetCapacity()
00005a80  w    F .text	00000022 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)
0000389c  w    F .text	00000022 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001a2c  w    F .text	0000005c sjsu::Error_t::Error_t(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)
00001c4a  w    F .text	00000016 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::IsReadOnly()
000020b8  w    F .text	00000044 sjsu::InitializeBssSection()
00002384 g     F .text	00000010 _getpid
00004020  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::OscillatorSource>(sjsu::lpc40xx::SystemController::OscillatorSource)
00001574  w    F .text	00000020 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)
00000ce4  w    F .text	00000034 sjsu::LogInfo<unsigned char>::LogInfo(char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)
0000395c  w    F .text	00000078 sjsu::cortex::SystemTimer::GetCount()
00004080  w    F .text	00000668 sjsu::lpc40xx::SystemController::Initialize()
100000b4  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::current_vector
00003624  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00001696  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
00000524  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const
10000158  w    O .bss	00000004 guard variable for sjsu::Uptime
00001e72  w    F .text	00000022 tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00000c68  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
100005e0  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController<43u, 5ul>::table
1000000c  w    O .data	00000004 sjsu::newlib::in
00005bc8  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
100005d8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
000059da  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00004bce  w    F .text	00000026 sjsu::lpc40xx::Pin::Initialize() const
00003a68  w    F .text	00000020 sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const
0000010c g       .text	00000000 bss_section_table_end
00007034 g     F .text	00000024 _kill_r
00007e2c  w    O .text	00000008 sjsu::lpc40xx::SystemController::UsbClockRegister::kSelect
000033c8 g     F .text	00000044 printf
00001bb8  w    F .text	0000001a tl::expected<void, sjsu::Error_t>::expected()
0000083c  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000000 g       *ABS*	00000000 __vectors_start__
00001766  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()
00003e9c  w    F .text	00000050 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::ResourceID) const
00007e0c  w    O .text	00000008 sjsu::lpc40xx::SystemController::CpuClockRegister::kSelect
0000188c  w    F .text	00000018 char* std::__niter_wrap<char*>(char* const&, char*)
000060aa  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
0000580a  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00001f74  w    F .text	00000030 tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
000064e8  w    F .text	00000040 sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)
00005b70  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()
00005fb4  w    F .text	0000001e std::array<std::function<void ()>, 59u>::operator[](unsigned int)
000066f2  w    F .text	0000001a std::array<std::function<void ()>, 59u>::data()
00000630  w    F .text	0000002e sjsu::FileBasename(char const*)
000014e8  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()
00000370  w    F .text	00000036 std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)
00006f90 g     F .text	00000034 memmove
00001e94  w    F .text	00000022 tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00002110  w    F .text	00000018 sjsu::debug::PrintBacktrace(bool, void*)
00003d1c  w    F .text	00000022 sjsu::bit::MaskFromRange(unsigned long)
20000000 g       *ABS*	00000000 __base_RAM2
0000160c  w    F .text	00000018 std::basic_string_view<char, std::char_traits<char> >::begin() const
0000340c g     F .text	00000038 snprintf
00001642  w    F .text	00000030 char* std::copy<char const*, char*>(char const*, char const*, char*)
100001f0  w    O .bss	00000004 sjsu::InterruptController::platform_interrupt_controller
00007e04  w    O .text	00000008 sjsu::lpc40xx::SystemController::CpuClockRegister::kDivider
00007fb8 g       .ARM.exidx	00000000 __exidx_end
000017c4  w    F .text	0000001c std::__array_traits<char, 256u>::_S_ref(char const (&) [256], unsigned int)
00007e44  w    O .text	00000008 sjsu::lpc40xx::Pin::kFunction
000054f8 g     F .text	00000014 ThreadRuntimeCounter
00001532  w    F .text	00000018 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00005948  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)
000037e0  w    F .text	0000001c sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)
00000c68  w    F .text	00000054 std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})
10000170 g     O .bss	00000004 pxCurrentTCB
00005cea  w    F .text	00000020 bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())
00005ff2  w    F .text	00000016 std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)
00004df2  w    F .text	00000038 sjsu::Uart::Read() const
00007dd0  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
0000627a  w    F .text	00000018 void (* const&std::_Any_data::_M_access<void (*)()>() const)()
00000590  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)
00001b9e  w    F .text	0000001a tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_move_assign_base()
10010000 g       *ABS*	00000000 __top_SRAM
00007ddc  w    O .text	00000008 sjsu::lpc40xx::SystemController::PllRegister::kDivider
100005e4 g     O .bss	00000004 errno
00007fb8 g       .ARM.exidx	00000000 _etext
00004d20  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00005780  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00001f32  w    F .text	00000016 std::remove_reference<sjsu::Error_t&>::type&& std::move<sjsu::Error_t&>(sjsu::Error_t&)
00003d64  w    F .text	00000024 sjsu::lpc40xx::SystemController::CpuClockRegister::Register()
000015ee  w    F .text	0000001e std::array<char, 256u>::operator[](unsigned int)
1000015c  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00001af4  w    F .text	00000042 sjsu::Error(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)
00006974 g     F .text	00000160 .hidden __aeabi_fadd
00006970 g     F .text	00000164 .hidden __subsf3
00007e84  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00007e3c  w    O .text	00000008 sjsu::lpc40xx::SystemController::SpiFiClockRegister::kSelect
00006722  w    F .text	0000002c __gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
00007734  w    O .text	0000000c sjsu::Status::kInvalidSettings
00005bc8  w    F .text	00000044 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
00000cbc  w    F .text	00000028 sjsu::LogInfo<>::LogInfo(char const*, std::experimental::fundamentals_v2::source_location const&)
00007ecc  w    O .text	00000020 vtable for sjsu::lpc40xx::Uart
00007e4c  w    O .text	00000008 sjsu::lpc40xx::Pin::kResistor
00000f58  w    F .text	0000001a std::array<char, 256u>::data()
00001194  w    F .text	000001e0 sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)
00001dc4  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00006860 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
00003ff0  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbClockSelect>(sjsu::lpc40xx::SystemController::UsbClockSelect)
00000d18  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()
00000d32  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00006c24 g     F .text	00000000 .hidden __aeabi_uldivmod
100005e8 g       .noinit	00000000 _noinit
00001a88  w    F .text	0000006c sjsu::Error_t::Print()
00001f48  w    F .text	00000016 tl::unexpected<sjsu::Error_t>::value() &
00003b9c  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000057b6  w    F .text	00000026 sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)
00003e30  w    F .text	0000004c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::ResourceID) const
00004e54  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00005a16  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00000e06  w    F .text	00000024 std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)
10000018  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00001b9e  w    F .text	0000001a tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_move_assign_base()
00000502  w    F .text	00000022 std::_Function_base::_M_empty() const
0000674e  w    F .text	0000001c sjsu::LogDebug<int>::LogDebug(char const*, int, std::experimental::fundamentals_v2::source_location const&)
00006fd4 g     F .text	00000050 _raise_r
00006adc g     F .text	0000001c .hidden __aeabi_i2f
00004b7c  w    F .text	00000022 sjsu::Pin::PullUp() const
00001496  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)
000007a0  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()
10010000 g       *ABS*	00000000 __top_RAM
000067e0 g     F .text	00000066 xPortPendSVHandler
00000d8e  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000047b0  w    F .text	000001e8 sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const
00003a88  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
0000367c  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004cdc  w    F .text	00000044 sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00007058 g     F .text	00000004 _getpid_r
00004e2a  w    F .text	0000002a sjsu::Uart::PollingFlush() const
000016b2  w    F .text	00000086 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
10000000 g     O .data	00000000 .hidden __dso_handle
00005aa2  w    F .text	0000002a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
0000083c  w    F .text	0000001a std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()
00000fb8  w    F .text	000001dc sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)
00001624  w    F .text	0000001e std::basic_string_view<char, std::char_traits<char> >::end() const
00001b36  w    F .text	0000001a tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_operations_base()
10010000 g       *ABS*	00000000 StackTop
0000662c  w    F .text	00000034 sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)
00005c0c  w    F .text	00000042 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)
00006c54 g     F .text	000002c2 .hidden __udivmoddi4
00004050  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbDivider>(sjsu::lpc40xx::SystemController::UsbDivider)
0000560c  w    F .text	00000036 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)
000000fc g       .text	00000000 bss_section_table
00007e54  w    O .text	00000008 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00003b48  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000046e8  w    F .text	00000018 std::initializer_list<int>::begin() const
00005b48  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
00000300 g       .text	00000000 __CRP_WORD_END__
00001de6  w    F .text	0000002e tl::unexpected<sjsu::Error_t>::unexpected(sjsu::Error_t&&)
00000de2  w    F .text	00000024 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())
20008000 g       *ABS*	00000000 __top_RAM2
00001b50  w    F .text	0000001a tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_copy_base()
000006ac  w    F .text	00000040 __gnu_cxx::char_traits<char>::length(char const*)
00001b84  w    F .text	0000001a tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_copy_assign_base()
00001bb8  w    F .text	0000001a tl::expected<void, sjsu::Error_t>::expected()
00003aa4  w    F .text	000000a4 sjsu::cortex::SystemTimer::StartTimer() const
100005d0  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00003a88  w    F .text	0000001c sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()
000017e0  w    F .text	00000016 char const* std::__miter_base<char const*>(char const*)
000058e6  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator>=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000013e2  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00007e9c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
00000466  w    F .text	0000002e std::char_traits<char>::length(char const*)
20000000 g       *ABS*	00000000 __user_heap_base
00007fb0 g       .text	00000000 __exidx_start
0000655c  w    F .text	0000002e void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)
000062c0  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00001c24  w    F .text	00000026 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Enable()
00006528  w    F .text	00000018 std::array<std::function<void ()>, 59u>::begin()
000015d6  w    F .text	00000018 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
10000004  w    O .data	00000004 sjsu::GetInactive<sjsu::Storage>()::inactive
00006f48 g     F .text	00000048 __libc_init_array
0000645c  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)
00004fcc  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
10000000 g       *ABS*	00000000 __base_SRAM
00000e2a  w    F .text	00000056 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00006056  w    F .text	00000016 std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00003c2e  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00007140  w    O .text	0000000c sjsu::Status::kTimedOut
00006f1c g     F .text	0000000e abort
00003c16  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000054  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00001efa  w    F .text	00000038 tl::expected<void, sjsu::Error_t>::expected<sjsu::Error_t, (void*)0, (void*)0>(tl::unexpected<sjsu::Error_t>&&)
00001de6  w    F .text	0000002e tl::unexpected<sjsu::Error_t>::unexpected(sjsu::Error_t&&)
00003dd0  w    F .text	00000024 sjsu::lpc40xx::SystemController::UsbClockRegister::Register()
00007740  w    O .text	00000034 vtable for sjsu::GetInactive<sjsu::Storage>()::InactiveStorage
000060c0  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))
1000016c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
000066b4  w    F .text	0000003e std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00080000 g       *ABS*	00000000 __top_FLASH
0000154a  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)
00006848 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00007e34  w    O .text	00000008 sjsu::lpc40xx::SystemController::SpiFiClockRegister::kDivider
00001dc4  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00005d44  w    F .text	0000001c std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)
00006114  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))
000004aa  w    F .text	00000016 std::_Any_data::_M_access() const
00007e5c  w    O .text	00000008 sjsu::lpc40xx::Pin::kOpenDrain
00007dec  w    O .text	00000008 sjsu::lpc40xx::SystemController::OscillatorRegister::kRangeSelect
000068c8 g     F .text	0000009e .hidden __aeabi_d2f
000004dc  w    F .text	00000026 std::_Function_base::~_Function_base()
00000d32  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00001406  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00006970 g     F .text	00000164 .hidden __aeabi_fsub
00005efe  w    F .text	0000002a unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
00005304  w    F .text	00000096 sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
100005dc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
000021ac g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00003bf4  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
100005e8 g       .bss	00000000 _ebss
00003eec  w    F .text	00000050 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::ResourceID) const
00006780  w    F .text	00000016 std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])
00000fa0  w    F .text	00000018 std::basic_string_view<char, std::char_traits<char> >::size() const
000014c8  w    F .text	00000020 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)
00005476  w    F .text	00000024 sjsu::lpc40xx::Uart::FifoHasData() const
00007f08  w    O .text	00000020 vtable for sjsu::lpc40xx::SystemController
00005698  w    F .text	0000002c std::function<void ()>::operator()() const
00000f88  w    F .text	00000018 std::array<char, 256u>::size() const
00005922  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)
10000028  w    O .data	00000004 sjsu::cortex::SystemTimer::ticks_per_millisecond
000039d4  w    F .text	00000094 sjsu::cortex::SystemTimer::Initialize() const
0000371a  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00001b50  w    F .text	0000001a tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_copy_base()
00000718  w    F .text	00000034 sjsu::Status::Status(sjsu::Status_t const&)
00006b08 g     F .text	0000007c .hidden __floatdisf
00001cf0  w    F .text	0000002a sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Read(unsigned long, void*, unsigned int)
00001dac  w    F .text	00000018 std::basic_string_view<char, std::char_traits<char> >::data() const
00004ddc  w    F .text	00000016 sjsu::Uart::Flush() const
000049c4  w    F .text	0000002c sjsu::bit::Register<unsigned long>::Set(sjsu::bit::Mask)
00007e6c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00002128 g     F .text	00000084 GetRegistersFromStack
00006660  w    F .text	00000054 sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()
0000194c  w    F .text	00000028 sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)
00005c78  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
00005a5e  w    F .text	00000022 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)
0000065e  w    F .text	00000026 std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)
00000e92  w    F .text	00000016 bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)
00000962  w    F .text	0000001a std::function<bool ()>::~function()
00000962  w    F .text	0000001a std::function<bool ()>::~function()
00005d0a  w    F .text	00000016 std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())
00000424  w    F .text	00000018 operator new(unsigned int, void*)
20008000 g       *ABS*	00000000 __top_SRAM_AHB
00004724  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
0000550c  w    F .text	00000100 sjsu::InitializePlatform()
00007f50 g     O .text	00000020 __sf_fake_stderr
00001bd2  w    F .text	00000016 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetMemoryType()
000013e2  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
100005e8 g       .bss	00000000 end
00000a86  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00001e50  w    F .text	00000022 tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00000dac  w    F .text	00000020 bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00000000 g       *ABS*	00000000 __base_Flash
00002428 g     F .text	00000072 _out_chunk(char, void*, unsigned int, unsigned int)
00000f02  w    F .text	00000056 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)
00001374  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()
00007134  w    O .text	0000000c sjsu::Status::kSuccess
00007f28  w    O .text	00000018 vtable for sjsu::cortex::SystemTimer
00000ce4  w    F .text	00000034 sjsu::LogInfo<unsigned char>::LogInfo(char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)
00001500  w    F .text	00000032 std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
0000347a g     F .text	0000001e trace_write
0000648c  w    F .text	0000005c sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)
000003a8  w    F .text	00000034 std::experimental::fundamentals_v2::source_location::source_location()
00001672  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00000abc  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00001f74  w    F .text	00000030 tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
100005d4  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
10000120 g       .bss	00000000 _bss
000006ec  w    F .text	0000002c sjsu::Status_t::Status_t()
00001c9c  w    F .text	0000002a sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Erase(unsigned long, unsigned int)
00004ff8  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecimal(float)
00001e72  w    F .text	00000022 tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
000056dc  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()
10000208  w    O .bss	00000008 sjsu::cortex::SystemTimer::millisecond_count
0000346c g     F .text	0000000e trace_initialize
000018a4  w    F .text	00000034 char* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char>(char const*, char const*, char*)
00004038  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::EmcDivider>(sjsu::lpc40xx::SystemController::EmcDivider)
00005fd2  w    F .text	00000020 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const
0000094c  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const
00006adc g     F .text	0000001c .hidden __floatsisf
00007e74  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
10000214  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
000015ac  w    F .text	0000002a std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)
00001194  w    F .text	000001e0 sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)
00004bb6  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
00000c18  w    F .text	00000022 bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00005f28  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
0000097c  w    F .text	0000003a sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
00001eb6  w    F .text	00000022 tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00001672  w    F .text	00000024 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
00000a6c  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()
00001e94  w    F .text	00000022 tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
100005e8 g       .noinit	00000000 _end_noinit
000057b6  w    F .text	00000026 sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)
000017ac  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()
000004c0  w    F .text	0000001c std::_Function_base::_Function_base()
00006152  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)
000022c0 g     F .text	000000c4 vTaskSwitchContext
0000572c  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
000005ea  w    F .text	00000046 sjsu::BasenameLength(char const*)
00000ebe  w    F .text	00000024 std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)
000037fc  w    F .text	00000020 sjsu::SystemController::SetPlatformController(sjsu::SystemController*)
0000565e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00001f5e  w    F .text	00000016 sjsu::Error_t&& std::forward<sjsu::Error_t>(std::remove_reference<sjsu::Error_t>::type&)
00005c4e  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00006f2c g     F .text	0000001c __cxa_atexit
00007df4  w    O .text	00000008 sjsu::lpc40xx::SystemController::OscillatorRegister::kExternalEnable
00003560  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
00007e7c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
00003df4  w    F .text	00000024 sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()
00001b6a  w    F .text	0000001a tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_move_base()
00003c54  w    F .text	000000c8 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
0000670c  w    F .text	00000016 std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)
00005f9a  w    F .text	0000001a std::function<void ()>::function()
00007e14  w    O .text	00000008 sjsu::lpc40xx::SystemController::PeripheralClockRegister::kDivider
00004998  w    F .text	0000002c sjsu::bit::Register<unsigned long>::Clear(sjsu::bit::Mask)
000061bc  w    F .text	00000032 std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)
00006af8 g     F .text	0000008c .hidden __floatundisf
00006f18  w    F .text	00000002 .hidden __aeabi_ldiv0
00000684  w    F .text	00000028 __gnu_cxx::char_traits<char>::eq(char const&, char const&)
0000586e  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00003834  w    F .text	0000001a std::function<void ()>::~function()
0000714c  w    O .text	00000008 sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)::kEllipsisEnding
1000002c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
000020fc  w    F .text	00000014 sjsu::SystemInitialize()
00003e7c  w    F .text	00000020 sjsu::bit::Register<unsigned long>::Save()
100001f8  w    O .bss	00000010 sjsu::cortex::SystemTimer::callback
000061a4  w    F .text	00000018 void (**&std::_Any_data::_M_access<void (**)()>())()
00006ad4 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
000007c8  w    F .text	0000002c std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
10000140  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00006008  w    F .text	0000004e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)
0000074c  w    F .text	0000003a sjsu::Status::operator=(sjsu::Status_t const&)
00007de4  w    O .text	00000008 sjsu::lpc40xx::SystemController::PllRegister::kPllLockStatus
000037b8  w    F .text	00000028 sjsu::operator==(sjsu::Status const&, sjsu::Status const&)
00006878 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00003650  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
00001d40  w    F .text	00000014 sjsu::Storage& sjsu::GetInactive<sjsu::Storage>()
0000658a  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)
00000858  w    F .text	000000f4 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)
00007f70 g     O .text	00000020 __sf_fake_stdin
00000786  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()
000002fc g       .text	00000000 __CRP_WORD_START__
00005f9a  w    F .text	0000001a std::function<void ()>::function()
000065a4  w    F .text	00000030 sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)
00001b36  w    F .text	0000001a tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_operations_base()
0000360c  w    F .text	00000018 sjsu::InterruptController::GetPlatformController()
20000000 g       *ABS*	00000000 __base_SRAM_AHB
00003912  w    F .text	0000004a std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
00001be8  w    F .text	00000026 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Initialize()
00006fc4 g     F .text	00000010 memset
00007e24  w    O .text	00000008 sjsu::lpc40xx::SystemController::UsbClockRegister::kDivider
000013ba  w    F .text	00000028 int const& std::max<int>(int const&, int const&)
000009d8 g     F .text	00000094 main
000035a4  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00001fa4  w    F .text	00000018 tl::detail::expected_default_ctor_base<void, sjsu::Error_t, true>::expected_default_ctor_base(tl::detail::default_constructor_tag)
000053ec  w    F .text	0000004e sjsu::lpc40xx::Uart::Read(void*, unsigned int) const
000003f4  w    F .text	00000018 std::experimental::fundamentals_v2::source_location::file_name() const
00001c7e  w    F .text	0000001e sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetBlockSize()
00006b08 g     F .text	0000007c .hidden __aeabi_l2f
00000e80  w    F .text	00000012 std::chrono::duration_values<long long>::max()
00000b86  w    F .text	00000032 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const
00007dd4  w    O .text	00000008 sjsu::lpc40xx::SystemController::PllRegister::kMultiplier
20000000 g       *ABS*	00000000 heap
000068c2 g     F .text	00000006 std::__throw_bad_function_call()
000035c4  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
0000183c  w    F .text	00000016 char const* std::__niter_base<char const*>(char const*)
00007ea4  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00003d88  w    F .text	00000024 sjsu::lpc40xx::SystemController::PeripheralClockRegister::Register()
00007eec  w    O .text	0000001c vtable for sjsu::lpc40xx::Pin
000068c8 g     F .text	0000009e .hidden __truncdfsf2
00000324 g       .text	00000000 __init_array_end
000067b0 g     F .text	00000026 vPortSVCHandler
0000040c  w    F .text	00000018 std::experimental::fundamentals_v2::source_location::function_name() const
00000000 g       *ABS*	00000000 __base_FLASH
100001f4  w    O .bss	00000004 sjsu::SystemController::platform_system_controller
10000010  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00006af8 g     F .text	0000008c .hidden __aeabi_ul2f
00000fb8  w    F .text	000001dc sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)
0000377c  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000004dc  w    F .text	00000026 std::_Function_base::~_Function_base()
000061ee  w    F .text	00000018 std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)
00005b04  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00005b04  w    F .text	00000044 std::function<void ()>::function(std::function<void ()> const&)
00000718  w    F .text	00000034 sjsu::Status::Status(sjsu::Status_t const&)
00003834  w    F .text	0000001a std::function<void ()>::~function()
00003d40  w    F .text	00000024 sjsu::lpc40xx::SystemController::OscillatorRegister::Register()
00000d66  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()
00006292  w    F .text	00000016 void (* const*std::__addressof<void (* const)()>(void (* const&)()))()
0000194c  w    F .text	00000028 sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)
10000008  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
000062c0  w    F .text	0000002e std::array<std::function<void ()>, 59u>::~array()
00005acc  w    F .text	00000038 bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000599e  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
000005b4  w    F .text	00000036 sjsu::StringLength(char const*)
00000324 g     F .text	00000000 _fini
00003444  w    F .text	00000028 unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)
000038be  w    F .text	00000054 std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)
00007e94  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
0000381c  w    F .text	00000018 sjsu::SystemController::GetPlatformController()
0000674e  w    F .text	0000001c sjsu::LogDebug<int>::LogDebug(char const*, int, std::experimental::fundamentals_v2::source_location const&)
10000040  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00005678  w    F .text	00000020 std::function<void ()>::operator bool() const
00005452  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00000f72  w    F .text	00000016 std::__array_traits<char, 256u>::_S_ptr(char const (&) [256])
000009b6  w    F .text	00000020 sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)
00006968 g     F .text	0000016c .hidden __aeabi_frsub
00004700  w    F .text	00000024 std::initializer_list<int>::end() const
000017f6  w    F .text	00000046 char* std::__copy_move_a2<false, char const*, char*>(char const*, char const*, char*)
00001fa4  w    F .text	00000018 tl::detail::expected_default_ctor_base<void, sjsu::Error_t, true>::expected_default_ctor_base(tl::detail::default_constructor_tag)
00005ca8  w    F .text	00000042 std::function<void ()>::swap(std::function<void ()>&)
100000bc g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00001e14  w    F .text	0000001e units::linear_scale<float>::operator()() const
000035ec  w    F .text	00000020 sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)
0000030c g       .text	00000000 __preinit_array_end
0000676a  w    F .text	00000016 void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()
00004d5c  w    F .text	00000080 sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
00001ed8  w    F .text	00000022 tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
10000000 g       .data	00000000 _data
00005e9e  w    F .text	00000034 bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
0000539a  w    F .text	00000052 sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const
00003b60  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
0000606c  w    F .text	0000003e std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))
00001ed8  w    F .text	00000022 tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00001422  w    F .text	00000074 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00007dc0  w    O .text	0000000c sjsu::Status::kInvalidParameters
000003a8  w    F .text	00000034 std::experimental::fundamentals_v2::source_location::source_location()
00007e1c  w    O .text	00000008 sjsu::lpc40xx::SystemController::EmcClockRegister::kDivider
100005cc  w    O .bss	00000004 guard variable for sjsu::cortex::SystemTimer::callback
00005642  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
0000625c  w    F .text	0000001e std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)
000021d4 g     F .text	00000080 ArmResetHandler
000065d4  w    F .text	00000058 sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)
000062a8  w    F .text	00000018 void (*&std::_Any_data::_M_access<void (*)()>())()
00000540  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00000b10  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()
00005a3c  w    F .text	00000022 bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)
000004c0  w    F .text	0000001c std::_Function_base::_Function_base()
00005986  w    F .text	00000018 std::initializer_list<int>::size() const
00005d20  w    F .text	00000024 std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())
000023b0 g     F .text	00000030 _write
10000120 g       .data	00000000 _edata
000003dc  w    F .text	00000018 std::experimental::fundamentals_v2::source_location::line() const
1000021c  w    O .bss	000003b0 sjsu::cortex::InterruptController<43u, 5ul>::table
00000bb8  w    F .text	00000060 std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00001852  w    F .text	00000016 char* std::__niter_base<char*>(char*)
0000543a  w    F .text	00000018 sjsu::lpc40xx::Uart::HasData() const
00001b6a  w    F .text	0000001a tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_move_base()
00005830  w    F .text	0000003e units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)
000019e0  w    F .text	0000002c units::literals::operator"" _B(unsigned long long)
00005d60  w    F .text	00000056 std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)
00001cc6  w    F .text	0000002a sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Write(unsigned long, void const*, unsigned int)
00000c3a  w    F .text	0000002e std::function<bool ()>::operator()() const
00001d1a  w    F .text	00000026 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Disable()
0000043c  w    F .text	00000012 std::numeric_limits<int>::max()
00001594  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()
100000b0  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::nvic
00001738  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()
00001e32  w    F .text	0000001e tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base()
00003f3c  w    F .text	0000009c sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const
10000000 g       *ABS*	00000000 __base_RAM
100000ac  w    O .data	00000004 sjsu::cortex::InterruptController<43u, 5ul>::scb
00006ad4 g     F .text	00000024 .hidden __floatunsisf
00003dac  w    F .text	00000024 sjsu::lpc40xx::SystemController::EmcClockRegister::Register()
00007dcc  w    O .text	00000004 sjsu::cortex::SystemTimer::kFixedPointScaling
00002394 g     F .text	0000001a _kill
00002064  w    F .text	00000054 sjsu::InitializeDataSection()
000058aa  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00006540  w    F .text	0000001c std::array<std::function<void ()>, 59u>::end()
00005dee  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)
00005b48  w    F .text	00000028 std::array<std::function<void ()>, 59u>::array()
000007f4  w    F .text	00000048 sjsu::DefaultUptime()
00000abc  w    F .text	00000054 std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())
00007f90 g     O .text	00000020 __sf_fake_stdout
0000044e  w    F .text	00000018 std::numeric_limits<long long>::max()
00001e50  w    F .text	00000022 tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00000ea8  w    F .text	00000016 std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)
0000030c g       .text	00000000 __init_array_start
00006f18  w    F .text	00000002 .hidden __aeabi_idiv0
00005ed2  w    F .text	0000002c unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000056f6  w    F .text	00000036 std::function<void ()>::operator=(std::function<void ()> const&)
000060fe  w    F .text	00000016 std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))
00001eb6  w    F .text	00000022 tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)
00000494  w    F .text	00000016 std::_Any_data::_M_access()
000049f0  w    F .text	00000028 sjsu::bit::Register<unsigned long>::Read(sjsu::bit::Mask)
00001b84  w    F .text	0000001a tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_copy_assign_base()
000056c4  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00004008  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::SpifiClockSelect>(sjsu::lpc40xx::SystemController::SpifiClockSelect)
00007154  w    O .text	00000008 sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)::kEllipsisEnding
0000241c g     F .text	0000000c _exit
0000177e  w    F .text	00000018 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const
00007e8c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
00001796  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)
00001a0c  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00000ee2  w    F .text	00000020 std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)
00004f34  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00001868  w    F .text	00000024 char* std::__copy_move_a<false, char const*, char*>(char const*, char const*, char*)
00004b9e  w    F .text	00000018 sjsu::Pin::GetPort() const
00001750  w    F .text	00000016 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()
0000705c g     F .text	00000010 strlen
00004bf4  w    F .text	000000ac sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
10000148  w    O .bss	00000010 sjsu::Uptime
00000b38  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)
00005f82  w    F .text	00000018 sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)
00006898 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00001e32  w    F .text	0000001e tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base()
00001a2c  w    F .text	0000005c sjsu::Error_t::Error_t(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)
000023e0 g     F .text	0000003c fputs
00004a18  w    F .text	00000164 sjsu::lpc40xx::SystemController::EnableExternalOscillator() const
000057dc  w    F .text	0000002e sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)
00004f80  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
000006ec  w    F .text	0000002c sjsu::Status_t::Status_t()
00004068  w    F .text	00000016 auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)
00003fd8  w    F .text	00000018 auto sjsu::Value<sjsu::lpc40xx::SystemController::CpuClockSelect>(sjsu::lpc40xx::SystemController::CpuClockSelect)
00007eb8  w    O .text	00000014 vtable for sjsu::cortex::InterruptController<43u, 5ul>
10000020  w    O .data	00000008 sjsu::cortex::SystemTimer::nanoseconds_per_tick
00005e46  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00004ca0  w    F .text	0000003c sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
0000139c  w    F .text	0000001e std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00006b84 g     F .text	00000000 .hidden __aeabi_ldivmod
00001944  w    F .text	00000008 sjsu::Halt()
00001efa  w    F .text	00000038 tl::expected<void, sjsu::Error_t>::expected<sjsu::Error_t, (void*)0, (void*)0>(tl::unexpected<sjsu::Error_t>&&)
000068b8 g     F .text	0000000a __aeabi_atexit
0000572c  w    F .text	00000054 std::function<void ()>::function<void (*)(), void, void>(void (*)())
00005642  w    F .text	0000001c std::function<void ()>::function(decltype(nullptr))
00006974 g     F .text	00000160 .hidden __addsf3
00000a86  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000cbc  w    F .text	00000028 sjsu::LogInfo<>::LogInfo(char const*, std::experimental::fundamentals_v2::source_location const&)
00003e18  w    F .text	00000018 sjsu::lpc40xx::SystemController::GetClockConfiguration()
00007e64  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00007dfc  w    O .text	00000008 sjsu::lpc40xx::SystemController::OscillatorRegister::kExternalReady
00005248  w    F .text	000000bc sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000014  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00007024 g     F .text	00000010 raise
00001c0e  w    F .text	00000016 sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::IsMediaPresent()
00000dcc  w    F .text	00000016 std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 d5 21 00 00 71 5b 00 00 ad 21 00 00     .....!..q[...!..
      10:	71 5b 00 00 71 5b 00 00 71 5b 00 00 00 00 00 00     q[..q[..q[......
	...
      2c:	b1 67 00 00 71 5b 00 00 00 00 00 00 e1 67 00 00     .g..q[.......g..
      3c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      4c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      5c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      6c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      7c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      8c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      9c:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      ac:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      bc:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      cc:	71 5b 00 00 71 5b 00 00 71 5b 00 00 71 5b 00 00     q[..q[..q[..q[..
      dc:	71 5b 00 00 71 5b 00 00                             q[..q[..

000000e4 <data_section_table>:
      e4:	00007fb8 	.word	0x00007fb8
      e8:	10000000 	.word	0x10000000
      ec:	00000120 	.word	0x00000120
      f0:	00007fb8 	.word	0x00007fb8
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	10000120 	.word	0x10000120
     100:	000004c8 	.word	0x000004c8
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	00000355 	.word	0x00000355
     310:	00001935 	.word	0x00001935
     314:	000019d1 	.word	0x000019d1
     318:	00002055 	.word	0x00002055
     31c:	000022b1 	.word	0x000022b1
     320:	00006797 	.word	0x00006797

00000324 <_fini>:
     324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     326:	bf00      	nop
     328:	bcf8      	pop	{r3, r4, r5, r6, r7}
     32a:	bc08      	pop	{r3}
     32c:	469e      	mov	lr, r3
     32e:	4770      	bx	lr

00000330 <__do_global_dtors_aux>:
     330:	b510      	push	{r4, lr}
     332:	4c05      	ldr	r4, [pc, #20]	; (348 <__do_global_dtors_aux+0x18>)
     334:	7823      	ldrb	r3, [r4, #0]
     336:	b933      	cbnz	r3, 346 <__do_global_dtors_aux+0x16>
     338:	4b04      	ldr	r3, [pc, #16]	; (34c <__do_global_dtors_aux+0x1c>)
     33a:	b113      	cbz	r3, 342 <__do_global_dtors_aux+0x12>
     33c:	4804      	ldr	r0, [pc, #16]	; (350 <__do_global_dtors_aux+0x20>)
     33e:	f3af 8000 	nop.w
     342:	2301      	movs	r3, #1
     344:	7023      	strb	r3, [r4, #0]
     346:	bd10      	pop	{r4, pc}
     348:	10000120 	.word	0x10000120
     34c:	00000000 	.word	0x00000000
     350:	00007fb8 	.word	0x00007fb8

00000354 <frame_dummy>:
     354:	b508      	push	{r3, lr}
     356:	4b03      	ldr	r3, [pc, #12]	; (364 <frame_dummy+0x10>)
     358:	b11b      	cbz	r3, 362 <frame_dummy+0xe>
     35a:	4903      	ldr	r1, [pc, #12]	; (368 <frame_dummy+0x14>)
     35c:	4803      	ldr	r0, [pc, #12]	; (36c <frame_dummy+0x18>)
     35e:	f3af 8000 	nop.w
     362:	bd08      	pop	{r3, pc}
     364:	00000000 	.word	0x00000000
     368:	10000124 	.word	0x10000124
     36c:	00007fb8 	.word	0x00007fb8

00000370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>:
  public:
#endif

    // 14.1.2, source_location creation
    static constexpr source_location
    current(const char* __file = __builtin_FILE(),
     370:	b580      	push	{r7, lr}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	60f8      	str	r0, [r7, #12]
     378:	60b9      	str	r1, [r7, #8]
     37a:	607a      	str	r2, [r7, #4]
     37c:	603b      	str	r3, [r7, #0]
	    const char* __func = __builtin_FUNCTION(),
	    int __line = __builtin_LINE(),
	    int __col = 0) noexcept
    {
      source_location __loc;
     37e:	68f8      	ldr	r0, [r7, #12]
     380:	f000 f812 	bl	3a8 <std::experimental::fundamentals_v2::source_location::source_location()>
      __loc._M_file = __file;
     384:	68fb      	ldr	r3, [r7, #12]
     386:	68ba      	ldr	r2, [r7, #8]
     388:	601a      	str	r2, [r3, #0]
      __loc._M_func = __func;
     38a:	68fb      	ldr	r3, [r7, #12]
     38c:	687a      	ldr	r2, [r7, #4]
     38e:	605a      	str	r2, [r3, #4]
      __loc._M_line = __line;
     390:	683a      	ldr	r2, [r7, #0]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	609a      	str	r2, [r3, #8]
      __loc._M_col = __col;
     396:	69ba      	ldr	r2, [r7, #24]
     398:	68fb      	ldr	r3, [r7, #12]
     39a:	60da      	str	r2, [r3, #12]
      return __loc;
     39c:	bf00      	nop
    }
     39e:	68f8      	ldr	r0, [r7, #12]
     3a0:	3710      	adds	r7, #16
     3a2:	46bd      	mov	sp, r7
     3a4:	bd80      	pop	{r7, pc}
     3a6:	Address 0x00000000000003a6 is out of bounds.


000003a8 <std::experimental::fundamentals_v2::source_location::source_location()>:

    constexpr source_location() noexcept
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
    : _M_file("unknown"), _M_func(_M_file), _M_line(0), _M_col(0)
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	4a09      	ldr	r2, [pc, #36]	; (3d8 <std::experimental::fundamentals_v2::source_location::source_location()+0x30>)
     3b4:	601a      	str	r2, [r3, #0]
     3b6:	687b      	ldr	r3, [r7, #4]
     3b8:	681a      	ldr	r2, [r3, #0]
     3ba:	687b      	ldr	r3, [r7, #4]
     3bc:	605a      	str	r2, [r3, #4]
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	2200      	movs	r2, #0
     3c2:	609a      	str	r2, [r3, #8]
     3c4:	687b      	ldr	r3, [r7, #4]
     3c6:	2200      	movs	r2, #0
     3c8:	60da      	str	r2, [r3, #12]
    { }
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	4618      	mov	r0, r3
     3ce:	370c      	adds	r7, #12
     3d0:	46bd      	mov	sp, r7
     3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3d6:	4770      	bx	lr
     3d8:	0000706c 	.word	0x0000706c

000003dc <std::experimental::fundamentals_v2::source_location::line() const>:

    // 14.1.3, source_location field access
    constexpr uint_least32_t line() const noexcept { return _M_line; }
     3dc:	b480      	push	{r7}
     3de:	b083      	sub	sp, #12
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	689b      	ldr	r3, [r3, #8]
     3e8:	4618      	mov	r0, r3
     3ea:	370c      	adds	r7, #12
     3ec:	46bd      	mov	sp, r7
     3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f2:	4770      	bx	lr

000003f4 <std::experimental::fundamentals_v2::source_location::file_name() const>:
    constexpr uint_least32_t column() const noexcept { return _M_col; }
    constexpr const char* file_name() const noexcept { return _M_file; }
     3f4:	b480      	push	{r7}
     3f6:	b083      	sub	sp, #12
     3f8:	af00      	add	r7, sp, #0
     3fa:	6078      	str	r0, [r7, #4]
     3fc:	687b      	ldr	r3, [r7, #4]
     3fe:	681b      	ldr	r3, [r3, #0]
     400:	4618      	mov	r0, r3
     402:	370c      	adds	r7, #12
     404:	46bd      	mov	sp, r7
     406:	f85d 7b04 	ldr.w	r7, [sp], #4
     40a:	4770      	bx	lr

0000040c <std::experimental::fundamentals_v2::source_location::function_name() const>:
    constexpr const char* function_name() const noexcept { return _M_func; }
     40c:	b480      	push	{r7}
     40e:	b083      	sub	sp, #12
     410:	af00      	add	r7, sp, #0
     412:	6078      	str	r0, [r7, #4]
     414:	687b      	ldr	r3, [r7, #4]
     416:	685b      	ldr	r3, [r3, #4]
     418:	4618      	mov	r0, r3
     41a:	370c      	adds	r7, #12
     41c:	46bd      	mov	sp, r7
     41e:	f85d 7b04 	ldr.w	r7, [sp], #4
     422:	4770      	bx	lr

00000424 <operator new(unsigned int, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
     424:	b480      	push	{r7}
     426:	b083      	sub	sp, #12
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
     42c:	6039      	str	r1, [r7, #0]
     42e:	683b      	ldr	r3, [r7, #0]
     430:	4618      	mov	r0, r3
     432:	370c      	adds	r7, #12
     434:	46bd      	mov	sp, r7
     436:	f85d 7b04 	ldr.w	r7, [sp], #4
     43a:	4770      	bx	lr

0000043c <std::numeric_limits<int>::max()>:

      static _GLIBCXX_CONSTEXPR int
      min() _GLIBCXX_USE_NOEXCEPT { return -__INT_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR int
      max() _GLIBCXX_USE_NOEXCEPT { return __INT_MAX__; }
     43c:	b480      	push	{r7}
     43e:	af00      	add	r7, sp, #0
     440:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
     444:	4618      	mov	r0, r3
     446:	46bd      	mov	sp, r7
     448:	f85d 7b04 	ldr.w	r7, [sp], #4
     44c:	4770      	bx	lr

0000044e <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     44e:	b480      	push	{r7}
     450:	af00      	add	r7, sp, #0
     452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     456:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
     45a:	4610      	mov	r0, r2
     45c:	4619      	mov	r1, r3
     45e:	46bd      	mov	sp, r7
     460:	f85d 7b04 	ldr.w	r7, [sp], #4
     464:	4770      	bx	lr

00000466 <std::char_traits<char>::length(char const*)>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
     466:	b580      	push	{r7, lr}
     468:	b084      	sub	sp, #16
     46a:	af00      	add	r7, sp, #0
     46c:	6078      	str	r0, [r7, #4]
     46e:	687b      	ldr	r3, [r7, #4]
     470:	60fb      	str	r3, [r7, #12]
      return __builtin_is_constant_evaluated();
     472:	2300      	movs	r3, #0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
     474:	2b00      	cmp	r3, #0
     476:	d004      	beq.n	482 <std::char_traits<char>::length(char const*)+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
     478:	6878      	ldr	r0, [r7, #4]
     47a:	f000 f917 	bl	6ac <__gnu_cxx::char_traits<char>::length(char const*)>
     47e:	4603      	mov	r3, r0
     480:	e004      	b.n	48c <std::char_traits<char>::length(char const*)+0x26>
#endif
	return __builtin_strlen(__s);
     482:	6878      	ldr	r0, [r7, #4]
     484:	f006 fdea 	bl	705c <strlen>
     488:	4603      	mov	r3, r0
     48a:	bf00      	nop
      }
     48c:	4618      	mov	r0, r3
     48e:	3710      	adds	r7, #16
     490:	46bd      	mov	sp, r7
     492:	bd80      	pop	{r7, pc}

00000494 <std::_Any_data::_M_access()>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
     494:	b480      	push	{r7}
     496:	b083      	sub	sp, #12
     498:	af00      	add	r7, sp, #0
     49a:	6078      	str	r0, [r7, #4]
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	4618      	mov	r0, r3
     4a0:	370c      	adds	r7, #12
     4a2:	46bd      	mov	sp, r7
     4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4a8:	4770      	bx	lr

000004aa <std::_Any_data::_M_access() const>:
    const void* _M_access() const { return &_M_pod_data[0]; }
     4aa:	b480      	push	{r7}
     4ac:	b083      	sub	sp, #12
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
     4b2:	687b      	ldr	r3, [r7, #4]
     4b4:	4618      	mov	r0, r3
     4b6:	370c      	adds	r7, #12
     4b8:	46bd      	mov	sp, r7
     4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
     4be:	4770      	bx	lr

000004c0 <std::_Function_base::_Function_base()>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
     4c0:	b480      	push	{r7}
     4c2:	b083      	sub	sp, #12
     4c4:	af00      	add	r7, sp, #0
     4c6:	6078      	str	r0, [r7, #4]
     4c8:	687b      	ldr	r3, [r7, #4]
     4ca:	2200      	movs	r2, #0
     4cc:	609a      	str	r2, [r3, #8]
     4ce:	687b      	ldr	r3, [r7, #4]
     4d0:	4618      	mov	r0, r3
     4d2:	370c      	adds	r7, #12
     4d4:	46bd      	mov	sp, r7
     4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
     4da:	4770      	bx	lr

000004dc <std::_Function_base::~_Function_base()>:

    ~_Function_base()
     4dc:	b580      	push	{r7, lr}
     4de:	b082      	sub	sp, #8
     4e0:	af00      	add	r7, sp, #0
     4e2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
     4e4:	687b      	ldr	r3, [r7, #4]
     4e6:	689b      	ldr	r3, [r3, #8]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d005      	beq.n	4f8 <std::_Function_base::~_Function_base()+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     4ec:	687b      	ldr	r3, [r7, #4]
     4ee:	689b      	ldr	r3, [r3, #8]
     4f0:	6878      	ldr	r0, [r7, #4]
     4f2:	6879      	ldr	r1, [r7, #4]
     4f4:	2203      	movs	r2, #3
     4f6:	4798      	blx	r3
    }
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	4618      	mov	r0, r3
     4fc:	3708      	adds	r7, #8
     4fe:	46bd      	mov	sp, r7
     500:	bd80      	pop	{r7, pc}

00000502 <std::_Function_base::_M_empty() const>:

    bool _M_empty() const { return !_M_manager; }
     502:	b480      	push	{r7}
     504:	b083      	sub	sp, #12
     506:	af00      	add	r7, sp, #0
     508:	6078      	str	r0, [r7, #4]
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	689b      	ldr	r3, [r3, #8]
     50e:	2b00      	cmp	r3, #0
     510:	bf0c      	ite	eq
     512:	2301      	moveq	r3, #1
     514:	2300      	movne	r3, #0
     516:	b2db      	uxtb	r3, r3
     518:	4618      	mov	r0, r3
     51a:	370c      	adds	r7, #12
     51c:	46bd      	mov	sp, r7
     51e:	f85d 7b04 	ldr.w	r7, [sp], #4
     522:	4770      	bx	lr

00000524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
     524:	b480      	push	{r7}
     526:	b083      	sub	sp, #12
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
	{ return __r; }
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	e9d3 2300 	ldrd	r2, r3, [r3]
     532:	4610      	mov	r0, r2
     534:	4619      	mov	r1, r3
     536:	370c      	adds	r7, #12
     538:	46bd      	mov	sp, r7
     53a:	f85d 7b04 	ldr.w	r7, [sp], #4
     53e:	4770      	bx	lr

00000540 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      }

    template<typename _Rep1, typename _Period1,
	     typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
     540:	b5b0      	push	{r4, r5, r7, lr}
     542:	b086      	sub	sp, #24
     544:	af00      	add	r7, sp, #0
     546:	6078      	str	r0, [r7, #4]
     548:	6039      	str	r1, [r7, #0]
		const duration<_Rep2, _Period2>& __rhs)
      {
	typedef duration<_Rep1, _Period1>			__dur1;
	typedef duration<_Rep2, _Period2>			__dur2;
	typedef typename common_type<__dur1,__dur2>::type	__ct;
	return __ct(__lhs).count() < __ct(__rhs).count();
     54a:	687b      	ldr	r3, [r7, #4]
     54c:	e9d3 2300 	ldrd	r2, r3, [r3]
     550:	e9c7 2302 	strd	r2, r3, [r7, #8]
     554:	f107 0308 	add.w	r3, r7, #8
     558:	4618      	mov	r0, r3
     55a:	f7ff ffe3 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     55e:	4604      	mov	r4, r0
     560:	460d      	mov	r5, r1
     562:	683b      	ldr	r3, [r7, #0]
     564:	e9d3 2300 	ldrd	r2, r3, [r3]
     568:	e9c7 2304 	strd	r2, r3, [r7, #16]
     56c:	f107 0310 	add.w	r3, r7, #16
     570:	4618      	mov	r0, r3
     572:	f7ff ffd7 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     576:	4602      	mov	r2, r0
     578:	460b      	mov	r3, r1
     57a:	4294      	cmp	r4, r2
     57c:	eb75 0303 	sbcs.w	r3, r5, r3
     580:	bfb4      	ite	lt
     582:	2301      	movlt	r3, #1
     584:	2300      	movge	r3, #0
     586:	b2db      	uxtb	r3, r3
      }
     588:	4618      	mov	r0, r3
     58a:	3718      	adds	r7, #24
     58c:	46bd      	mov	sp, r7
     58e:	bdb0      	pop	{r4, r5, r7, pc}

00000590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     590:	b480      	push	{r7}
     592:	b083      	sub	sp, #12
     594:	af00      	add	r7, sp, #0
     596:	6078      	str	r0, [r7, #4]
     598:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     59a:	683b      	ldr	r3, [r7, #0]
     59c:	e9d3 2300 	ldrd	r2, r3, [r3]
     5a0:	6879      	ldr	r1, [r7, #4]
     5a2:	e9c1 2300 	strd	r2, r3, [r1]
     5a6:	687b      	ldr	r3, [r7, #4]
     5a8:	4618      	mov	r0, r3
     5aa:	370c      	adds	r7, #12
     5ac:	46bd      	mov	sp, r7
     5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
     5b2:	4770      	bx	lr

000005b4 <sjsu::StringLength(char const*)>:
namespace sjsu
{
/// @param str - a string to have its length computed.
/// @return The length of the input string.
constexpr size_t StringLength(const char * str)
{
     5b4:	b480      	push	{r7}
     5b6:	b085      	sub	sp, #20
     5b8:	af00      	add	r7, sp, #0
     5ba:	6078      	str	r0, [r7, #4]
  size_t result = 0;
     5bc:	2300      	movs	r3, #0
     5be:	60fb      	str	r3, [r7, #12]
  for (result = 0; str[result] != '\0'; result++)
     5c0:	2300      	movs	r3, #0
     5c2:	60fb      	str	r3, [r7, #12]
     5c4:	687a      	ldr	r2, [r7, #4]
     5c6:	68fb      	ldr	r3, [r7, #12]
     5c8:	4413      	add	r3, r2
     5ca:	781b      	ldrb	r3, [r3, #0]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d004      	beq.n	5da <sjsu::StringLength(char const*)+0x26>
  {
    continue;
     5d0:	bf00      	nop
  for (result = 0; str[result] != '\0'; result++)
     5d2:	68fb      	ldr	r3, [r7, #12]
     5d4:	3301      	adds	r3, #1
     5d6:	60fb      	str	r3, [r7, #12]
     5d8:	e7f4      	b.n	5c4 <sjsu::StringLength(char const*)+0x10>
  }
  return result + 1;
     5da:	68fb      	ldr	r3, [r7, #12]
     5dc:	3301      	adds	r3, #1
}
     5de:	4618      	mov	r0, r3
     5e0:	3714      	adds	r7, #20
     5e2:	46bd      	mov	sp, r7
     5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e8:	4770      	bx	lr

000005ea <sjsu::BasenameLength(char const*)>:

/// @param path - path to calculate the basename length for.
/// @return the number of characters from the end of a string that contains the
///         basename.
constexpr size_t BasenameLength(const char * path)
{
     5ea:	b580      	push	{r7, lr}
     5ec:	b084      	sub	sp, #16
     5ee:	af00      	add	r7, sp, #0
     5f0:	6078      	str	r0, [r7, #4]
  size_t forward_slash = 0;
     5f2:	2300      	movs	r3, #0
     5f4:	60fb      	str	r3, [r7, #12]
  size_t length        = StringLength(path);
     5f6:	6878      	ldr	r0, [r7, #4]
     5f8:	f7ff ffdc 	bl	5b4 <sjsu::StringLength(char const*)>
     5fc:	60b8      	str	r0, [r7, #8]
  for (forward_slash = 0; forward_slash < length; forward_slash++)
     5fe:	2300      	movs	r3, #0
     600:	60fb      	str	r3, [r7, #12]
     602:	68fa      	ldr	r2, [r7, #12]
     604:	68bb      	ldr	r3, [r7, #8]
     606:	429a      	cmp	r2, r3
     608:	d20d      	bcs.n	626 <sjsu::BasenameLength(char const*)+0x3c>
  {
    if (path[(length - 1) - forward_slash] == '/')
     60a:	68ba      	ldr	r2, [r7, #8]
     60c:	68fb      	ldr	r3, [r7, #12]
     60e:	1ad3      	subs	r3, r2, r3
     610:	3b01      	subs	r3, #1
     612:	687a      	ldr	r2, [r7, #4]
     614:	4413      	add	r3, r2
     616:	781b      	ldrb	r3, [r3, #0]
     618:	2b2f      	cmp	r3, #47	; 0x2f
     61a:	d003      	beq.n	624 <sjsu::BasenameLength(char const*)+0x3a>
  for (forward_slash = 0; forward_slash < length; forward_slash++)
     61c:	68fb      	ldr	r3, [r7, #12]
     61e:	3301      	adds	r3, #1
     620:	60fb      	str	r3, [r7, #12]
     622:	e7ee      	b.n	602 <sjsu::BasenameLength(char const*)+0x18>
    {
      break;
     624:	bf00      	nop
    }
  }
  return forward_slash;
     626:	68fb      	ldr	r3, [r7, #12]
}
     628:	4618      	mov	r0, r3
     62a:	3710      	adds	r7, #16
     62c:	46bd      	mov	sp, r7
     62e:	bd80      	pop	{r7, pc}

00000630 <sjsu::FileBasename(char const*)>:
/// This implementation, if used outside of a constexpr context will occur at
/// runtime.
///
/// @param path - path to find the base name of.
constexpr const char * FileBasename(const char * path)
{
     630:	b580      	push	{r7, lr}
     632:	b086      	sub	sp, #24
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
  const size_t kBasenameLength = BasenameLength(path);
     638:	6878      	ldr	r0, [r7, #4]
     63a:	f7ff ffd6 	bl	5ea <sjsu::BasenameLength(char const*)>
     63e:	6178      	str	r0, [r7, #20]
  const size_t kPathLength     = StringLength(path);
     640:	6878      	ldr	r0, [r7, #4]
     642:	f7ff ffb7 	bl	5b4 <sjsu::StringLength(char const*)>
     646:	6138      	str	r0, [r7, #16]
  const char * basename        = &path[kPathLength - kBasenameLength];
     648:	693a      	ldr	r2, [r7, #16]
     64a:	697b      	ldr	r3, [r7, #20]
     64c:	1ad3      	subs	r3, r2, r3
     64e:	687a      	ldr	r2, [r7, #4]
     650:	4413      	add	r3, r2
     652:	60fb      	str	r3, [r7, #12]
  return basename;
     654:	68fb      	ldr	r3, [r7, #12]
}
     656:	4618      	mov	r0, r3
     658:	3718      	adds	r7, #24
     65a:	46bd      	mov	sp, r7
     65c:	bd80      	pop	{r7, pc}

0000065e <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>:
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      __attribute__((__nonnull__)) constexpr
      basic_string_view(const _CharT* __str) noexcept
     65e:	b580      	push	{r7, lr}
     660:	b082      	sub	sp, #8
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
     666:	6039      	str	r1, [r7, #0]
      : _M_len{traits_type::length(__str)},
     668:	6838      	ldr	r0, [r7, #0]
     66a:	f7ff fefc 	bl	466 <std::char_traits<char>::length(char const*)>
     66e:	4602      	mov	r2, r0
	_M_str{__str}
     670:	687b      	ldr	r3, [r7, #4]
     672:	601a      	str	r2, [r3, #0]
     674:	687b      	ldr	r3, [r7, #4]
     676:	683a      	ldr	r2, [r7, #0]
     678:	605a      	str	r2, [r3, #4]
      { }
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	4618      	mov	r0, r3
     67e:	3708      	adds	r7, #8
     680:	46bd      	mov	sp, r7
     682:	bd80      	pop	{r7, pc}

00000684 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>:
      eq(const char_type& __c1, const char_type& __c2)
     684:	b480      	push	{r7}
     686:	b083      	sub	sp, #12
     688:	af00      	add	r7, sp, #0
     68a:	6078      	str	r0, [r7, #4]
     68c:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
     68e:	687b      	ldr	r3, [r7, #4]
     690:	781a      	ldrb	r2, [r3, #0]
     692:	683b      	ldr	r3, [r7, #0]
     694:	781b      	ldrb	r3, [r3, #0]
     696:	429a      	cmp	r2, r3
     698:	bf0c      	ite	eq
     69a:	2301      	moveq	r3, #1
     69c:	2300      	movne	r3, #0
     69e:	b2db      	uxtb	r3, r3
     6a0:	4618      	mov	r0, r3
     6a2:	370c      	adds	r7, #12
     6a4:	46bd      	mov	sp, r7
     6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6aa:	4770      	bx	lr

000006ac <__gnu_cxx::char_traits<char>::length(char const*)>:
    char_traits<_CharT>::
     6ac:	b580      	push	{r7, lr}
     6ae:	b084      	sub	sp, #16
     6b0:	af00      	add	r7, sp, #0
     6b2:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
     6b4:	2300      	movs	r3, #0
     6b6:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
     6b8:	687a      	ldr	r2, [r7, #4]
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	4413      	add	r3, r2
     6be:	2200      	movs	r2, #0
     6c0:	72fa      	strb	r2, [r7, #11]
     6c2:	f107 020b 	add.w	r2, r7, #11
     6c6:	4611      	mov	r1, r2
     6c8:	4618      	mov	r0, r3
     6ca:	f7ff ffdb 	bl	684 <__gnu_cxx::char_traits<char>::eq(char const&, char const&)>
     6ce:	4603      	mov	r3, r0
     6d0:	f083 0301 	eor.w	r3, r3, #1
     6d4:	b2db      	uxtb	r3, r3
     6d6:	2b00      	cmp	r3, #0
     6d8:	d003      	beq.n	6e2 <__gnu_cxx::char_traits<char>::length(char const*)+0x36>
        ++__i;
     6da:	68fb      	ldr	r3, [r7, #12]
     6dc:	3301      	adds	r3, #1
     6de:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
     6e0:	e7ea      	b.n	6b8 <__gnu_cxx::char_traits<char>::length(char const*)+0xc>
      return __i;
     6e2:	68fb      	ldr	r3, [r7, #12]
    }
     6e4:	4618      	mov	r0, r3
     6e6:	3710      	adds	r7, #16
     6e8:	46bd      	mov	sp, r7
     6ea:	bd80      	pop	{r7, pc}

000006ec <sjsu::Status_t::Status_t()>:

namespace sjsu
{
/// Parent structure of the `Status` object containing the status code as well
/// as the status' name.
struct Status_t
     6ec:	b580      	push	{r7, lr}
     6ee:	b082      	sub	sp, #8
     6f0:	af00      	add	r7, sp, #0
     6f2:	6078      	str	r0, [r7, #4]
     6f4:	f7ff fea2 	bl	43c <std::numeric_limits<int>::max()>
     6f8:	4602      	mov	r2, r0
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	601a      	str	r2, [r3, #0]
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	3304      	adds	r3, #4
     702:	4904      	ldr	r1, [pc, #16]	; (714 <sjsu::Status_t::Status_t()+0x28>)
     704:	4618      	mov	r0, r3
     706:	f7ff ffaa 	bl	65e <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>
     70a:	687b      	ldr	r3, [r7, #4]
     70c:	4618      	mov	r0, r3
     70e:	3708      	adds	r7, #8
     710:	46bd      	mov	sp, r7
     712:	bd80      	pop	{r7, pc}
     714:	00007088 	.word	0x00007088

00000718 <sjsu::Status::Status(sjsu::Status_t const&)>:
  }

  /// Implicit conversion from Status_t& -> Status
  ///
  /// @param status - the status to copy
  constexpr Status(const Status_t & status)  // NOLINT
     718:	b580      	push	{r7, lr}
     71a:	b082      	sub	sp, #8
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
     720:	6039      	str	r1, [r7, #0]
  {
     722:	687b      	ldr	r3, [r7, #4]
     724:	4618      	mov	r0, r3
     726:	f7ff ffe1 	bl	6ec <sjsu::Status_t::Status_t()>
    code = status.code;
     72a:	683b      	ldr	r3, [r7, #0]
     72c:	681a      	ldr	r2, [r3, #0]
     72e:	687b      	ldr	r3, [r7, #4]
     730:	601a      	str	r2, [r3, #0]
    name = status.name;
     732:	687b      	ldr	r3, [r7, #4]
     734:	683a      	ldr	r2, [r7, #0]
     736:	3304      	adds	r3, #4
     738:	3204      	adds	r2, #4
     73a:	e892 0003 	ldmia.w	r2, {r0, r1}
     73e:	e883 0003 	stmia.w	r3, {r0, r1}
  }
     742:	687b      	ldr	r3, [r7, #4]
     744:	4618      	mov	r0, r3
     746:	3708      	adds	r7, #8
     748:	46bd      	mov	sp, r7
     74a:	bd80      	pop	{r7, pc}

0000074c <sjsu::Status::operator=(sjsu::Status_t const&)>:

  /// Implicit assignment from Status_t& -> Status
  ///
  /// @param status
  /// @return constexpr Status
  constexpr Status operator=(const Status_t & status)
     74c:	b480      	push	{r7}
     74e:	b085      	sub	sp, #20
     750:	af00      	add	r7, sp, #0
     752:	60f8      	str	r0, [r7, #12]
     754:	60b9      	str	r1, [r7, #8]
     756:	607a      	str	r2, [r7, #4]
  {
    code = status.code;
     758:	687b      	ldr	r3, [r7, #4]
     75a:	681a      	ldr	r2, [r3, #0]
     75c:	68bb      	ldr	r3, [r7, #8]
     75e:	601a      	str	r2, [r3, #0]
    name = status.name;
     760:	68bb      	ldr	r3, [r7, #8]
     762:	687a      	ldr	r2, [r7, #4]
     764:	3304      	adds	r3, #4
     766:	3204      	adds	r2, #4
     768:	e892 0003 	ldmia.w	r2, {r0, r1}
     76c:	e883 0003 	stmia.w	r3, {r0, r1}
    return *this;
     770:	68fb      	ldr	r3, [r7, #12]
     772:	68ba      	ldr	r2, [r7, #8]
     774:	ca07      	ldmia	r2, {r0, r1, r2}
     776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  }
     77a:	68f8      	ldr	r0, [r7, #12]
     77c:	3714      	adds	r7, #20
     77e:	46bd      	mov	sp, r7
     780:	f85d 7b04 	ldr.w	r7, [sp], #4
     784:	4770      	bx	lr

00000786 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>:
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
     786:	b580      	push	{r7, lr}
     788:	b082      	sub	sp, #8
     78a:	af00      	add	r7, sp, #0
     78c:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
     78e:	687b      	ldr	r3, [r7, #4]
     790:	4618      	mov	r0, r3
     792:	f000 f805 	bl	7a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>
     796:	bf00      	nop
     798:	6878      	ldr	r0, [r7, #4]
     79a:	3708      	adds	r7, #8
     79c:	46bd      	mov	sp, r7
     79e:	bd80      	pop	{r7, pc}

000007a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)48>()>:
      constexpr _Dur __check_overflow()
     7a0:	b580      	push	{r7, lr}
     7a2:	b084      	sub	sp, #16
     7a4:	af00      	add	r7, sp, #0
     7a6:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
     7a8:	f04f 0200 	mov.w	r2, #0
     7ac:	f04f 0300 	mov.w	r3, #0
     7b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
     7b4:	f107 0308 	add.w	r3, r7, #8
     7b8:	4619      	mov	r1, r3
     7ba:	6878      	ldr	r0, [r7, #4]
     7bc:	f7ff fee8 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
     7c0:	6878      	ldr	r0, [r7, #4]
     7c2:	3710      	adds	r7, #16
     7c4:	46bd      	mov	sp, r7
     7c6:	bd80      	pop	{r7, pc}

000007c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
	operator+=(const duration& __d)
     7c8:	b5b0      	push	{r4, r5, r7, lr}
     7ca:	b082      	sub	sp, #8
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
     7d0:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
     7d2:	6838      	ldr	r0, [r7, #0]
     7d4:	f7ff fea6 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	e9d3 2300 	ldrd	r2, r3, [r3]
     7de:	1884      	adds	r4, r0, r2
     7e0:	eb41 0503 	adc.w	r5, r1, r3
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	e9c3 4500 	strd	r4, r5, [r3]
	  return *this;
     7ea:	687b      	ldr	r3, [r7, #4]
	}
     7ec:	4618      	mov	r0, r3
     7ee:	3708      	adds	r7, #8
     7f0:	46bd      	mov	sp, r7
     7f2:	bdb0      	pop	{r4, r5, r7, pc}

000007f4 <sjsu::DefaultUptime()>:
/// means to keep time. It should not be used in production.
///
/// @return the current number of fake uptime nanoseconds that increments each
/// time this function is called.
inline std::chrono::nanoseconds DefaultUptime()
{
     7f4:	b580      	push	{r7, lr}
     7f6:	b086      	sub	sp, #24
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
  static std::chrono::nanoseconds default_uptime = 0ns;
  default_uptime += 1us;
     7fc:	f107 0310 	add.w	r3, r7, #16
     800:	4618      	mov	r0, r3
     802:	f000 f933 	bl	a6c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>
     806:	f107 0210 	add.w	r2, r7, #16
     80a:	f107 0308 	add.w	r3, r7, #8
     80e:	4611      	mov	r1, r2
     810:	4618      	mov	r0, r3
     812:	f000 f938 	bl	a86 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     816:	f107 0308 	add.w	r3, r7, #8
     81a:	4619      	mov	r1, r3
     81c:	4806      	ldr	r0, [pc, #24]	; (838 <sjsu::DefaultUptime()+0x44>)
     81e:	f7ff ffd3 	bl	7c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  return default_uptime;
     822:	6879      	ldr	r1, [r7, #4]
     824:	4b04      	ldr	r3, [pc, #16]	; (838 <sjsu::DefaultUptime()+0x44>)
     826:	e9d3 2300 	ldrd	r2, r3, [r3]
     82a:	e9c1 2300 	strd	r2, r3, [r1]
}
     82e:	6878      	ldr	r0, [r7, #4]
     830:	3718      	adds	r7, #24
     832:	46bd      	mov	sp, r7
     834:	bd80      	pop	{r7, pc}
     836:	bf00      	nop
     838:	10000140 	.word	0x10000140

0000083c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
     83c:	b580      	push	{r7, lr}
     83e:	b082      	sub	sp, #8
     840:	af00      	add	r7, sp, #0
     842:	6078      	str	r0, [r7, #4]
     844:	687b      	ldr	r3, [r7, #4]
     846:	4618      	mov	r0, r3
     848:	f7ff fe48 	bl	4dc <std::_Function_base::~_Function_base()>
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	4618      	mov	r0, r3
     850:	3708      	adds	r7, #8
     852:	46bd      	mov	sp, r7
     854:	bd80      	pop	{r7, pc}
     856:	Address 0x0000000000000856 is out of bounds.


00000858 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>:
///        return true.
/// @param is_done will be run in a tight loop until it returns true or the
///        timeout time has elapsed.
inline Status Wait(std::chrono::nanoseconds timeout,
                   std::function<bool()> is_done)
{
     858:	b590      	push	{r4, r7, lr}
     85a:	b099      	sub	sp, #100	; 0x64
     85c:	af00      	add	r7, sp, #0
     85e:	6178      	str	r0, [r7, #20]
     860:	e9c7 2302 	strd	r2, r3, [r7, #8]
  std::chrono::nanoseconds timeout_time;
  if (timeout == std::chrono::nanoseconds::max())
     864:	f107 0330 	add.w	r3, r7, #48	; 0x30
     868:	4618      	mov	r0, r3
     86a:	f000 f951 	bl	b10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>
     86e:	f107 0230 	add.w	r2, r7, #48	; 0x30
     872:	f107 0308 	add.w	r3, r7, #8
     876:	4611      	mov	r1, r2
     878:	4618      	mov	r0, r3
     87a:	f000 f95d 	bl	b38 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     87e:	4603      	mov	r3, r0
     880:	2b00      	cmp	r3, #0
     882:	d004      	beq.n	88e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x36>
  {
    // TODO(#983): This is a cheap hack to keep overflows from happening, but
    // what if the system hsa been on for a long period of time and a new
    // timeout overflows? This needs to be handled properly.
    timeout_time = timeout;
     884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     888:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
     88c:	e026      	b.n	8dc <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x84>
  }
  else if (timeout == 0ns)
     88e:	f107 0338 	add.w	r3, r7, #56	; 0x38
     892:	4618      	mov	r0, r3
     894:	f7ff ff77 	bl	786 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)48>()>
     898:	f107 0238 	add.w	r2, r7, #56	; 0x38
     89c:	f107 0308 	add.w	r3, r7, #8
     8a0:	4611      	mov	r1, r2
     8a2:	4618      	mov	r0, r3
     8a4:	f000 f948 	bl	b38 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     8a8:	4603      	mov	r3, r0
     8aa:	2b00      	cmp	r3, #0
     8ac:	d004      	beq.n	8b8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x60>
  {
    return Status::kTimedOut;
     8ae:	4924      	ldr	r1, [pc, #144]	; (940 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xe8>)
     8b0:	6978      	ldr	r0, [r7, #20]
     8b2:	f7ff ff31 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>
     8b6:	e03e      	b.n	936 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xde>
      // this function, we substract 2ns.
      timeout_time = (Uptime() + timeout) - 2us;
    }
    else
    {
      timeout_time = Uptime() + timeout;
     8b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
     8bc:	4921      	ldr	r1, [pc, #132]	; (944 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xec>)
     8be:	4618      	mov	r0, r3
     8c0:	f000 f961 	bl	b86 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     8c4:	463b      	mov	r3, r7
     8c6:	f107 0208 	add.w	r2, r7, #8
     8ca:	f107 0140 	add.w	r1, r7, #64	; 0x40
     8ce:	4618      	mov	r0, r3
     8d0:	f000 f972 	bl	bb8 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     8d4:	e9d7 2300 	ldrd	r2, r3, [r7]
     8d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }
  }

  Status status = Status::kTimedOut;
     8dc:	f107 031c 	add.w	r3, r7, #28
     8e0:	4917      	ldr	r1, [pc, #92]	; (940 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xe8>)
     8e2:	4618      	mov	r0, r3
     8e4:	f7ff ff18 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>
  while (Uptime() <= timeout_time)
     8e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
     8ec:	4915      	ldr	r1, [pc, #84]	; (944 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xec>)
     8ee:	4618      	mov	r0, r3
     8f0:	f000 f949 	bl	b86 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>
     8f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
     8f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
     8fc:	4611      	mov	r1, r2
     8fe:	4618      	mov	r0, r3
     900:	f000 f98a 	bl	c18 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     904:	4603      	mov	r3, r0
     906:	2b00      	cmp	r3, #0
     908:	d00d      	beq.n	926 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xce>
  {
    if (is_done())
     90a:	6f38      	ldr	r0, [r7, #112]	; 0x70
     90c:	f000 f995 	bl	c3a <std::function<bool ()>::operator()() const>
     910:	4603      	mov	r3, r0
     912:	2b00      	cmp	r3, #0
     914:	d0e8      	beq.n	8e8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0x90>
    {
      status = Status::kSuccess;
     916:	f107 0354 	add.w	r3, r7, #84	; 0x54
     91a:	f107 011c 	add.w	r1, r7, #28
     91e:	4a0a      	ldr	r2, [pc, #40]	; (948 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)+0xf0>)
     920:	4618      	mov	r0, r3
     922:	f7ff ff13 	bl	74c <sjsu::Status::operator=(sjsu::Status_t const&)>
      break;
    }
  }
  return status;
     926:	697b      	ldr	r3, [r7, #20]
     928:	461c      	mov	r4, r3
     92a:	f107 031c 	add.w	r3, r7, #28
     92e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     932:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
     936:	6978      	ldr	r0, [r7, #20]
     938:	3764      	adds	r7, #100	; 0x64
     93a:	46bd      	mov	sp, r7
     93c:	bd90      	pop	{r4, r7, pc}
     93e:	bf00      	nop
     940:	00007140 	.word	0x00007140
     944:	10000148 	.word	0x10000148
     948:	00007134 	.word	0x00007134

0000094c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>:
///
/// @param timeout - the amount of time to wait.
/// @return always returns Status::kTimedOut
inline Status Wait(std::chrono::nanoseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     94c:	b480      	push	{r7}
     94e:	b083      	sub	sp, #12
     950:	af00      	add	r7, sp, #0
     952:	6078      	str	r0, [r7, #4]
     954:	2300      	movs	r3, #0
     956:	4618      	mov	r0, r3
     958:	370c      	adds	r7, #12
     95a:	46bd      	mov	sp, r7
     95c:	f85d 7b04 	ldr.w	r7, [sp], #4
     960:	4770      	bx	lr

00000962 <std::function<bool ()>::~function()>:
     962:	b580      	push	{r7, lr}
     964:	b082      	sub	sp, #8
     966:	af00      	add	r7, sp, #0
     968:	6078      	str	r0, [r7, #4]
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	4618      	mov	r0, r3
     96e:	f7ff fdb5 	bl	4dc <std::_Function_base::~_Function_base()>
     972:	687b      	ldr	r3, [r7, #4]
     974:	4618      	mov	r0, r3
     976:	3708      	adds	r7, #8
     978:	46bd      	mov	sp, r7
     97a:	bd80      	pop	{r7, pc}

0000097c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:
{
     97c:	b580      	push	{r7, lr}
     97e:	b08c      	sub	sp, #48	; 0x30
     980:	af02      	add	r7, sp, #8
     982:	60f8      	str	r0, [r7, #12]
     984:	e9c7 2300 	strd	r2, r3, [r7]
  return Wait(timeout, []() -> bool { return false; });
     988:	f107 0314 	add.w	r3, r7, #20
     98c:	4618      	mov	r0, r3
     98e:	f000 f96b 	bl	c68 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>
     992:	68f9      	ldr	r1, [r7, #12]
     994:	f107 0314 	add.w	r3, r7, #20
     998:	9300      	str	r3, [sp, #0]
     99a:	e9d7 2300 	ldrd	r2, r3, [r7]
     99e:	4608      	mov	r0, r1
     9a0:	f7ff ff5a 	bl	858 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::function<bool ()>)>
     9a4:	f107 0314 	add.w	r3, r7, #20
     9a8:	4618      	mov	r0, r3
     9aa:	f7ff ffda 	bl	962 <std::function<bool ()>::~function()>
}
     9ae:	68f8      	ldr	r0, [r7, #12]
     9b0:	3728      	adds	r7, #40	; 0x28
     9b2:	46bd      	mov	sp, r7
     9b4:	bd80      	pop	{r7, pc}

000009b6 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>:

/// Delay the system for a duration of time
inline void Delay(std::chrono::nanoseconds delay_time)
{
     9b6:	b580      	push	{r7, lr}
     9b8:	b086      	sub	sp, #24
     9ba:	af00      	add	r7, sp, #0
     9bc:	e9c7 0100 	strd	r0, r1, [r7]
  Wait(delay_time);
     9c0:	f107 010c 	add.w	r1, r7, #12
     9c4:	e9d7 2300 	ldrd	r2, r3, [r7]
     9c8:	4608      	mov	r0, r1
     9ca:	f7ff ffd7 	bl	97c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
}
     9ce:	bf00      	nop
     9d0:	3718      	adds	r7, #24
     9d2:	46bd      	mov	sp, r7
     9d4:	bd80      	pop	{r7, pc}
     9d6:	Address 0x00000000000009d6 is out of bounds.


000009d8 <main>:

#include "utility/log.hpp"
#include "utility/time.hpp"

int main()
{
     9d8:	b580      	push	{r7, lr}
     9da:	b092      	sub	sp, #72	; 0x48
     9dc:	af02      	add	r7, sp, #8
  sjsu::LogInfo("Starting Hello World Application");
     9de:	1d38      	adds	r0, r7, #4
     9e0:	2300      	movs	r3, #0
     9e2:	9300      	str	r3, [sp, #0]
     9e4:	2308      	movs	r3, #8
     9e6:	4a1d      	ldr	r2, [pc, #116]	; (a5c <main+0x84>)
     9e8:	491d      	ldr	r1, [pc, #116]	; (a60 <main+0x88>)
     9ea:	f7ff fcc1 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
     9ee:	1d3a      	adds	r2, r7, #4
     9f0:	463b      	mov	r3, r7
     9f2:	491c      	ldr	r1, [pc, #112]	; (a64 <main+0x8c>)
     9f4:	4618      	mov	r0, r3
     9f6:	f000 f961 	bl	cbc <sjsu::LogInfo<>::LogInfo(char const*, std::experimental::fundamentals_v2::source_location const&)>
  while (true)
  {
    for (uint8_t i = 0; i < 16; i++)
     9fa:	2300      	movs	r3, #0
     9fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
     a04:	2b0f      	cmp	r3, #15
     a06:	d8f8      	bhi.n	9fa <main+0x22>
    {
      sjsu::LogInfo("Hello World 0x%X", i);
     a08:	f107 0018 	add.w	r0, r7, #24
     a0c:	2300      	movs	r3, #0
     a0e:	9300      	str	r3, [sp, #0]
     a10:	230d      	movs	r3, #13
     a12:	4a12      	ldr	r2, [pc, #72]	; (a5c <main+0x84>)
     a14:	4912      	ldr	r1, [pc, #72]	; (a60 <main+0x88>)
     a16:	f7ff fcab 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
     a1a:	f107 0318 	add.w	r3, r7, #24
     a1e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
     a22:	f107 0014 	add.w	r0, r7, #20
     a26:	4910      	ldr	r1, [pc, #64]	; (a68 <main+0x90>)
     a28:	f000 f95c 	bl	ce4 <sjsu::LogInfo<unsigned char>::LogInfo(char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)>
      sjsu::Delay(500ms);
     a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
     a30:	4618      	mov	r0, r3
     a32:	f000 f971 	bl	d18 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>
     a36:	f107 0230 	add.w	r2, r7, #48	; 0x30
     a3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
     a3e:	4611      	mov	r1, r2
     a40:	4618      	mov	r0, r3
     a42:	f000 f976 	bl	d32 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     a46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
     a4a:	f7ff ffb4 	bl	9b6 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)>
    for (uint8_t i = 0; i < 16; i++)
     a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
     a52:	3301      	adds	r3, #1
     a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
     a58:	e7d2      	b.n	a00 <main+0x28>
     a5a:	bf00      	nop
     a5c:	00007090 	.word	0x00007090
     a60:	00007098 	.word	0x00007098
     a64:	000070a8 	.word	0x000070a8
     a68:	000070cc 	.word	0x000070cc

00000a6c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::operator"" us<(char)49>()>:
      operator""us()
     a6c:	b580      	push	{r7, lr}
     a6e:	b082      	sub	sp, #8
     a70:	af00      	add	r7, sp, #0
     a72:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
     a74:	687b      	ldr	r3, [r7, #4]
     a76:	4618      	mov	r0, r3
     a78:	f000 f975 	bl	d66 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>
     a7c:	bf00      	nop
     a7e:	6878      	ldr	r0, [r7, #4]
     a80:	3708      	adds	r7, #8
     a82:	46bd      	mov	sp, r7
     a84:	bd80      	pop	{r7, pc}

00000a86 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     a86:	b580      	push	{r7, lr}
     a88:	b084      	sub	sp, #16
     a8a:	af00      	add	r7, sp, #0
     a8c:	6078      	str	r0, [r7, #4]
     a8e:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     a90:	f107 0308 	add.w	r3, r7, #8
     a94:	6839      	ldr	r1, [r7, #0]
     a96:	4618      	mov	r0, r3
     a98:	f000 f979 	bl	d8e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     a9c:	f107 0308 	add.w	r3, r7, #8
     aa0:	4618      	mov	r0, r3
     aa2:	f7ff fd3f 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     aa6:	4602      	mov	r2, r0
     aa8:	460b      	mov	r3, r1
     aaa:	6879      	ldr	r1, [r7, #4]
     aac:	e9c1 2300 	strd	r2, r3, [r1]
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	4618      	mov	r0, r3
     ab4:	3710      	adds	r7, #16
     ab6:	46bd      	mov	sp, r7
     ab8:	bd80      	pop	{r7, pc}
     aba:	Address 0x0000000000000aba is out of bounds.


00000abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
     abc:	b590      	push	{r4, r7, lr}
     abe:	b083      	sub	sp, #12
     ac0:	af00      	add	r7, sp, #0
     ac2:	6078      	str	r0, [r7, #4]
     ac4:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	4618      	mov	r0, r3
     aca:	f7ff fcf9 	bl	4c0 <std::_Function_base::_Function_base()>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
     ace:	683b      	ldr	r3, [r7, #0]
     ad0:	4618      	mov	r0, r3
     ad2:	f000 f96b 	bl	dac <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
     ad6:	4603      	mov	r3, r0
     ad8:	2b00      	cmp	r3, #0
     ada:	d00f      	beq.n	afc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
     adc:	687c      	ldr	r4, [r7, #4]
     ade:	463b      	mov	r3, r7
     ae0:	4618      	mov	r0, r3
     ae2:	f000 f973 	bl	dcc <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
     ae6:	4603      	mov	r3, r0
     ae8:	4619      	mov	r1, r3
     aea:	4620      	mov	r0, r4
     aec:	f000 f979 	bl	de2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	4a05      	ldr	r2, [pc, #20]	; (b08 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x4c>)
     af4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	4a04      	ldr	r2, [pc, #16]	; (b0c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())+0x50>)
     afa:	609a      	str	r2, [r3, #8]
	  }
      }
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	4618      	mov	r0, r3
     b00:	370c      	adds	r7, #12
     b02:	46bd      	mov	sp, r7
     b04:	bd90      	pop	{r4, r7, pc}
     b06:	bf00      	nop
     b08:	00000e07 	.word	0x00000e07
     b0c:	00000e2b 	.word	0x00000e2b

00000b10 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::max()>:
	max() noexcept
     b10:	b580      	push	{r7, lr}
     b12:	b084      	sub	sp, #16
     b14:	af00      	add	r7, sp, #0
     b16:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
     b18:	f000 f9b2 	bl	e80 <std::chrono::duration_values<long long>::max()>
     b1c:	4602      	mov	r2, r0
     b1e:	460b      	mov	r3, r1
     b20:	e9c7 2302 	strd	r2, r3, [r7, #8]
     b24:	f107 0308 	add.w	r3, r7, #8
     b28:	4619      	mov	r1, r3
     b2a:	6878      	ldr	r0, [r7, #4]
     b2c:	f7ff fd30 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
     b30:	6878      	ldr	r0, [r7, #4]
     b32:	3710      	adds	r7, #16
     b34:	46bd      	mov	sp, r7
     b36:	bd80      	pop	{r7, pc}

00000b38 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
     b38:	b5b0      	push	{r4, r5, r7, lr}
     b3a:	b086      	sub	sp, #24
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
     b40:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	e9d3 2300 	ldrd	r2, r3, [r3]
     b48:	e9c7 2302 	strd	r2, r3, [r7, #8]
     b4c:	f107 0308 	add.w	r3, r7, #8
     b50:	4618      	mov	r0, r3
     b52:	f7ff fce7 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     b56:	4604      	mov	r4, r0
     b58:	460d      	mov	r5, r1
     b5a:	683b      	ldr	r3, [r7, #0]
     b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
     b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
     b64:	f107 0310 	add.w	r3, r7, #16
     b68:	4618      	mov	r0, r3
     b6a:	f7ff fcdb 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     b6e:	4602      	mov	r2, r0
     b70:	460b      	mov	r3, r1
     b72:	429d      	cmp	r5, r3
     b74:	bf06      	itte	eq
     b76:	4294      	cmpeq	r4, r2
     b78:	2301      	moveq	r3, #1
     b7a:	2300      	movne	r3, #0
     b7c:	b2db      	uxtb	r3, r3
      }
     b7e:	4618      	mov	r0, r3
     b80:	3718      	adds	r7, #24
     b82:	46bd      	mov	sp, r7
     b84:	bdb0      	pop	{r4, r5, r7, pc}

00000b86 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
     b86:	b580      	push	{r7, lr}
     b88:	b082      	sub	sp, #8
     b8a:	af00      	add	r7, sp, #0
     b8c:	6078      	str	r0, [r7, #4]
     b8e:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
     b90:	683b      	ldr	r3, [r7, #0]
     b92:	4618      	mov	r0, r3
     b94:	f7ff fcb5 	bl	502 <std::_Function_base::_M_empty() const>
     b98:	4603      	mov	r3, r0
     b9a:	2b00      	cmp	r3, #0
     b9c:	d001      	beq.n	ba2 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator()() const+0x1c>
	__throw_bad_function_call();
     b9e:	f005 fe90 	bl	68c2 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     ba2:	683b      	ldr	r3, [r7, #0]
     ba4:	68db      	ldr	r3, [r3, #12]
     ba6:	6839      	ldr	r1, [r7, #0]
     ba8:	687a      	ldr	r2, [r7, #4]
     baa:	4610      	mov	r0, r2
     bac:	4798      	blx	r3
     bae:	bf00      	nop
    }
     bb0:	6878      	ldr	r0, [r7, #4]
     bb2:	3708      	adds	r7, #8
     bb4:	46bd      	mov	sp, r7
     bb6:	bd80      	pop	{r7, pc}

00000bb8 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
     bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
     bbc:	b08a      	sub	sp, #40	; 0x28
     bbe:	af00      	add	r7, sp, #0
     bc0:	60f8      	str	r0, [r7, #12]
     bc2:	60b9      	str	r1, [r7, #8]
     bc4:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
     bcc:	e9c7 2306 	strd	r2, r3, [r7, #24]
     bd0:	f107 0318 	add.w	r3, r7, #24
     bd4:	4618      	mov	r0, r3
     bd6:	f7ff fca5 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     bda:	4604      	mov	r4, r0
     bdc:	460d      	mov	r5, r1
     bde:	687b      	ldr	r3, [r7, #4]
     be0:	e9d3 2300 	ldrd	r2, r3, [r3]
     be4:	e9c7 2308 	strd	r2, r3, [r7, #32]
     be8:	f107 0320 	add.w	r3, r7, #32
     bec:	4618      	mov	r0, r3
     bee:	f7ff fc99 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     bf2:	4602      	mov	r2, r0
     bf4:	460b      	mov	r3, r1
     bf6:	eb14 0802 	adds.w	r8, r4, r2
     bfa:	eb45 0903 	adc.w	r9, r5, r3
     bfe:	e9c7 8904 	strd	r8, r9, [r7, #16]
     c02:	f107 0310 	add.w	r3, r7, #16
     c06:	4619      	mov	r1, r3
     c08:	68f8      	ldr	r0, [r7, #12]
     c0a:	f7ff fcc1 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
     c0e:	68f8      	ldr	r0, [r7, #12]
     c10:	3728      	adds	r7, #40	; 0x28
     c12:	46bd      	mov	sp, r7
     c14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00000c18 <bool std::chrono::operator<=<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator<=(const duration<_Rep1, _Period1>& __lhs,
     c18:	b580      	push	{r7, lr}
     c1a:	b082      	sub	sp, #8
     c1c:	af00      	add	r7, sp, #0
     c1e:	6078      	str	r0, [r7, #4]
     c20:	6039      	str	r1, [r7, #0]
      { return !(__rhs < __lhs); }
     c22:	6879      	ldr	r1, [r7, #4]
     c24:	6838      	ldr	r0, [r7, #0]
     c26:	f7ff fc8b 	bl	540 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
     c2a:	4603      	mov	r3, r0
     c2c:	f083 0301 	eor.w	r3, r3, #1
     c30:	b2db      	uxtb	r3, r3
     c32:	4618      	mov	r0, r3
     c34:	3708      	adds	r7, #8
     c36:	46bd      	mov	sp, r7
     c38:	bd80      	pop	{r7, pc}

00000c3a <std::function<bool ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
     c3a:	b580      	push	{r7, lr}
     c3c:	b082      	sub	sp, #8
     c3e:	af00      	add	r7, sp, #0
     c40:	6078      	str	r0, [r7, #4]
      if (_M_empty())
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	4618      	mov	r0, r3
     c46:	f7ff fc5c 	bl	502 <std::_Function_base::_M_empty() const>
     c4a:	4603      	mov	r3, r0
     c4c:	2b00      	cmp	r3, #0
     c4e:	d001      	beq.n	c54 <std::function<bool ()>::operator()() const+0x1a>
	__throw_bad_function_call();
     c50:	f005 fe37 	bl	68c2 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	68db      	ldr	r3, [r3, #12]
     c58:	687a      	ldr	r2, [r7, #4]
     c5a:	4610      	mov	r0, r2
     c5c:	4798      	blx	r3
     c5e:	4603      	mov	r3, r0
    }
     c60:	4618      	mov	r0, r3
     c62:	3708      	adds	r7, #8
     c64:	46bd      	mov	sp, r7
     c66:	bd80      	pop	{r7, pc}

00000c68 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})>:
      function<_Res(_ArgTypes...)>::
     c68:	b590      	push	{r4, r7, lr}
     c6a:	b083      	sub	sp, #12
     c6c:	af00      	add	r7, sp, #0
     c6e:	6078      	str	r0, [r7, #4]
     c70:	7039      	strb	r1, [r7, #0]
      : _Function_base()
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	4618      	mov	r0, r3
     c76:	f7ff fc23 	bl	4c0 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
     c7a:	463b      	mov	r3, r7
     c7c:	4618      	mov	r0, r3
     c7e:	f000 f908 	bl	e92 <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>
     c82:	4603      	mov	r3, r0
     c84:	2b00      	cmp	r3, #0
     c86:	d00f      	beq.n	ca8 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
     c88:	687c      	ldr	r4, [r7, #4]
     c8a:	463b      	mov	r3, r7
     c8c:	4618      	mov	r0, r3
     c8e:	f000 f90b 	bl	ea8 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
     c92:	4603      	mov	r3, r0
     c94:	4619      	mov	r1, r3
     c96:	4620      	mov	r0, r4
     c98:	f000 f911 	bl	ebe <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>
	    _M_invoker = &_My_handler::_M_invoke;
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	4a05      	ldr	r2, [pc, #20]	; (cb4 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x4c>)
     ca0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
     ca2:	687b      	ldr	r3, [r7, #4]
     ca4:	4a04      	ldr	r2, [pc, #16]	; (cb8 <std::function<bool ()>::function<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}, void, void>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1})+0x50>)
     ca6:	609a      	str	r2, [r3, #8]
      }
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	4618      	mov	r0, r3
     cac:	370c      	adds	r7, #12
     cae:	46bd      	mov	sp, r7
     cb0:	bd90      	pop	{r4, r7, pc}
     cb2:	bf00      	nop
     cb4:	00000ee3 	.word	0x00000ee3
     cb8:	00000f03 	.word	0x00000f03

00000cbc <sjsu::LogInfo<>::LogInfo(char const*, std::experimental::fundamentals_v2::source_location const&)>:
  ///
  /// @param format - format string to be used for logging
  /// @param params - variadic list of parameters to be passed to the log object
  /// @param location - the location in the source code where this object was
  ///        constructed.
  LogInfo(const char * format,
     cbc:	b580      	push	{r7, lr}
     cbe:	b086      	sub	sp, #24
     cc0:	af00      	add	r7, sp, #0
     cc2:	60f8      	str	r0, [r7, #12]
     cc4:	60b9      	str	r1, [r7, #8]
     cc6:	607a      	str	r2, [r7, #4]
    // Required as GCC8 has parsing issues with the C++17 [[maybe_unused]]
    // attribute for constructor's first argument
    _SJ2_USED(format);
    if constexpr (config::kLogLevel <= SJ2_LOG_LEVEL_INFO)
    {
      Log<Params...>(SJ2_BACKGROUND_GREEN "    INFO", format, params...,
     cc8:	f107 0014 	add.w	r0, r7, #20
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	68ba      	ldr	r2, [r7, #8]
     cd0:	4903      	ldr	r1, [pc, #12]	; (ce0 <sjsu::LogInfo<>::LogInfo(char const*, std::experimental::fundamentals_v2::source_location const&)+0x24>)
     cd2:	f000 f971 	bl	fb8 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)>
                     location);
    }
  }
     cd6:	68fb      	ldr	r3, [r7, #12]
     cd8:	4618      	mov	r0, r3
     cda:	3718      	adds	r7, #24
     cdc:	46bd      	mov	sp, r7
     cde:	bd80      	pop	{r7, pc}
     ce0:	000070e0 	.word	0x000070e0

00000ce4 <sjsu::LogInfo<unsigned char>::LogInfo(char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)>:
  LogInfo(const char * format,
     ce4:	b580      	push	{r7, lr}
     ce6:	b088      	sub	sp, #32
     ce8:	af02      	add	r7, sp, #8
     cea:	60f8      	str	r0, [r7, #12]
     cec:	60b9      	str	r1, [r7, #8]
     cee:	603b      	str	r3, [r7, #0]
     cf0:	4613      	mov	r3, r2
     cf2:	71fb      	strb	r3, [r7, #7]
      Log<Params...>(SJ2_BACKGROUND_GREEN "    INFO", format, params...,
     cf4:	79fa      	ldrb	r2, [r7, #7]
     cf6:	f107 0014 	add.w	r0, r7, #20
     cfa:	683b      	ldr	r3, [r7, #0]
     cfc:	9300      	str	r3, [sp, #0]
     cfe:	4613      	mov	r3, r2
     d00:	68ba      	ldr	r2, [r7, #8]
     d02:	4904      	ldr	r1, [pc, #16]	; (d14 <sjsu::LogInfo<unsigned char>::LogInfo(char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x30>)
     d04:	f000 fa46 	bl	1194 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)>
  }
     d08:	68fb      	ldr	r3, [r7, #12]
     d0a:	4618      	mov	r0, r3
     d0c:	3718      	adds	r7, #24
     d0e:	46bd      	mov	sp, r7
     d10:	bd80      	pop	{r7, pc}
     d12:	bf00      	nop
     d14:	000070e0 	.word	0x000070e0

00000d18 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)53, (char)48, (char)48>()>:
      operator""ms()
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	4618      	mov	r0, r3
     d24:	f000 fb26 	bl	1374 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>
     d28:	bf00      	nop
     d2a:	6878      	ldr	r0, [r7, #4]
     d2c:	3708      	adds	r7, #8
     d2e:	46bd      	mov	sp, r7
     d30:	bd80      	pop	{r7, pc}

00000d32 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     d32:	b580      	push	{r7, lr}
     d34:	b084      	sub	sp, #16
     d36:	af00      	add	r7, sp, #0
     d38:	6078      	str	r0, [r7, #4]
     d3a:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     d3c:	f107 0308 	add.w	r3, r7, #8
     d40:	6839      	ldr	r1, [r7, #0]
     d42:	4618      	mov	r0, r3
     d44:	f000 fb2a 	bl	139c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
     d48:	f107 0308 	add.w	r3, r7, #8
     d4c:	4618      	mov	r0, r3
     d4e:	f7ff fbe9 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
     d52:	4602      	mov	r2, r0
     d54:	460b      	mov	r3, r1
     d56:	6879      	ldr	r1, [r7, #4]
     d58:	e9c1 2300 	strd	r2, r3, [r1]
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	4618      	mov	r0, r3
     d60:	3710      	adds	r7, #16
     d62:	46bd      	mov	sp, r7
     d64:	bd80      	pop	{r7, pc}

00000d66 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
     d66:	b580      	push	{r7, lr}
     d68:	b084      	sub	sp, #16
     d6a:	af00      	add	r7, sp, #0
     d6c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
     d6e:	f04f 0201 	mov.w	r2, #1
     d72:	f04f 0300 	mov.w	r3, #0
     d76:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
     d7a:	f107 0308 	add.w	r3, r7, #8
     d7e:	4619      	mov	r1, r3
     d80:	6878      	ldr	r0, [r7, #4]
     d82:	f000 fb2e 	bl	13e2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
     d86:	6878      	ldr	r0, [r7, #4]
     d88:	3710      	adds	r7, #16
     d8a:	46bd      	mov	sp, r7
     d8c:	bd80      	pop	{r7, pc}

00000d8e <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     d8e:	b580      	push	{r7, lr}
     d90:	b082      	sub	sp, #8
     d92:	af00      	add	r7, sp, #0
     d94:	6078      	str	r0, [r7, #4]
     d96:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	6839      	ldr	r1, [r7, #0]
     d9c:	4618      	mov	r0, r3
     d9e:	f000 fb40 	bl	1422 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     da2:	bf00      	nop
      }
     da4:	6878      	ldr	r0, [r7, #4]
     da6:	3708      	adds	r7, #8
     da8:	46bd      	mov	sp, r7
     daa:	bd80      	pop	{r7, pc}

00000dac <bool std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_not_empty_function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>:
	  _M_not_empty_function(_Tp* __fp)
     dac:	b480      	push	{r7}
     dae:	b083      	sub	sp, #12
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	2b00      	cmp	r3, #0
     db8:	bf14      	ite	ne
     dba:	2301      	movne	r3, #1
     dbc:	2300      	moveq	r3, #0
     dbe:	b2db      	uxtb	r3, r3
     dc0:	4618      	mov	r0, r3
     dc2:	370c      	adds	r7, #12
     dc4:	46bd      	mov	sp, r7
     dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     dca:	4770      	bx	lr

00000dcc <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
     dcc:	b480      	push	{r7}
     dce:	b083      	sub	sp, #12
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     dd4:	687b      	ldr	r3, [r7, #4]
     dd6:	4618      	mov	r0, r3
     dd8:	370c      	adds	r7, #12
     dda:	46bd      	mov	sp, r7
     ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
     de0:	4770      	bx	lr

00000de2 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
     de2:	b590      	push	{r4, r7, lr}
     de4:	b085      	sub	sp, #20
     de6:	af00      	add	r7, sp, #0
     de8:	6078      	str	r0, [r7, #4]
     dea:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
     dec:	6838      	ldr	r0, [r7, #0]
     dee:	f7ff ffed 	bl	dcc <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
     df2:	4603      	mov	r3, r0
     df4:	4622      	mov	r2, r4
     df6:	4619      	mov	r1, r3
     df8:	6878      	ldr	r0, [r7, #4]
     dfa:	f000 fb4c 	bl	1496 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>
     dfe:	bf00      	nop
     e00:	3714      	adds	r7, #20
     e02:	46bd      	mov	sp, r7
     e04:	bd90      	pop	{r4, r7, pc}

00000e06 <std::_Function_handler<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
     e06:	b580      	push	{r7, lr}
     e08:	b082      	sub	sp, #8
     e0a:	af00      	add	r7, sp, #0
     e0c:	6078      	str	r0, [r7, #4]
     e0e:	6039      	str	r1, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
     e10:	6838      	ldr	r0, [r7, #0]
     e12:	f000 fb59 	bl	14c8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
     e16:	4603      	mov	r3, r0
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	687a      	ldr	r2, [r7, #4]
     e1c:	4610      	mov	r0, r2
     e1e:	4798      	blx	r3
	    std::forward<_ArgTypes>(__args)...);
     e20:	bf00      	nop
      }
     e22:	6878      	ldr	r0, [r7, #4]
     e24:	3708      	adds	r7, #8
     e26:	46bd      	mov	sp, r7
     e28:	bd80      	pop	{r7, pc}

00000e2a <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
     e2a:	b5b0      	push	{r4, r5, r7, lr}
     e2c:	b086      	sub	sp, #24
     e2e:	af00      	add	r7, sp, #0
     e30:	60f8      	str	r0, [r7, #12]
     e32:	60b9      	str	r1, [r7, #8]
     e34:	4613      	mov	r3, r2
     e36:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
     e38:	79fb      	ldrb	r3, [r7, #7]
     e3a:	2b03      	cmp	r3, #3
     e3c:	d016      	beq.n	e6c <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
     e3e:	2b03      	cmp	r3, #3
     e40:	dc19      	bgt.n	e76 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
     e42:	2b01      	cmp	r3, #1
     e44:	d002      	beq.n	e4c <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
     e46:	2b02      	cmp	r3, #2
     e48:	d00a      	beq.n	e60 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
     e4a:	e014      	b.n	e76 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
     e4c:	68b8      	ldr	r0, [r7, #8]
     e4e:	f000 fb3b 	bl	14c8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>
     e52:	4604      	mov	r4, r0
     e54:	68f8      	ldr	r0, [r7, #12]
     e56:	f000 fb47 	bl	14e8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>
     e5a:	4603      	mov	r3, r0
     e5c:	601c      	str	r4, [r3, #0]
	      break;
     e5e:	e00a      	b.n	e76 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
     e60:	462a      	mov	r2, r5
     e62:	68b9      	ldr	r1, [r7, #8]
     e64:	68f8      	ldr	r0, [r7, #12]
     e66:	f000 fb4b 	bl	1500 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
     e6a:	e004      	b.n	e76 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
     e6c:	4621      	mov	r1, r4
     e6e:	68f8      	ldr	r0, [r7, #12]
     e70:	f000 fb5f 	bl	1532 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
     e74:	bf00      	nop
	  return false;
     e76:	2300      	movs	r3, #0
	}
     e78:	4618      	mov	r0, r3
     e7a:	3718      	adds	r7, #24
     e7c:	46bd      	mov	sp, r7
     e7e:	bdb0      	pop	{r4, r5, r7, pc}

00000e80 <std::chrono::duration_values<long long>::max()>:
	max() noexcept
     e80:	b580      	push	{r7, lr}
     e82:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
     e84:	f7ff fae3 	bl	44e <std::numeric_limits<long long>::max()>
     e88:	4602      	mov	r2, r0
     e8a:	460b      	mov	r3, r1
     e8c:	4610      	mov	r0, r2
     e8e:	4619      	mov	r1, r3
     e90:	bd80      	pop	{r7, pc}

00000e92 <bool std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_not_empty_function<{lambda()#1}>({lambda()#1} const&)>:
	  _M_not_empty_function(const _Tp&)
     e92:	b480      	push	{r7}
     e94:	b083      	sub	sp, #12
     e96:	af00      	add	r7, sp, #0
     e98:	6078      	str	r0, [r7, #4]
	  { return true; }
     e9a:	2301      	movs	r3, #1
     e9c:	4618      	mov	r0, r3
     e9e:	370c      	adds	r7, #12
     ea0:	46bd      	mov	sp, r7
     ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
     ea6:	4770      	bx	lr

00000ea8 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>:
    move(_Tp&& __t) noexcept
     ea8:	b480      	push	{r7}
     eaa:	b083      	sub	sp, #12
     eac:	af00      	add	r7, sp, #0
     eae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
     eb0:	687b      	ldr	r3, [r7, #4]
     eb2:	4618      	mov	r0, r3
     eb4:	370c      	adds	r7, #12
     eb6:	46bd      	mov	sp, r7
     eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
     ebc:	4770      	bx	lr

00000ebe <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
     ebe:	b590      	push	{r4, r7, lr}
     ec0:	b085      	sub	sp, #20
     ec2:	af00      	add	r7, sp, #0
     ec4:	6078      	str	r0, [r7, #4]
     ec6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
     ec8:	6838      	ldr	r0, [r7, #0]
     eca:	f7ff ffed 	bl	ea8 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
     ece:	4603      	mov	r3, r0
     ed0:	4622      	mov	r2, r4
     ed2:	4619      	mov	r1, r3
     ed4:	6878      	ldr	r0, [r7, #4]
     ed6:	f000 fb38 	bl	154a <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>
     eda:	bf00      	nop
     edc:	3714      	adds	r7, #20
     ede:	46bd      	mov	sp, r7
     ee0:	bd90      	pop	{r4, r7, pc}

00000ee2 <std::_Function_handler<bool (), sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
     ee2:	b580      	push	{r7, lr}
     ee4:	b082      	sub	sp, #8
     ee6:	af00      	add	r7, sp, #0
     ee8:	6078      	str	r0, [r7, #4]
	return (*_Base::_M_get_pointer(__functor))(
     eea:	6878      	ldr	r0, [r7, #4]
     eec:	f000 fb42 	bl	1574 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
     ef0:	4603      	mov	r3, r0
     ef2:	4618      	mov	r0, r3
     ef4:	f7ff fd2a 	bl	94c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}::operator()() const>
     ef8:	4603      	mov	r3, r0
      }
     efa:	4618      	mov	r0, r3
     efc:	3708      	adds	r7, #8
     efe:	46bd      	mov	sp, r7
     f00:	bd80      	pop	{r7, pc}

00000f02 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
     f02:	b5b0      	push	{r4, r5, r7, lr}
     f04:	b086      	sub	sp, #24
     f06:	af00      	add	r7, sp, #0
     f08:	60f8      	str	r0, [r7, #12]
     f0a:	60b9      	str	r1, [r7, #8]
     f0c:	4613      	mov	r3, r2
     f0e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
     f10:	79fb      	ldrb	r3, [r7, #7]
     f12:	2b03      	cmp	r3, #3
     f14:	d016      	beq.n	f44 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x42>
     f16:	2b03      	cmp	r3, #3
     f18:	dc19      	bgt.n	f4e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
     f1a:	2b01      	cmp	r3, #1
     f1c:	d002      	beq.n	f24 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x22>
     f1e:	2b02      	cmp	r3, #2
     f20:	d00a      	beq.n	f38 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x36>
     f22:	e014      	b.n	f4e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
     f24:	68b8      	ldr	r0, [r7, #8]
     f26:	f000 fb25 	bl	1574 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>
     f2a:	4604      	mov	r4, r0
     f2c:	68f8      	ldr	r0, [r7, #12]
     f2e:	f000 fb31 	bl	1594 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>
     f32:	4603      	mov	r3, r0
     f34:	601c      	str	r4, [r3, #0]
	      break;
     f36:	e00a      	b.n	f4e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
     f38:	462a      	mov	r2, r5
     f3a:	68b9      	ldr	r1, [r7, #8]
     f3c:	68f8      	ldr	r0, [r7, #12]
     f3e:	f000 fb35 	bl	15ac <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>
	      break;
     f42:	e004      	b.n	f4e <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_manager(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
     f44:	4621      	mov	r1, r4
     f46:	68f8      	ldr	r0, [r7, #12]
     f48:	f000 fb45 	bl	15d6 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
     f4c:	bf00      	nop
	  return false;
     f4e:	2300      	movs	r3, #0
	}
     f50:	4618      	mov	r0, r3
     f52:	3718      	adds	r7, #24
     f54:	46bd      	mov	sp, r7
     f56:	bdb0      	pop	{r4, r5, r7, pc}

00000f58 <std::array<char, 256u>::data()>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
     f58:	b580      	push	{r7, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	af00      	add	r7, sp, #0
     f5e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	4618      	mov	r0, r3
     f64:	f000 f805 	bl	f72 <std::__array_traits<char, 256u>::_S_ptr(char const (&) [256])>
     f68:	4603      	mov	r3, r0
     f6a:	4618      	mov	r0, r3
     f6c:	3708      	adds	r7, #8
     f6e:	46bd      	mov	sp, r7
     f70:	bd80      	pop	{r7, pc}

00000f72 <std::__array_traits<char, 256u>::_S_ptr(char const (&) [256])>:
      _S_ptr(const _Type& __t) noexcept
     f72:	b480      	push	{r7}
     f74:	b083      	sub	sp, #12
     f76:	af00      	add	r7, sp, #0
     f78:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
     f7a:	687b      	ldr	r3, [r7, #4]
     f7c:	4618      	mov	r0, r3
     f7e:	370c      	adds	r7, #12
     f80:	46bd      	mov	sp, r7
     f82:	f85d 7b04 	ldr.w	r7, [sp], #4
     f86:	4770      	bx	lr

00000f88 <std::array<char, 256u>::size() const>:
      size() const noexcept { return _Nm; }
     f88:	b480      	push	{r7}
     f8a:	b083      	sub	sp, #12
     f8c:	af00      	add	r7, sp, #0
     f8e:	6078      	str	r0, [r7, #4]
     f90:	f44f 7380 	mov.w	r3, #256	; 0x100
     f94:	4618      	mov	r0, r3
     f96:	370c      	adds	r7, #12
     f98:	46bd      	mov	sp, r7
     f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f9e:	4770      	bx	lr

00000fa0 <std::basic_string_view<char, std::char_traits<char> >::size() const>:
      { return const_reverse_iterator(this->begin()); }

      // [string.view.capacity], capacity

      constexpr size_type
      size() const noexcept
     fa0:	b480      	push	{r7}
     fa2:	b083      	sub	sp, #12
     fa4:	af00      	add	r7, sp, #0
     fa6:	6078      	str	r0, [r7, #4]
      { return this->_M_len; }
     fa8:	687b      	ldr	r3, [r7, #4]
     faa:	681b      	ldr	r3, [r3, #0]
     fac:	4618      	mov	r0, r3
     fae:	370c      	adds	r7, #12
     fb0:	46bd      	mov	sp, r7
     fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
     fb6:	4770      	bx	lr

00000fb8 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)>:
  Log(const char * log_type,
     fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fbc:	b0ce      	sub	sp, #312	; 0x138
     fbe:	af04      	add	r7, sp, #16
     fc0:	f107 040c 	add.w	r4, r7, #12
     fc4:	6020      	str	r0, [r4, #0]
     fc6:	f107 0008 	add.w	r0, r7, #8
     fca:	6001      	str	r1, [r0, #0]
     fcc:	1d39      	adds	r1, r7, #4
     fce:	600a      	str	r2, [r1, #0]
     fd0:	463a      	mov	r2, r7
     fd2:	6013      	str	r3, [r2, #0]
        snprintf(buffer.data(), buffer.size(),
     fd4:	f107 0310 	add.w	r3, r7, #16
     fd8:	4618      	mov	r0, r3
     fda:	f7ff ffbd 	bl	f58 <std::array<char, 256u>::data()>
     fde:	4606      	mov	r6, r0
     fe0:	f107 0310 	add.w	r3, r7, #16
     fe4:	4618      	mov	r0, r3
     fe6:	f7ff ffcf 	bl	f88 <std::array<char, 256u>::size() const>
     fea:	4680      	mov	r8, r0
     fec:	463b      	mov	r3, r7
     fee:	6818      	ldr	r0, [r3, #0]
     ff0:	f7ff fa00 	bl	3f4 <std::experimental::fundamentals_v2::source_location::file_name() const>
     ff4:	4603      	mov	r3, r0
     ff6:	4618      	mov	r0, r3
     ff8:	f7ff fb1a 	bl	630 <sjsu::FileBasename(char const*)>
     ffc:	4604      	mov	r4, r0
     ffe:	463b      	mov	r3, r7
    1000:	6818      	ldr	r0, [r3, #0]
    1002:	f7ff fa03 	bl	40c <std::experimental::fundamentals_v2::source_location::function_name() const>
    1006:	4605      	mov	r5, r0
    1008:	463b      	mov	r3, r7
    100a:	6818      	ldr	r0, [r3, #0]
    100c:	f7ff f9e6 	bl	3dc <std::experimental::fundamentals_v2::source_location::line() const>
    1010:	4602      	mov	r2, r0
    1012:	f107 0308 	add.w	r3, r7, #8
    1016:	9202      	str	r2, [sp, #8]
    1018:	9501      	str	r5, [sp, #4]
    101a:	9400      	str	r4, [sp, #0]
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	4a59      	ldr	r2, [pc, #356]	; (1184 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1cc>)
    1020:	4641      	mov	r1, r8
    1022:	4630      	mov	r0, r6
    1024:	f002 f9f2 	bl	340c <snprintf>
    1028:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    int bytes_left = 0;
    102c:	2300      	movs	r3, #0
    102e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    bytes_left = std::max(static_cast<int>(buffer.size()) - position, 0);
    1032:	f107 0310 	add.w	r3, r7, #16
    1036:	4618      	mov	r0, r3
    1038:	f7ff ffa6 	bl	f88 <std::array<char, 256u>::size() const>
    103c:	4603      	mov	r3, r0
    103e:	461a      	mov	r2, r3
    1040:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    1044:	1ad3      	subs	r3, r2, r3
    1046:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    104a:	2300      	movs	r3, #0
    104c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    1050:	f507 728a 	add.w	r2, r7, #276	; 0x114
    1054:	f507 7388 	add.w	r3, r7, #272	; 0x110
    1058:	4611      	mov	r1, r2
    105a:	4618      	mov	r0, r3
    105c:	f000 f9ad 	bl	13ba <int const& std::max<int>(int const&, int const&)>
    1060:	4603      	mov	r3, r0
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    position += snprintf(&buffer[position], bytes_left, format, params...);
    1068:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    106c:	f107 0310 	add.w	r3, r7, #16
    1070:	4611      	mov	r1, r2
    1072:	4618      	mov	r0, r3
    1074:	f000 fabb 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    1078:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
    107c:	1d3b      	adds	r3, r7, #4
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	f002 f9c4 	bl	340c <snprintf>
    1084:	4602      	mov	r2, r0
    1086:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    108a:	4413      	add	r3, r2
    108c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    bytes_left = std::max(static_cast<int>(buffer.size()) - position, 0);
    1090:	f107 0310 	add.w	r3, r7, #16
    1094:	4618      	mov	r0, r3
    1096:	f7ff ff77 	bl	f88 <std::array<char, 256u>::size() const>
    109a:	4603      	mov	r3, r0
    109c:	461a      	mov	r2, r3
    109e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    10a2:	1ad3      	subs	r3, r2, r3
    10a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    10a8:	2300      	movs	r3, #0
    10aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    10ae:	f507 728e 	add.w	r2, r7, #284	; 0x11c
    10b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
    10b6:	4611      	mov	r1, r2
    10b8:	4618      	mov	r0, r3
    10ba:	f000 f97e 	bl	13ba <int const& std::max<int>(int const&, int const&)>
    10be:	4603      	mov	r3, r0
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    position += snprintf(&buffer[position], bytes_left, "\n" SJ2_COLOR_RESET);
    10c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    10ca:	f107 0310 	add.w	r3, r7, #16
    10ce:	4611      	mov	r1, r2
    10d0:	4618      	mov	r0, r3
    10d2:	f000 fa8c 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    10d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    10da:	4a2b      	ldr	r2, [pc, #172]	; (1188 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1d0>)
    10dc:	4619      	mov	r1, r3
    10de:	f002 f995 	bl	340c <snprintf>
    10e2:	4602      	mov	r2, r0
    10e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    10e8:	4413      	add	r3, r2
    10ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    if (static_cast<size_t>(position) >= buffer.size() - 1)
    10ee:	f107 0310 	add.w	r3, r7, #16
    10f2:	4618      	mov	r0, r3
    10f4:	f7ff ff48 	bl	f88 <std::array<char, 256u>::size() const>
    10f8:	4603      	mov	r3, r0
    10fa:	1e5a      	subs	r2, r3, #1
    10fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    1100:	429a      	cmp	r2, r3
    1102:	bf94      	ite	ls
    1104:	2301      	movls	r3, #1
    1106:	2300      	movhi	r3, #0
    1108:	b2db      	uxtb	r3, r3
    110a:	2b00      	cmp	r3, #0
    110c:	d023      	beq.n	1156 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x19e>
      position = buffer.size() - (kEllipsisEnding.size() + 1);
    110e:	f107 0310 	add.w	r3, r7, #16
    1112:	4618      	mov	r0, r3
    1114:	f7ff ff38 	bl	f88 <std::array<char, 256u>::size() const>
    1118:	4604      	mov	r4, r0
    111a:	481c      	ldr	r0, [pc, #112]	; (118c <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1d4>)
    111c:	f7ff ff40 	bl	fa0 <std::basic_string_view<char, std::char_traits<char> >::size() const>
    1120:	4603      	mov	r3, r0
    1122:	1ae3      	subs	r3, r4, r3
    1124:	3b01      	subs	r3, #1
    1126:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      std::copy(kEllipsisEnding.begin(), kEllipsisEnding.end(),
    112a:	4818      	ldr	r0, [pc, #96]	; (118c <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1d4>)
    112c:	f000 fa6e 	bl	160c <std::basic_string_view<char, std::char_traits<char> >::begin() const>
    1130:	4604      	mov	r4, r0
    1132:	4816      	ldr	r0, [pc, #88]	; (118c <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1d4>)
    1134:	f000 fa76 	bl	1624 <std::basic_string_view<char, std::char_traits<char> >::end() const>
    1138:	4605      	mov	r5, r0
                &buffer[position]);
    113a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    113e:	f107 0310 	add.w	r3, r7, #16
    1142:	4611      	mov	r1, r2
    1144:	4618      	mov	r0, r3
    1146:	f000 fa52 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    114a:	4603      	mov	r3, r0
      std::copy(kEllipsisEnding.begin(), kEllipsisEnding.end(),
    114c:	461a      	mov	r2, r3
    114e:	4629      	mov	r1, r5
    1150:	4620      	mov	r0, r4
    1152:	f000 fa76 	bl	1642 <char* std::copy<char const*, char*>(char const*, char const*, char*)>
    fputs(buffer.data(), stdout);
    1156:	f107 0310 	add.w	r3, r7, #16
    115a:	4618      	mov	r0, r3
    115c:	f7ff fefc 	bl	f58 <std::array<char, 256u>::data()>
    1160:	4602      	mov	r2, r0
    1162:	4b0b      	ldr	r3, [pc, #44]	; (1190 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)+0x1d8>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	689b      	ldr	r3, [r3, #8]
    1168:	4619      	mov	r1, r3
    116a:	4610      	mov	r0, r2
    116c:	f001 f938 	bl	23e0 <fputs>
  }
    1170:	f107 030c 	add.w	r3, r7, #12
    1174:	681b      	ldr	r3, [r3, #0]
    1176:	4618      	mov	r0, r3
    1178:	f507 7794 	add.w	r7, r7, #296	; 0x128
    117c:	46bd      	mov	sp, r7
    117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1182:	bf00      	nop
    1184:	000070fc 	.word	0x000070fc
    1188:	0000712c 	.word	0x0000712c
    118c:	0000714c 	.word	0x0000714c
    1190:	100000bc 	.word	0x100000bc

00001194 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)>:
  Log(const char * log_type,
    1194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1198:	b0ce      	sub	sp, #312	; 0x138
    119a:	af04      	add	r7, sp, #16
    119c:	f107 040c 	add.w	r4, r7, #12
    11a0:	6020      	str	r0, [r4, #0]
    11a2:	f107 0008 	add.w	r0, r7, #8
    11a6:	6001      	str	r1, [r0, #0]
    11a8:	1d39      	adds	r1, r7, #4
    11aa:	600a      	str	r2, [r1, #0]
    11ac:	461a      	mov	r2, r3
    11ae:	1cfb      	adds	r3, r7, #3
    11b0:	701a      	strb	r2, [r3, #0]
        snprintf(buffer.data(), buffer.size(),
    11b2:	f107 0310 	add.w	r3, r7, #16
    11b6:	4618      	mov	r0, r3
    11b8:	f7ff fece 	bl	f58 <std::array<char, 256u>::data()>
    11bc:	4606      	mov	r6, r0
    11be:	f107 0310 	add.w	r3, r7, #16
    11c2:	4618      	mov	r0, r3
    11c4:	f7ff fee0 	bl	f88 <std::array<char, 256u>::size() const>
    11c8:	4680      	mov	r8, r0
    11ca:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
    11ce:	f7ff f911 	bl	3f4 <std::experimental::fundamentals_v2::source_location::file_name() const>
    11d2:	4603      	mov	r3, r0
    11d4:	4618      	mov	r0, r3
    11d6:	f7ff fa2b 	bl	630 <sjsu::FileBasename(char const*)>
    11da:	4604      	mov	r4, r0
    11dc:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
    11e0:	f7ff f914 	bl	40c <std::experimental::fundamentals_v2::source_location::function_name() const>
    11e4:	4605      	mov	r5, r0
    11e6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
    11ea:	f7ff f8f7 	bl	3dc <std::experimental::fundamentals_v2::source_location::line() const>
    11ee:	4602      	mov	r2, r0
    11f0:	f107 0308 	add.w	r3, r7, #8
    11f4:	9202      	str	r2, [sp, #8]
    11f6:	9501      	str	r5, [sp, #4]
    11f8:	9400      	str	r4, [sp, #0]
    11fa:	681b      	ldr	r3, [r3, #0]
    11fc:	4a59      	ldr	r2, [pc, #356]	; (1364 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1d0>)
    11fe:	4641      	mov	r1, r8
    1200:	4630      	mov	r0, r6
    1202:	f002 f903 	bl	340c <snprintf>
    1206:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    int bytes_left = 0;
    120a:	2300      	movs	r3, #0
    120c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    bytes_left = std::max(static_cast<int>(buffer.size()) - position, 0);
    1210:	f107 0310 	add.w	r3, r7, #16
    1214:	4618      	mov	r0, r3
    1216:	f7ff feb7 	bl	f88 <std::array<char, 256u>::size() const>
    121a:	4603      	mov	r3, r0
    121c:	461a      	mov	r2, r3
    121e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    1222:	1ad3      	subs	r3, r2, r3
    1224:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    1228:	2300      	movs	r3, #0
    122a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    122e:	f507 728a 	add.w	r2, r7, #276	; 0x114
    1232:	f507 7388 	add.w	r3, r7, #272	; 0x110
    1236:	4611      	mov	r1, r2
    1238:	4618      	mov	r0, r3
    123a:	f000 f8be 	bl	13ba <int const& std::max<int>(int const&, int const&)>
    123e:	4603      	mov	r3, r0
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    position += snprintf(&buffer[position], bytes_left, format, params...);
    1246:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    124a:	f107 0310 	add.w	r3, r7, #16
    124e:	4611      	mov	r1, r2
    1250:	4618      	mov	r0, r3
    1252:	f000 f9cc 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    1256:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
    125a:	1cfb      	adds	r3, r7, #3
    125c:	781b      	ldrb	r3, [r3, #0]
    125e:	1d3a      	adds	r2, r7, #4
    1260:	6812      	ldr	r2, [r2, #0]
    1262:	f002 f8d3 	bl	340c <snprintf>
    1266:	4602      	mov	r2, r0
    1268:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    126c:	4413      	add	r3, r2
    126e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    bytes_left = std::max(static_cast<int>(buffer.size()) - position, 0);
    1272:	f107 0310 	add.w	r3, r7, #16
    1276:	4618      	mov	r0, r3
    1278:	f7ff fe86 	bl	f88 <std::array<char, 256u>::size() const>
    127c:	4603      	mov	r3, r0
    127e:	461a      	mov	r2, r3
    1280:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    1284:	1ad3      	subs	r3, r2, r3
    1286:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    128a:	2300      	movs	r3, #0
    128c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    1290:	f507 728e 	add.w	r2, r7, #284	; 0x11c
    1294:	f507 738c 	add.w	r3, r7, #280	; 0x118
    1298:	4611      	mov	r1, r2
    129a:	4618      	mov	r0, r3
    129c:	f000 f88d 	bl	13ba <int const& std::max<int>(int const&, int const&)>
    12a0:	4603      	mov	r3, r0
    12a2:	681b      	ldr	r3, [r3, #0]
    12a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    position += snprintf(&buffer[position], bytes_left, "\n" SJ2_COLOR_RESET);
    12a8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    12ac:	f107 0310 	add.w	r3, r7, #16
    12b0:	4611      	mov	r1, r2
    12b2:	4618      	mov	r0, r3
    12b4:	f000 f99b 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    12b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    12bc:	4a2a      	ldr	r2, [pc, #168]	; (1368 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1d4>)
    12be:	4619      	mov	r1, r3
    12c0:	f002 f8a4 	bl	340c <snprintf>
    12c4:	4602      	mov	r2, r0
    12c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    12ca:	4413      	add	r3, r2
    12cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    if (static_cast<size_t>(position) >= buffer.size() - 1)
    12d0:	f107 0310 	add.w	r3, r7, #16
    12d4:	4618      	mov	r0, r3
    12d6:	f7ff fe57 	bl	f88 <std::array<char, 256u>::size() const>
    12da:	4603      	mov	r3, r0
    12dc:	1e5a      	subs	r2, r3, #1
    12de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
    12e2:	429a      	cmp	r2, r3
    12e4:	bf94      	ite	ls
    12e6:	2301      	movls	r3, #1
    12e8:	2300      	movhi	r3, #0
    12ea:	b2db      	uxtb	r3, r3
    12ec:	2b00      	cmp	r3, #0
    12ee:	d023      	beq.n	1338 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1a4>
      position = buffer.size() - (kEllipsisEnding.size() + 1);
    12f0:	f107 0310 	add.w	r3, r7, #16
    12f4:	4618      	mov	r0, r3
    12f6:	f7ff fe47 	bl	f88 <std::array<char, 256u>::size() const>
    12fa:	4604      	mov	r4, r0
    12fc:	481b      	ldr	r0, [pc, #108]	; (136c <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1d8>)
    12fe:	f7ff fe4f 	bl	fa0 <std::basic_string_view<char, std::char_traits<char> >::size() const>
    1302:	4603      	mov	r3, r0
    1304:	1ae3      	subs	r3, r4, r3
    1306:	3b01      	subs	r3, #1
    1308:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
      std::copy(kEllipsisEnding.begin(), kEllipsisEnding.end(),
    130c:	4817      	ldr	r0, [pc, #92]	; (136c <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1d8>)
    130e:	f000 f97d 	bl	160c <std::basic_string_view<char, std::char_traits<char> >::begin() const>
    1312:	4604      	mov	r4, r0
    1314:	4815      	ldr	r0, [pc, #84]	; (136c <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1d8>)
    1316:	f000 f985 	bl	1624 <std::basic_string_view<char, std::char_traits<char> >::end() const>
    131a:	4605      	mov	r5, r0
                &buffer[position]);
    131c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
    1320:	f107 0310 	add.w	r3, r7, #16
    1324:	4611      	mov	r1, r2
    1326:	4618      	mov	r0, r3
    1328:	f000 f961 	bl	15ee <std::array<char, 256u>::operator[](unsigned int)>
    132c:	4603      	mov	r3, r0
      std::copy(kEllipsisEnding.begin(), kEllipsisEnding.end(),
    132e:	461a      	mov	r2, r3
    1330:	4629      	mov	r1, r5
    1332:	4620      	mov	r0, r4
    1334:	f000 f985 	bl	1642 <char* std::copy<char const*, char*>(char const*, char const*, char*)>
    fputs(buffer.data(), stdout);
    1338:	f107 0310 	add.w	r3, r7, #16
    133c:	4618      	mov	r0, r3
    133e:	f7ff fe0b 	bl	f58 <std::array<char, 256u>::data()>
    1342:	4602      	mov	r2, r0
    1344:	4b0a      	ldr	r3, [pc, #40]	; (1370 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)+0x1dc>)
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	689b      	ldr	r3, [r3, #8]
    134a:	4619      	mov	r1, r3
    134c:	4610      	mov	r0, r2
    134e:	f001 f847 	bl	23e0 <fputs>
  }
    1352:	f107 030c 	add.w	r3, r7, #12
    1356:	681b      	ldr	r3, [r3, #0]
    1358:	4618      	mov	r0, r3
    135a:	f507 7794 	add.w	r7, r7, #296	; 0x128
    135e:	46bd      	mov	sp, r7
    1360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1364:	000070fc 	.word	0x000070fc
    1368:	0000712c 	.word	0x0000712c
    136c:	00007154 	.word	0x00007154
    1370:	100000bc 	.word	0x100000bc

00001374 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)53, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    1374:	b580      	push	{r7, lr}
    1376:	b084      	sub	sp, #16
    1378:	af00      	add	r7, sp, #0
    137a:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    137c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1380:	f04f 0300 	mov.w	r3, #0
    1384:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    1388:	f107 0308 	add.w	r3, r7, #8
    138c:	4619      	mov	r1, r3
    138e:	6878      	ldr	r0, [r7, #4]
    1390:	f000 f96f 	bl	1672 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    1394:	6878      	ldr	r0, [r7, #4]
    1396:	3710      	adds	r7, #16
    1398:	46bd      	mov	sp, r7
    139a:	bd80      	pop	{r7, pc}

0000139c <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
    13a2:	6078      	str	r0, [r7, #4]
    13a4:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	6839      	ldr	r1, [r7, #0]
    13aa:	4618      	mov	r0, r3
    13ac:	f000 f981 	bl	16b2 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    13b0:	bf00      	nop
      }
    13b2:	6878      	ldr	r0, [r7, #4]
    13b4:	3708      	adds	r7, #8
    13b6:	46bd      	mov	sp, r7
    13b8:	bd80      	pop	{r7, pc}

000013ba <int const& std::max<int>(int const&, int const&)>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    13ba:	b480      	push	{r7}
    13bc:	b083      	sub	sp, #12
    13be:	af00      	add	r7, sp, #0
    13c0:	6078      	str	r0, [r7, #4]
    13c2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    13c4:	687b      	ldr	r3, [r7, #4]
    13c6:	681a      	ldr	r2, [r3, #0]
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	429a      	cmp	r2, r3
    13ce:	da01      	bge.n	13d4 <int const& std::max<int>(int const&, int const&)+0x1a>
	return __b;
    13d0:	683b      	ldr	r3, [r7, #0]
    13d2:	e000      	b.n	13d6 <int const& std::max<int>(int const&, int const&)+0x1c>
      return __a;
    13d4:	687b      	ldr	r3, [r7, #4]
    }
    13d6:	4618      	mov	r0, r3
    13d8:	370c      	adds	r7, #12
    13da:	46bd      	mov	sp, r7
    13dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    13e0:	4770      	bx	lr

000013e2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    13e2:	b480      	push	{r7}
    13e4:	b083      	sub	sp, #12
    13e6:	af00      	add	r7, sp, #0
    13e8:	6078      	str	r0, [r7, #4]
    13ea:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    13ec:	683b      	ldr	r3, [r7, #0]
    13ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    13f2:	6879      	ldr	r1, [r7, #4]
    13f4:	e9c1 2300 	strd	r2, r3, [r1]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	4618      	mov	r0, r3
    13fc:	370c      	adds	r7, #12
    13fe:	46bd      	mov	sp, r7
    1400:	f85d 7b04 	ldr.w	r7, [sp], #4
    1404:	4770      	bx	lr

00001406 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    1406:	b480      	push	{r7}
    1408:	b083      	sub	sp, #12
    140a:	af00      	add	r7, sp, #0
    140c:	6078      	str	r0, [r7, #4]
	{ return __r; }
    140e:	687b      	ldr	r3, [r7, #4]
    1410:	e9d3 2300 	ldrd	r2, r3, [r3]
    1414:	4610      	mov	r0, r2
    1416:	4619      	mov	r1, r3
    1418:	370c      	adds	r7, #12
    141a:	46bd      	mov	sp, r7
    141c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1420:	4770      	bx	lr

00001422 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    1422:	b5b0      	push	{r4, r5, r7, lr}
    1424:	b084      	sub	sp, #16
    1426:	af00      	add	r7, sp, #0
    1428:	6078      	str	r0, [r7, #4]
    142a:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    142c:	6838      	ldr	r0, [r7, #0]
    142e:	f7ff ffea 	bl	1406 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1432:	4602      	mov	r2, r0
    1434:	460b      	mov	r3, r1
    1436:	f04f 0400 	mov.w	r4, #0
    143a:	f04f 0500 	mov.w	r5, #0
    143e:	015d      	lsls	r5, r3, #5
    1440:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    1444:	0154      	lsls	r4, r2, #5
    1446:	4622      	mov	r2, r4
    1448:	462b      	mov	r3, r5
    144a:	1a12      	subs	r2, r2, r0
    144c:	eb63 0301 	sbc.w	r3, r3, r1
    1450:	f04f 0400 	mov.w	r4, #0
    1454:	f04f 0500 	mov.w	r5, #0
    1458:	009d      	lsls	r5, r3, #2
    145a:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
    145e:	0094      	lsls	r4, r2, #2
    1460:	4622      	mov	r2, r4
    1462:	462b      	mov	r3, r5
    1464:	1812      	adds	r2, r2, r0
    1466:	eb41 0303 	adc.w	r3, r1, r3
    146a:	f04f 0000 	mov.w	r0, #0
    146e:	f04f 0100 	mov.w	r1, #0
    1472:	00d9      	lsls	r1, r3, #3
    1474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
    1478:	00d0      	lsls	r0, r2, #3
    147a:	4602      	mov	r2, r0
    147c:	460b      	mov	r3, r1
    147e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    1482:	f107 0308 	add.w	r3, r7, #8
    1486:	4619      	mov	r1, r3
    1488:	6878      	ldr	r0, [r7, #4]
    148a:	f7ff f881 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    148e:	6878      	ldr	r0, [r7, #4]
    1490:	3710      	adds	r7, #16
    1492:	46bd      	mov	sp, r7
    1494:	bdb0      	pop	{r4, r5, r7, pc}

00001496 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_init_functor(std::_Any_data&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    1496:	b590      	push	{r4, r7, lr}
    1498:	b085      	sub	sp, #20
    149a:	af00      	add	r7, sp, #0
    149c:	60f8      	str	r0, [r7, #12]
    149e:	60b9      	str	r1, [r7, #8]
    14a0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    14a2:	68b8      	ldr	r0, [r7, #8]
    14a4:	f7ff fc92 	bl	dcc <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)())>
    14a8:	4603      	mov	r3, r0
    14aa:	681c      	ldr	r4, [r3, #0]
    14ac:	68f8      	ldr	r0, [r7, #12]
    14ae:	f7fe fff1 	bl	494 <std::_Any_data::_M_access()>
    14b2:	4603      	mov	r3, r0
    14b4:	4619      	mov	r1, r3
    14b6:	2004      	movs	r0, #4
    14b8:	f7fe ffb4 	bl	424 <operator new(unsigned int, void*)>
    14bc:	4603      	mov	r3, r0
    14be:	601c      	str	r4, [r3, #0]
    14c0:	bf00      	nop
    14c2:	3714      	adds	r7, #20
    14c4:	46bd      	mov	sp, r7
    14c6:	bd90      	pop	{r4, r7, pc}

000014c8 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    14c8:	b580      	push	{r7, lr}
    14ca:	b084      	sub	sp, #16
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    14d0:	6878      	ldr	r0, [r7, #4]
    14d2:	f000 f931 	bl	1738 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    14d6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    14d8:	68f8      	ldr	r0, [r7, #12]
    14da:	f000 f939 	bl	1750 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>
    14de:	4603      	mov	r3, r0
	}
    14e0:	4618      	mov	r0, r3
    14e2:	3710      	adds	r7, #16
    14e4:	46bd      	mov	sp, r7
    14e6:	bd80      	pop	{r7, pc}

000014e8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (**)()>())()>:
      _M_access()
    14e8:	b580      	push	{r7, lr}
    14ea:	b082      	sub	sp, #8
    14ec:	af00      	add	r7, sp, #0
    14ee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    14f0:	6878      	ldr	r0, [r7, #4]
    14f2:	f7fe ffcf 	bl	494 <std::_Any_data::_M_access()>
    14f6:	4603      	mov	r3, r0
    14f8:	4618      	mov	r0, r3
    14fa:	3708      	adds	r7, #8
    14fc:	46bd      	mov	sp, r7
    14fe:	bd80      	pop	{r7, pc}

00001500 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    1500:	b590      	push	{r4, r7, lr}
    1502:	b085      	sub	sp, #20
    1504:	af00      	add	r7, sp, #0
    1506:	60f8      	str	r0, [r7, #12]
    1508:	60b9      	str	r1, [r7, #8]
    150a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    150c:	68b8      	ldr	r0, [r7, #8]
    150e:	f000 f913 	bl	1738 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>
    1512:	4603      	mov	r3, r0
    1514:	681c      	ldr	r4, [r3, #0]
    1516:	68f8      	ldr	r0, [r7, #12]
    1518:	f7fe ffbc 	bl	494 <std::_Any_data::_M_access()>
    151c:	4603      	mov	r3, r0
    151e:	4619      	mov	r1, r3
    1520:	2004      	movs	r0, #4
    1522:	f7fe ff7f 	bl	424 <operator new(unsigned int, void*)>
    1526:	4603      	mov	r3, r0
    1528:	601c      	str	r4, [r3, #0]
	}
    152a:	bf00      	nop
    152c:	3714      	adds	r7, #20
    152e:	46bd      	mov	sp, r7
    1530:	bd90      	pop	{r4, r7, pc}

00001532 <std::_Function_base::_Base_manager<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    1532:	b580      	push	{r7, lr}
    1534:	b082      	sub	sp, #8
    1536:	af00      	add	r7, sp, #0
    1538:	6078      	str	r0, [r7, #4]
    153a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    153c:	6878      	ldr	r0, [r7, #4]
    153e:	f000 f912 	bl	1766 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>
	}
    1542:	bf00      	nop
    1544:	3708      	adds	r7, #8
    1546:	46bd      	mov	sp, r7
    1548:	bd80      	pop	{r7, pc}

0000154a <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_init_functor(std::_Any_data&, {lambda()#1}&&, std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    154a:	b580      	push	{r7, lr}
    154c:	b084      	sub	sp, #16
    154e:	af00      	add	r7, sp, #0
    1550:	60f8      	str	r0, [r7, #12]
    1552:	60b9      	str	r1, [r7, #8]
    1554:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    1556:	68b8      	ldr	r0, [r7, #8]
    1558:	f7ff fca6 	bl	ea8 <std::remove_reference<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>::type&& std::move<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}&>(std::remove_reference&&)>
    155c:	68f8      	ldr	r0, [r7, #12]
    155e:	f7fe ff99 	bl	494 <std::_Any_data::_M_access()>
    1562:	4603      	mov	r3, r0
    1564:	4619      	mov	r1, r3
    1566:	2001      	movs	r0, #1
    1568:	f7fe ff5c 	bl	424 <operator new(unsigned int, void*)>
    156c:	bf00      	nop
    156e:	3710      	adds	r7, #16
    1570:	46bd      	mov	sp, r7
    1572:	bd80      	pop	{r7, pc}

00001574 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    1574:	b580      	push	{r7, lr}
    1576:	b084      	sub	sp, #16
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    157c:	6878      	ldr	r0, [r7, #4]
    157e:	f000 f8fe 	bl	177e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    1582:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    1584:	68f8      	ldr	r0, [r7, #12]
    1586:	f000 f906 	bl	1796 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>
    158a:	4603      	mov	r3, r0
	}
    158c:	4618      	mov	r0, r3
    158e:	3710      	adds	r7, #16
    1590:	46bd      	mov	sp, r7
    1592:	bd80      	pop	{r7, pc}

00001594 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}*>()>:
      _M_access()
    1594:	b580      	push	{r7, lr}
    1596:	b082      	sub	sp, #8
    1598:	af00      	add	r7, sp, #0
    159a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    159c:	6878      	ldr	r0, [r7, #4]
    159e:	f7fe ff79 	bl	494 <std::_Any_data::_M_access()>
    15a2:	4603      	mov	r3, r0
    15a4:	4618      	mov	r0, r3
    15a6:	3708      	adds	r7, #8
    15a8:	46bd      	mov	sp, r7
    15aa:	bd80      	pop	{r7, pc}

000015ac <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_clone(std::_Any_data&, std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}> const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    15ac:	b580      	push	{r7, lr}
    15ae:	b084      	sub	sp, #16
    15b0:	af00      	add	r7, sp, #0
    15b2:	60f8      	str	r0, [r7, #12]
    15b4:	60b9      	str	r1, [r7, #8]
    15b6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    15b8:	68b8      	ldr	r0, [r7, #8]
    15ba:	f000 f8e0 	bl	177e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>
    15be:	68f8      	ldr	r0, [r7, #12]
    15c0:	f7fe ff68 	bl	494 <std::_Any_data::_M_access()>
    15c4:	4603      	mov	r3, r0
    15c6:	4619      	mov	r1, r3
    15c8:	2001      	movs	r0, #1
    15ca:	f7fe ff2b 	bl	424 <operator new(unsigned int, void*)>
	}
    15ce:	bf00      	nop
    15d0:	3710      	adds	r7, #16
    15d2:	46bd      	mov	sp, r7
    15d4:	bd80      	pop	{r7, pc}

000015d6 <std::_Function_base::_Base_manager<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    15d6:	b580      	push	{r7, lr}
    15d8:	b082      	sub	sp, #8
    15da:	af00      	add	r7, sp, #0
    15dc:	6078      	str	r0, [r7, #4]
    15de:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    15e0:	6878      	ldr	r0, [r7, #4]
    15e2:	f000 f8e3 	bl	17ac <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>
	}
    15e6:	bf00      	nop
    15e8:	3708      	adds	r7, #8
    15ea:	46bd      	mov	sp, r7
    15ec:	bd80      	pop	{r7, pc}

000015ee <std::array<char, 256u>::operator[](unsigned int)>:
      operator[](size_type __n) noexcept
    15ee:	b580      	push	{r7, lr}
    15f0:	b082      	sub	sp, #8
    15f2:	af00      	add	r7, sp, #0
    15f4:	6078      	str	r0, [r7, #4]
    15f6:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	6839      	ldr	r1, [r7, #0]
    15fc:	4618      	mov	r0, r3
    15fe:	f000 f8e1 	bl	17c4 <std::__array_traits<char, 256u>::_S_ref(char const (&) [256], unsigned int)>
    1602:	4603      	mov	r3, r0
    1604:	4618      	mov	r0, r3
    1606:	3708      	adds	r7, #8
    1608:	46bd      	mov	sp, r7
    160a:	bd80      	pop	{r7, pc}

0000160c <std::basic_string_view<char, std::char_traits<char> >::begin() const>:
      begin() const noexcept
    160c:	b480      	push	{r7}
    160e:	b083      	sub	sp, #12
    1610:	af00      	add	r7, sp, #0
    1612:	6078      	str	r0, [r7, #4]
      { return this->_M_str; }
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	685b      	ldr	r3, [r3, #4]
    1618:	4618      	mov	r0, r3
    161a:	370c      	adds	r7, #12
    161c:	46bd      	mov	sp, r7
    161e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1622:	4770      	bx	lr

00001624 <std::basic_string_view<char, std::char_traits<char> >::end() const>:
      end() const noexcept
    1624:	b480      	push	{r7}
    1626:	b083      	sub	sp, #12
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]
      { return this->_M_str + this->_M_len; }
    162c:	687b      	ldr	r3, [r7, #4]
    162e:	685a      	ldr	r2, [r3, #4]
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	4413      	add	r3, r2
    1636:	4618      	mov	r0, r3
    1638:	370c      	adds	r7, #12
    163a:	46bd      	mov	sp, r7
    163c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1640:	4770      	bx	lr

00001642 <char* std::copy<char const*, char*>(char const*, char const*, char*)>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    1642:	b590      	push	{r4, r7, lr}
    1644:	b085      	sub	sp, #20
    1646:	af00      	add	r7, sp, #0
    1648:	60f8      	str	r0, [r7, #12]
    164a:	60b9      	str	r1, [r7, #8]
    164c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
    164e:	68f8      	ldr	r0, [r7, #12]
    1650:	f000 f8c6 	bl	17e0 <char const* std::__miter_base<char const*>(char const*)>
    1654:	4604      	mov	r4, r0
    1656:	68b8      	ldr	r0, [r7, #8]
    1658:	f000 f8c2 	bl	17e0 <char const* std::__miter_base<char const*>(char const*)>
    165c:	4603      	mov	r3, r0
    165e:	687a      	ldr	r2, [r7, #4]
    1660:	4619      	mov	r1, r3
    1662:	4620      	mov	r0, r4
    1664:	f000 f8c7 	bl	17f6 <char* std::__copy_move_a2<false, char const*, char*>(char const*, char const*, char*)>
    1668:	4603      	mov	r3, r0
    }
    166a:	4618      	mov	r0, r3
    166c:	3714      	adds	r7, #20
    166e:	46bd      	mov	sp, r7
    1670:	bd90      	pop	{r4, r7, pc}

00001672 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    1672:	b480      	push	{r7}
    1674:	b083      	sub	sp, #12
    1676:	af00      	add	r7, sp, #0
    1678:	6078      	str	r0, [r7, #4]
    167a:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    167c:	683b      	ldr	r3, [r7, #0]
    167e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1682:	6879      	ldr	r1, [r7, #4]
    1684:	e9c1 2300 	strd	r2, r3, [r1]
    1688:	687b      	ldr	r3, [r7, #4]
    168a:	4618      	mov	r0, r3
    168c:	370c      	adds	r7, #12
    168e:	46bd      	mov	sp, r7
    1690:	f85d 7b04 	ldr.w	r7, [sp], #4
    1694:	4770      	bx	lr

00001696 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    1696:	b480      	push	{r7}
    1698:	b083      	sub	sp, #12
    169a:	af00      	add	r7, sp, #0
    169c:	6078      	str	r0, [r7, #4]
	{ return __r; }
    169e:	687b      	ldr	r3, [r7, #4]
    16a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    16a4:	4610      	mov	r0, r2
    16a6:	4619      	mov	r1, r3
    16a8:	370c      	adds	r7, #12
    16aa:	46bd      	mov	sp, r7
    16ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b0:	4770      	bx	lr

000016b2 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    16b2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    16b6:	b084      	sub	sp, #16
    16b8:	af00      	add	r7, sp, #0
    16ba:	6078      	str	r0, [r7, #4]
    16bc:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    16be:	6838      	ldr	r0, [r7, #0]
    16c0:	f7ff ffe9 	bl	1696 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    16c4:	4604      	mov	r4, r0
    16c6:	460d      	mov	r5, r1
    16c8:	4622      	mov	r2, r4
    16ca:	462b      	mov	r3, r5
    16cc:	f04f 0000 	mov.w	r0, #0
    16d0:	f04f 0100 	mov.w	r1, #0
    16d4:	0159      	lsls	r1, r3, #5
    16d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
    16da:	0150      	lsls	r0, r2, #5
    16dc:	4602      	mov	r2, r0
    16de:	460b      	mov	r3, r1
    16e0:	1b12      	subs	r2, r2, r4
    16e2:	eb63 0305 	sbc.w	r3, r3, r5
    16e6:	f04f 0000 	mov.w	r0, #0
    16ea:	f04f 0100 	mov.w	r1, #0
    16ee:	0259      	lsls	r1, r3, #9
    16f0:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
    16f4:	0250      	lsls	r0, r2, #9
    16f6:	4602      	mov	r2, r0
    16f8:	460b      	mov	r3, r1
    16fa:	1912      	adds	r2, r2, r4
    16fc:	eb45 0303 	adc.w	r3, r5, r3
    1700:	f04f 0000 	mov.w	r0, #0
    1704:	f04f 0100 	mov.w	r1, #0
    1708:	0199      	lsls	r1, r3, #6
    170a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    170e:	0190      	lsls	r0, r2, #6
    1710:	1a80      	subs	r0, r0, r2
    1712:	eb61 0103 	sbc.w	r1, r1, r3
    1716:	eb10 0804 	adds.w	r8, r0, r4
    171a:	eb41 0905 	adc.w	r9, r1, r5
    171e:	e9c7 8902 	strd	r8, r9, [r7, #8]
    1722:	f107 0308 	add.w	r3, r7, #8
    1726:	4619      	mov	r1, r3
    1728:	6878      	ldr	r0, [r7, #4]
    172a:	f7fe ff31 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
	  }
    172e:	6878      	ldr	r0, [r7, #4]
    1730:	3710      	adds	r7, #16
    1732:	46bd      	mov	sp, r7
    1734:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00001738 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>() const)()>:
      _M_access() const
    1738:	b580      	push	{r7, lr}
    173a:	b082      	sub	sp, #8
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    1740:	6878      	ldr	r0, [r7, #4]
    1742:	f7fe feb2 	bl	4aa <std::_Any_data::_M_access() const>
    1746:	4603      	mov	r3, r0
    1748:	4618      	mov	r0, r3
    174a:	3708      	adds	r7, #8
    174c:	46bd      	mov	sp, r7
    174e:	bd80      	pop	{r7, pc}

00001750 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const*std::__addressof<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const)()>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    1750:	b480      	push	{r7}
    1752:	b083      	sub	sp, #12
    1754:	af00      	add	r7, sp, #0
    1756:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	4618      	mov	r0, r3
    175c:	370c      	adds	r7, #12
    175e:	46bd      	mov	sp, r7
    1760:	f85d 7b04 	ldr.w	r7, [sp], #4
    1764:	4770      	bx	lr

00001766 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&std::_Any_data::_M_access<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)()>())()>:
      _M_access()
    1766:	b580      	push	{r7, lr}
    1768:	b082      	sub	sp, #8
    176a:	af00      	add	r7, sp, #0
    176c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    176e:	6878      	ldr	r0, [r7, #4]
    1770:	f7fe fe90 	bl	494 <std::_Any_data::_M_access()>
    1774:	4603      	mov	r3, r0
    1776:	4618      	mov	r0, r3
    1778:	3708      	adds	r7, #8
    177a:	46bd      	mov	sp, r7
    177c:	bd80      	pop	{r7, pc}

0000177e <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>() const>:
      _M_access() const
    177e:	b580      	push	{r7, lr}
    1780:	b082      	sub	sp, #8
    1782:	af00      	add	r7, sp, #0
    1784:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    1786:	6878      	ldr	r0, [r7, #4]
    1788:	f7fe fe8f 	bl	4aa <std::_Any_data::_M_access() const>
    178c:	4603      	mov	r3, r0
    178e:	4618      	mov	r0, r3
    1790:	3708      	adds	r7, #8
    1792:	46bd      	mov	sp, r7
    1794:	bd80      	pop	{r7, pc}

00001796 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const* std::__addressof<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const>(sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1} const&)>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    1796:	b480      	push	{r7}
    1798:	b083      	sub	sp, #12
    179a:	af00      	add	r7, sp, #0
    179c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	4618      	mov	r0, r3
    17a2:	370c      	adds	r7, #12
    17a4:	46bd      	mov	sp, r7
    17a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    17aa:	4770      	bx	lr

000017ac <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}& std::_Any_data::_M_access<sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >)::{lambda()#1}>()>:
      _M_access()
    17ac:	b580      	push	{r7, lr}
    17ae:	b082      	sub	sp, #8
    17b0:	af00      	add	r7, sp, #0
    17b2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    17b4:	6878      	ldr	r0, [r7, #4]
    17b6:	f7fe fe6d 	bl	494 <std::_Any_data::_M_access()>
    17ba:	4603      	mov	r3, r0
    17bc:	4618      	mov	r0, r3
    17be:	3708      	adds	r7, #8
    17c0:	46bd      	mov	sp, r7
    17c2:	bd80      	pop	{r7, pc}

000017c4 <std::__array_traits<char, 256u>::_S_ref(char const (&) [256], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    17c4:	b480      	push	{r7}
    17c6:	b083      	sub	sp, #12
    17c8:	af00      	add	r7, sp, #0
    17ca:	6078      	str	r0, [r7, #4]
    17cc:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    17ce:	687a      	ldr	r2, [r7, #4]
    17d0:	683b      	ldr	r3, [r7, #0]
    17d2:	4413      	add	r3, r2
    17d4:	4618      	mov	r0, r3
    17d6:	370c      	adds	r7, #12
    17d8:	46bd      	mov	sp, r7
    17da:	f85d 7b04 	ldr.w	r7, [sp], #4
    17de:	4770      	bx	lr

000017e0 <char const* std::__miter_base<char const*>(char const*)>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    17e0:	b480      	push	{r7}
    17e2:	b083      	sub	sp, #12
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]
    { return __it; }
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	4618      	mov	r0, r3
    17ec:	370c      	adds	r7, #12
    17ee:	46bd      	mov	sp, r7
    17f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    17f4:	4770      	bx	lr

000017f6 <char* std::__copy_move_a2<false, char const*, char*>(char const*, char const*, char*)>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
    17f6:	b5b0      	push	{r4, r5, r7, lr}
    17f8:	b084      	sub	sp, #16
    17fa:	af00      	add	r7, sp, #0
    17fc:	60f8      	str	r0, [r7, #12]
    17fe:	60b9      	str	r1, [r7, #8]
    1800:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
    1802:	68f8      	ldr	r0, [r7, #12]
    1804:	f000 f81a 	bl	183c <char const* std::__niter_base<char const*>(char const*)>
    1808:	4604      	mov	r4, r0
    180a:	68b8      	ldr	r0, [r7, #8]
    180c:	f000 f816 	bl	183c <char const* std::__niter_base<char const*>(char const*)>
    1810:	4605      	mov	r5, r0
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	4618      	mov	r0, r3
    1816:	f000 f81c 	bl	1852 <char* std::__niter_base<char*>(char*)>
    181a:	4603      	mov	r3, r0
    181c:	461a      	mov	r2, r3
    181e:	4629      	mov	r1, r5
    1820:	4620      	mov	r0, r4
    1822:	f000 f821 	bl	1868 <char* std::__copy_move_a<false, char const*, char*>(char const*, char const*, char*)>
    1826:	4602      	mov	r2, r0
    1828:	1d3b      	adds	r3, r7, #4
    182a:	4611      	mov	r1, r2
    182c:	4618      	mov	r0, r3
    182e:	f000 f82d 	bl	188c <char* std::__niter_wrap<char*>(char* const&, char*)>
    1832:	4603      	mov	r3, r0
    }
    1834:	4618      	mov	r0, r3
    1836:	3710      	adds	r7, #16
    1838:	46bd      	mov	sp, r7
    183a:	bdb0      	pop	{r4, r5, r7, pc}

0000183c <char const* std::__niter_base<char const*>(char const*)>:
    __niter_base(_Iterator __it)
    183c:	b480      	push	{r7}
    183e:	b083      	sub	sp, #12
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
    { return __it; }
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	4618      	mov	r0, r3
    1848:	370c      	adds	r7, #12
    184a:	46bd      	mov	sp, r7
    184c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1850:	4770      	bx	lr

00001852 <char* std::__niter_base<char*>(char*)>:
    __niter_base(_Iterator __it)
    1852:	b480      	push	{r7}
    1854:	b083      	sub	sp, #12
    1856:	af00      	add	r7, sp, #0
    1858:	6078      	str	r0, [r7, #4]
    { return __it; }
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	4618      	mov	r0, r3
    185e:	370c      	adds	r7, #12
    1860:	46bd      	mov	sp, r7
    1862:	f85d 7b04 	ldr.w	r7, [sp], #4
    1866:	4770      	bx	lr

00001868 <char* std::__copy_move_a<false, char const*, char*>(char const*, char const*, char*)>:
    __copy_move_a(_II __first, _II __last, _OI __result)
    1868:	b580      	push	{r7, lr}
    186a:	b086      	sub	sp, #24
    186c:	af00      	add	r7, sp, #0
    186e:	60f8      	str	r0, [r7, #12]
    1870:	60b9      	str	r1, [r7, #8]
    1872:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
    1874:	2301      	movs	r3, #1
    1876:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	68b9      	ldr	r1, [r7, #8]
    187c:	68f8      	ldr	r0, [r7, #12]
    187e:	f000 f811 	bl	18a4 <char* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char>(char const*, char const*, char*)>
    1882:	4603      	mov	r3, r0
    }
    1884:	4618      	mov	r0, r3
    1886:	3718      	adds	r7, #24
    1888:	46bd      	mov	sp, r7
    188a:	bd80      	pop	{r7, pc}

0000188c <char* std::__niter_wrap<char*>(char* const&, char*)>:
    __niter_wrap(const _Iterator&, _Iterator __res)
    188c:	b480      	push	{r7}
    188e:	b083      	sub	sp, #12
    1890:	af00      	add	r7, sp, #0
    1892:	6078      	str	r0, [r7, #4]
    1894:	6039      	str	r1, [r7, #0]
    { return __res; }
    1896:	683b      	ldr	r3, [r7, #0]
    1898:	4618      	mov	r0, r3
    189a:	370c      	adds	r7, #12
    189c:	46bd      	mov	sp, r7
    189e:	f85d 7b04 	ldr.w	r7, [sp], #4
    18a2:	4770      	bx	lr

000018a4 <char* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char>(char const*, char const*, char*)>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    18a4:	b580      	push	{r7, lr}
    18a6:	b086      	sub	sp, #24
    18a8:	af00      	add	r7, sp, #0
    18aa:	60f8      	str	r0, [r7, #12]
    18ac:	60b9      	str	r1, [r7, #8]
    18ae:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
    18b0:	68ba      	ldr	r2, [r7, #8]
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	1ad3      	subs	r3, r2, r3
    18b6:	617b      	str	r3, [r7, #20]
	  if (_Num)
    18b8:	697b      	ldr	r3, [r7, #20]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d005      	beq.n	18ca <char* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char>(char const*, char const*, char*)+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    18be:	697b      	ldr	r3, [r7, #20]
    18c0:	461a      	mov	r2, r3
    18c2:	68f9      	ldr	r1, [r7, #12]
    18c4:	6878      	ldr	r0, [r7, #4]
    18c6:	f005 fb63 	bl	6f90 <memmove>
	  return __result + _Num;
    18ca:	697b      	ldr	r3, [r7, #20]
    18cc:	687a      	ldr	r2, [r7, #4]
    18ce:	4413      	add	r3, r2
	}
    18d0:	4618      	mov	r0, r3
    18d2:	3718      	adds	r7, #24
    18d4:	46bd      	mov	sp, r7
    18d6:	bd80      	pop	{r7, pc}

000018d8 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return -1;
}
    18d8:	b580      	push	{r7, lr}
    18da:	b082      	sub	sp, #8
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
    18e0:	6039      	str	r1, [r7, #0]
    18e2:	687b      	ldr	r3, [r7, #4]
    18e4:	2b01      	cmp	r3, #1
    18e6:	d116      	bne.n	1916 <__static_initialization_and_destruction_0(int, int)+0x3e>
    18e8:	683b      	ldr	r3, [r7, #0]
    18ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    18ee:	4293      	cmp	r3, r2
    18f0:	d111      	bne.n	1916 <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    18f2:	4b0b      	ldr	r3, [pc, #44]	; (1920 <__static_initialization_and_destruction_0(int, int)+0x48>)
    18f4:	681b      	ldr	r3, [r3, #0]
    18f6:	f003 0301 	and.w	r3, r3, #1
    18fa:	2b00      	cmp	r3, #0
    18fc:	d10b      	bne.n	1916 <__static_initialization_and_destruction_0(int, int)+0x3e>
    18fe:	4b08      	ldr	r3, [pc, #32]	; (1920 <__static_initialization_and_destruction_0(int, int)+0x48>)
    1900:	2201      	movs	r2, #1
    1902:	601a      	str	r2, [r3, #0]
    1904:	4907      	ldr	r1, [pc, #28]	; (1924 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    1906:	4808      	ldr	r0, [pc, #32]	; (1928 <__static_initialization_and_destruction_0(int, int)+0x50>)
    1908:	f7ff f8d8 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    190c:	4a07      	ldr	r2, [pc, #28]	; (192c <__static_initialization_and_destruction_0(int, int)+0x54>)
    190e:	4908      	ldr	r1, [pc, #32]	; (1930 <__static_initialization_and_destruction_0(int, int)+0x58>)
    1910:	4805      	ldr	r0, [pc, #20]	; (1928 <__static_initialization_and_destruction_0(int, int)+0x50>)
    1912:	f004 ffd1 	bl	68b8 <__aeabi_atexit>
    1916:	bf00      	nop
    1918:	3708      	adds	r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop
    1920:	10000158 	.word	0x10000158
    1924:	000007f5 	.word	0x000007f5
    1928:	10000148 	.word	0x10000148
    192c:	10000000 	.word	0x10000000
    1930:	0000083d 	.word	0x0000083d

00001934 <_GLOBAL__sub_I_main>:
    1934:	b580      	push	{r7, lr}
    1936:	af00      	add	r7, sp, #0
    1938:	f64f 71ff 	movw	r1, #65535	; 0xffff
    193c:	2001      	movs	r0, #1
    193e:	f7ff ffcb 	bl	18d8 <__static_initialization_and_destruction_0(int, int)>
    1942:	bd80      	pop	{r7, pc}

00001944 <sjsu::Halt()>:
/// Halt system by putting it into infinite loop
inline void Halt()
{
    1944:	b480      	push	{r7}
    1946:	af00      	add	r7, sp, #0
  while (true)
  {
    continue;
    1948:	bf00      	nop
  while (true)
    194a:	e7fd      	b.n	1948 <sjsu::Halt()+0x4>

0000194c <sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)>:
  ///
  /// @param format - format string to be used for logging
  /// @param params - variadic list of parameters to be passed to the log object
  /// @param location - the location in the source code where this object was
  ///        constructed.
  LogError(const char * format,
    194c:	b580      	push	{r7, lr}
    194e:	b086      	sub	sp, #24
    1950:	af00      	add	r7, sp, #0
    1952:	60f8      	str	r0, [r7, #12]
    1954:	60b9      	str	r1, [r7, #8]
    1956:	607a      	str	r2, [r7, #4]
    // Required as GCC8 has parsing issues with the C++17 [[maybe_unused]]
    // attribute for constructor's first argument
    _SJ2_USED(format);
    if constexpr (config::kLogLevel <= SJ2_LOG_LEVEL_ERROR)
    {
      Log<Params...>(SJ2_BACKGROUND_RED "   ERROR", format, params...,
    1958:	f107 0014 	add.w	r0, r7, #20
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	68ba      	ldr	r2, [r7, #8]
    1960:	4903      	ldr	r1, [pc, #12]	; (1970 <sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)+0x24>)
    1962:	f7ff fb29 	bl	fb8 <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)>
                     location);
    }
  }
    1966:	68fb      	ldr	r3, [r7, #12]
    1968:	4618      	mov	r0, r3
    196a:	3718      	adds	r7, #24
    196c:	46bd      	mov	sp, r7
    196e:	bd80      	pop	{r7, pc}
    1970:	00007538 	.word	0x00007538

00001974 <__static_initialization_and_destruction_0(int, int)>:
    }
  }
  return static_cast<uint8_t>(config::kTaskSchedulerSize + 1);
};
}  // namespace rtos
}  // namespace sjsu
    1974:	b580      	push	{r7, lr}
    1976:	b082      	sub	sp, #8
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	6039      	str	r1, [r7, #0]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	2b01      	cmp	r3, #1
    1982:	d116      	bne.n	19b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
    1984:	683b      	ldr	r3, [r7, #0]
    1986:	f64f 72ff 	movw	r2, #65535	; 0xffff
    198a:	4293      	cmp	r3, r2
    198c:	d111      	bne.n	19b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    198e:	4b0b      	ldr	r3, [pc, #44]	; (19bc <__static_initialization_and_destruction_0(int, int)+0x48>)
    1990:	681b      	ldr	r3, [r3, #0]
    1992:	f003 0301 	and.w	r3, r3, #1
    1996:	2b00      	cmp	r3, #0
    1998:	d10b      	bne.n	19b2 <__static_initialization_and_destruction_0(int, int)+0x3e>
    199a:	4b08      	ldr	r3, [pc, #32]	; (19bc <__static_initialization_and_destruction_0(int, int)+0x48>)
    199c:	2201      	movs	r2, #1
    199e:	601a      	str	r2, [r3, #0]
    19a0:	4907      	ldr	r1, [pc, #28]	; (19c0 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    19a2:	4808      	ldr	r0, [pc, #32]	; (19c4 <__static_initialization_and_destruction_0(int, int)+0x50>)
    19a4:	f7ff f88a 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    19a8:	4a07      	ldr	r2, [pc, #28]	; (19c8 <__static_initialization_and_destruction_0(int, int)+0x54>)
    19aa:	4908      	ldr	r1, [pc, #32]	; (19cc <__static_initialization_and_destruction_0(int, int)+0x58>)
    19ac:	4805      	ldr	r0, [pc, #20]	; (19c4 <__static_initialization_and_destruction_0(int, int)+0x50>)
    19ae:	f004 ff83 	bl	68b8 <__aeabi_atexit>
    19b2:	bf00      	nop
    19b4:	3708      	adds	r7, #8
    19b6:	46bd      	mov	sp, r7
    19b8:	bd80      	pop	{r7, pc}
    19ba:	bf00      	nop
    19bc:	10000158 	.word	0x10000158
    19c0:	000007f5 	.word	0x000007f5
    19c4:	10000148 	.word	0x10000148
    19c8:	10000000 	.word	0x10000000
    19cc:	0000083d 	.word	0x0000083d

000019d0 <_GLOBAL__sub_I__ZN4sjsu4rtos13TaskScheduler7RunTaskEPv>:
    19d0:	b580      	push	{r7, lr}
    19d2:	af00      	add	r7, sp, #0
    19d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19d8:	2001      	movs	r0, #1
    19da:	f7ff ffcb 	bl	1974 <__static_initialization_and_destruction_0(int, int)>
    19de:	bd80      	pop	{r7, pc}

000019e0 <units::literals::operator"" _B(unsigned long long)>:
	 *				`data_unit`.
	 * @anchor		dataContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_DATA_UNITS)
	UNIT_ADD_WITH_METRIC_AND_BINARY_PREFIXES(data, byte, bytes, B, unit<std::ratio<1>, units::category::data_unit>)
    19e0:	b580      	push	{r7, lr}
    19e2:	b084      	sub	sp, #16
    19e4:	af00      	add	r7, sp, #0
    19e6:	e9c7 0100 	strd	r0, r1, [r7]
    19ea:	e9d7 0100 	ldrd	r0, r1, [r7]
    19ee:	f005 f883 	bl	6af8 <__aeabi_ul2f>
    19f2:	4602      	mov	r2, r0
    19f4:	f107 030c 	add.w	r3, r7, #12
    19f8:	ee00 2a10 	vmov	s0, r2
    19fc:	4618      	mov	r0, r3
    19fe:	f000 f9e1 	bl	1dc4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	4618      	mov	r0, r3
    1a06:	3710      	adds	r7, #16
    1a08:	46bd      	mov	sp, r7
    1a0a:	bd80      	pop	{r7, pc}

00001a0c <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    1a0c:	b480      	push	{r7}
    1a0e:	b083      	sub	sp, #12
    1a10:	af00      	add	r7, sp, #0
    1a12:	6078      	str	r0, [r7, #4]
    1a14:	6039      	str	r1, [r7, #0]
    1a16:	683b      	ldr	r3, [r7, #0]
    1a18:	681a      	ldr	r2, [r3, #0]
    1a1a:	687b      	ldr	r3, [r7, #4]
    1a1c:	601a      	str	r2, [r3, #0]
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	4618      	mov	r0, r3
    1a22:	370c      	adds	r7, #12
    1a24:	46bd      	mov	sp, r7
    1a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a2a:	4770      	bx	lr

00001a2c <sjsu::Error_t::Error_t(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)>:
  /// @param error_status   - status code to go with this error object
  /// @param error_message  - message to go with error to describe exactly why
  ///                         the error occurred.
  /// @param source_location - the location in the source code where the Error_t
  ///                          was created.
  constexpr Error_t(Status error_status,
    1a2c:	b590      	push	{r4, r7, lr}
    1a2e:	b085      	sub	sp, #20
    1a30:	af00      	add	r7, sp, #0
    1a32:	60f8      	str	r0, [r7, #12]
    1a34:	4638      	mov	r0, r7
    1a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                    std::string_view error_message = kEmptyMessage,
                    const std::experimental::source_location & source_location =
                        std::experimental::source_location::current())
      : status(error_status), message(kEmptyMessage), location(source_location)
    1a3a:	68fb      	ldr	r3, [r7, #12]
    1a3c:	461c      	mov	r4, r3
    1a3e:	463b      	mov	r3, r7
    1a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	2200      	movs	r2, #0
    1a4c:	60da      	str	r2, [r3, #12]
    1a4e:	68fb      	ldr	r3, [r7, #12]
    1a50:	4a0c      	ldr	r2, [pc, #48]	; (1a84 <sjsu::Error_t::Error_t(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)+0x58>)
    1a52:	611a      	str	r2, [r3, #16]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a58:	f103 0414 	add.w	r4, r3, #20
    1a5c:	4613      	mov	r3, r2
    1a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  {
    if constexpr (config::kStoreErrorMessages)
    {
      message = error_message;
    1a64:	68fb      	ldr	r3, [r7, #12]
    1a66:	330c      	adds	r3, #12
    1a68:	f107 0220 	add.w	r2, r7, #32
    1a6c:	e892 0003 	ldmia.w	r2, {r0, r1}
    1a70:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    if constexpr (config::kAutomaticallyPrintOnError)
    {
      Print();
    1a74:	68f8      	ldr	r0, [r7, #12]
    1a76:	f000 f807 	bl	1a88 <sjsu::Error_t::Print()>
        int depth = 0;
        _Unwind_Backtrace(&debug::PrintAddressInRow, &depth);
        puts("");
      }
    }
  }
    1a7a:	68fb      	ldr	r3, [r7, #12]
    1a7c:	4618      	mov	r0, r3
    1a7e:	3714      	adds	r7, #20
    1a80:	46bd      	mov	sp, r7
    1a82:	bd90      	pop	{r4, r7, pc}
    1a84:	000075c0 	.word	0x000075c0

00001a88 <sjsu::Error_t::Print()>:

  /// Print the error message to STDOUT
  void Print()
    1a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a8c:	b087      	sub	sp, #28
    1a8e:	af04      	add	r7, sp, #16
    1a90:	6078      	str	r0, [r7, #4]
  {
    /// Print the colored error text to STDOUT
    printf(SJ2_BOLD_YELLOW "Error:" SJ2_HI_BOLD_RED "%s(%d)" SJ2_HI_BOLD_WHITE
    1a92:	687b      	ldr	r3, [r7, #4]
    1a94:	3304      	adds	r3, #4
    1a96:	4618      	mov	r0, r3
    1a98:	f000 f988 	bl	1dac <std::basic_string_view<char, std::char_traits<char> >::data() const>
    1a9c:	4680      	mov	r8, r0
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	681c      	ldr	r4, [r3, #0]
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	3314      	adds	r3, #20
    1aa6:	4618      	mov	r0, r3
    1aa8:	f7fe fca4 	bl	3f4 <std::experimental::fundamentals_v2::source_location::file_name() const>
    1aac:	4681      	mov	r9, r0
    1aae:	687b      	ldr	r3, [r7, #4]
    1ab0:	3314      	adds	r3, #20
    1ab2:	4618      	mov	r0, r3
    1ab4:	f7fe fc92 	bl	3dc <std::experimental::fundamentals_v2::source_location::line() const>
    1ab8:	4605      	mov	r5, r0
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	3314      	adds	r3, #20
    1abe:	4618      	mov	r0, r3
    1ac0:	f7fe fca4 	bl	40c <std::experimental::fundamentals_v2::source_location::function_name() const>
    1ac4:	4606      	mov	r6, r0
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	330c      	adds	r3, #12
    1aca:	4618      	mov	r0, r3
    1acc:	f000 f96e 	bl	1dac <std::basic_string_view<char, std::char_traits<char> >::data() const>
    1ad0:	4603      	mov	r3, r0
    1ad2:	9302      	str	r3, [sp, #8]
    1ad4:	9601      	str	r6, [sp, #4]
    1ad6:	9500      	str	r5, [sp, #0]
    1ad8:	464b      	mov	r3, r9
    1ada:	4622      	mov	r2, r4
    1adc:	4641      	mov	r1, r8
    1ade:	4804      	ldr	r0, [pc, #16]	; (1af0 <sjsu::Error_t::Print()+0x68>)
    1ae0:	f001 fc72 	bl	33c8 <printf>
                           ":%s:%" PRIuLEAST32 ":%s(): %s\n" SJ2_COLOR_RESET,
           status.name.data(), status.code, location.file_name(),
           location.line(), location.function_name(), message.data());
  }
    1ae4:	bf00      	nop
    1ae6:	370c      	adds	r7, #12
    1ae8:	46bd      	mov	sp, r7
    1aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1aee:	bf00      	nop
    1af0:	000075c4 	.word	0x000075c4

00001af4 <sjsu::Error(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)>:
constexpr tl::unexpected<Error_t> Error(
    Status status,
    std::string_view message = Error_t::kEmptyMessage,
    const std::experimental::source_location & location =
        std::experimental::source_location::current())
{
    1af4:	b590      	push	{r4, r7, lr}
    1af6:	b093      	sub	sp, #76	; 0x4c
    1af8:	af04      	add	r7, sp, #16
    1afa:	60f8      	str	r0, [r7, #12]
    1afc:	4638      	mov	r0, r7
    1afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  return tl::unexpected(Error_t{ status, message, location });
    1b02:	f107 0414 	add.w	r4, r7, #20
    1b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1b08:	9302      	str	r3, [sp, #8]
    1b0a:	466b      	mov	r3, sp
    1b0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    1b10:	e892 0003 	ldmia.w	r2, {r0, r1}
    1b14:	e883 0003 	stmia.w	r3, {r0, r1}
    1b18:	463b      	mov	r3, r7
    1b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
    1b1c:	4620      	mov	r0, r4
    1b1e:	f7ff ff85 	bl	1a2c <sjsu::Error_t::Error_t(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)>
    1b22:	f107 0314 	add.w	r3, r7, #20
    1b26:	4619      	mov	r1, r3
    1b28:	68f8      	ldr	r0, [r7, #12]
    1b2a:	f000 f95c 	bl	1de6 <tl::unexpected<sjsu::Error_t>::unexpected(sjsu::Error_t&&)>
}
    1b2e:	68f8      	ldr	r0, [r7, #12]
    1b30:	373c      	adds	r7, #60	; 0x3c
    1b32:	46bd      	mov	sp, r7
    1b34:	bd90      	pop	{r4, r7, pc}

00001b36 <tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_operations_base()>:
};

// This base class provides some handy member functions which can be used in
// further derived classes
template <class E>
struct expected_operations_base<void, E> : expected_storage_base<void, E> {
    1b36:	b580      	push	{r7, lr}
    1b38:	b082      	sub	sp, #8
    1b3a:	af00      	add	r7, sp, #0
    1b3c:	6078      	str	r0, [r7, #4]
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	4618      	mov	r0, r3
    1b42:	f000 f976 	bl	1e32 <tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base()>
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	4618      	mov	r0, r3
    1b4a:	3708      	adds	r7, #8
    1b4c:	46bd      	mov	sp, r7
    1b4e:	bd80      	pop	{r7, pc}

00001b50 <tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_copy_base()>:
// This class manages conditionally having a trivial copy constructor
// This specialization is for when T and E are trivially copy constructible
template <class T, class E,
          bool = is_void_or<T, TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T)>::
              value &&TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(E)::value>
struct expected_copy_base : expected_operations_base<T, E> {
    1b50:	b580      	push	{r7, lr}
    1b52:	b082      	sub	sp, #8
    1b54:	af00      	add	r7, sp, #0
    1b56:	6078      	str	r0, [r7, #4]
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	4618      	mov	r0, r3
    1b5c:	f7ff ffeb 	bl	1b36 <tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_operations_base()>
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	4618      	mov	r0, r3
    1b64:	3708      	adds	r7, #8
    1b66:	46bd      	mov	sp, r7
    1b68:	bd80      	pop	{r7, pc}

00001b6a <tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_move_base()>:
// move constructible
#ifndef TL_EXPECTED_GCC49
template <class T, class E,
          bool = is_void_or<T, std::is_trivially_move_constructible<T>>::value
              &&std::is_trivially_move_constructible<E>::value>
struct expected_move_base : expected_copy_base<T, E> {
    1b6a:	b580      	push	{r7, lr}
    1b6c:	b082      	sub	sp, #8
    1b6e:	af00      	add	r7, sp, #0
    1b70:	6078      	str	r0, [r7, #4]
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	4618      	mov	r0, r3
    1b76:	f7ff ffeb 	bl	1b50 <tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_copy_base()>
    1b7a:	687b      	ldr	r3, [r7, #4]
    1b7c:	4618      	mov	r0, r3
    1b7e:	3708      	adds	r7, #8
    1b80:	46bd      	mov	sp, r7
    1b82:	bd80      	pop	{r7, pc}

00001b84 <tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_copy_assign_base()>:
                             TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(T),
                             TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(T)>>::value
              &&TL_EXPECTED_IS_TRIVIALLY_COPY_ASSIGNABLE(E)::value
                  &&TL_EXPECTED_IS_TRIVIALLY_COPY_CONSTRUCTIBLE(E)::value
                      &&TL_EXPECTED_IS_TRIVIALLY_DESTRUCTIBLE(E)::value>
struct expected_copy_assign_base : expected_move_base<T, E> {
    1b84:	b580      	push	{r7, lr}
    1b86:	b082      	sub	sp, #8
    1b88:	af00      	add	r7, sp, #0
    1b8a:	6078      	str	r0, [r7, #4]
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	4618      	mov	r0, r3
    1b90:	f7ff ffeb 	bl	1b6a <tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_move_base()>
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	4618      	mov	r0, r3
    1b98:	3708      	adds	r7, #8
    1b9a:	46bd      	mov	sp, r7
    1b9c:	bd80      	pop	{r7, pc}

00001b9e <tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_move_assign_base()>:
                                        std::is_trivially_move_constructible<T>,
                                        std::is_trivially_move_assignable<T>>>::
                  value &&std::is_trivially_destructible<E>::value
                      &&std::is_trivially_move_constructible<E>::value
                          &&std::is_trivially_move_assignable<E>::value>
struct expected_move_assign_base : expected_copy_assign_base<T, E> {
    1b9e:	b580      	push	{r7, lr}
    1ba0:	b082      	sub	sp, #8
    1ba2:	af00      	add	r7, sp, #0
    1ba4:	6078      	str	r0, [r7, #4]
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	4618      	mov	r0, r3
    1baa:	f7ff ffeb 	bl	1b84 <tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_copy_assign_base()>
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	4618      	mov	r0, r3
    1bb2:	3708      	adds	r7, #8
    1bb4:	46bd      	mov	sp, r7
    1bb6:	bd80      	pop	{r7, pc}

00001bb8 <tl::expected<void, sjsu::Error_t>::expected()>:
#ifndef TL_EXPECTED_NO_CONSTRR
  template <class F> expected constexpr or_else(F &&f) const && {
    return or_else_impl(std::move(*this), std::forward<F>(f));
  }
#endif
  constexpr expected() = default;
    1bb8:	b580      	push	{r7, lr}
    1bba:	b082      	sub	sp, #8
    1bbc:	af00      	add	r7, sp, #0
    1bbe:	6078      	str	r0, [r7, #4]
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	4618      	mov	r0, r3
    1bc4:	f7ff ffeb 	bl	1b9e <tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_move_assign_base()>
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	4618      	mov	r0, r3
    1bcc:	3708      	adds	r7, #8
    1bce:	46bd      	mov	sp, r7
    1bd0:	bd80      	pop	{r7, pc}

00001bd2 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetMemoryType()>:
inline sjsu::Storage & GetInactive<sjsu::Storage>()
{
  class InactiveStorage : public sjsu::Storage
  {
   public:
    Type GetMemoryType() override
    1bd2:	b480      	push	{r7}
    1bd4:	b083      	sub	sp, #12
    1bd6:	af00      	add	r7, sp, #0
    1bd8:	6078      	str	r0, [r7, #4]
    {
      return Type::kRam;
    1bda:	2300      	movs	r3, #0
    }
    1bdc:	4618      	mov	r0, r3
    1bde:	370c      	adds	r7, #12
    1be0:	46bd      	mov	sp, r7
    1be2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1be6:	4770      	bx	lr

00001be8 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Initialize()>:
    Returns<void> Initialize() override
    1be8:	b580      	push	{r7, lr}
    1bea:	b082      	sub	sp, #8
    1bec:	af00      	add	r7, sp, #0
    1bee:	6078      	str	r0, [r7, #4]
    1bf0:	6039      	str	r1, [r7, #0]
    {
      return {};
    1bf2:	687b      	ldr	r3, [r7, #4]
    1bf4:	4618      	mov	r0, r3
    1bf6:	2328      	movs	r3, #40	; 0x28
    1bf8:	461a      	mov	r2, r3
    1bfa:	2100      	movs	r1, #0
    1bfc:	f005 f9e2 	bl	6fc4 <memset>
    1c00:	6878      	ldr	r0, [r7, #4]
    1c02:	f7ff ffd9 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1c06:	6878      	ldr	r0, [r7, #4]
    1c08:	3708      	adds	r7, #8
    1c0a:	46bd      	mov	sp, r7
    1c0c:	bd80      	pop	{r7, pc}

00001c0e <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::IsMediaPresent()>:
    bool IsMediaPresent() override
    1c0e:	b480      	push	{r7}
    1c10:	b083      	sub	sp, #12
    1c12:	af00      	add	r7, sp, #0
    1c14:	6078      	str	r0, [r7, #4]
    {
      return {};
    1c16:	2300      	movs	r3, #0
    }
    1c18:	4618      	mov	r0, r3
    1c1a:	370c      	adds	r7, #12
    1c1c:	46bd      	mov	sp, r7
    1c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c22:	4770      	bx	lr

00001c24 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Enable()>:
    Returns<void> Enable() override
    1c24:	b580      	push	{r7, lr}
    1c26:	b082      	sub	sp, #8
    1c28:	af00      	add	r7, sp, #0
    1c2a:	6078      	str	r0, [r7, #4]
    1c2c:	6039      	str	r1, [r7, #0]
    {
      return {};
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	4618      	mov	r0, r3
    1c32:	2328      	movs	r3, #40	; 0x28
    1c34:	461a      	mov	r2, r3
    1c36:	2100      	movs	r1, #0
    1c38:	f005 f9c4 	bl	6fc4 <memset>
    1c3c:	6878      	ldr	r0, [r7, #4]
    1c3e:	f7ff ffbb 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1c42:	6878      	ldr	r0, [r7, #4]
    1c44:	3708      	adds	r7, #8
    1c46:	46bd      	mov	sp, r7
    1c48:	bd80      	pop	{r7, pc}

00001c4a <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::IsReadOnly()>:
    bool IsReadOnly() override
    1c4a:	b480      	push	{r7}
    1c4c:	b083      	sub	sp, #12
    1c4e:	af00      	add	r7, sp, #0
    1c50:	6078      	str	r0, [r7, #4]
    {
      return {};
    1c52:	2300      	movs	r3, #0
    }
    1c54:	4618      	mov	r0, r3
    1c56:	370c      	adds	r7, #12
    1c58:	46bd      	mov	sp, r7
    1c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c5e:	4770      	bx	lr

00001c60 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetCapacity()>:
    units::data::byte_t GetCapacity() override
    1c60:	b580      	push	{r7, lr}
    1c62:	b082      	sub	sp, #8
    1c64:	af00      	add	r7, sp, #0
    1c66:	6078      	str	r0, [r7, #4]
    {
      return 0_B;
    1c68:	f04f 0000 	mov.w	r0, #0
    1c6c:	f04f 0100 	mov.w	r1, #0
    1c70:	f7ff feb6 	bl	19e0 <units::literals::operator"" _B(unsigned long long)>
    1c74:	4603      	mov	r3, r0
    }
    1c76:	4618      	mov	r0, r3
    1c78:	3708      	adds	r7, #8
    1c7a:	46bd      	mov	sp, r7
    1c7c:	bd80      	pop	{r7, pc}

00001c7e <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::GetBlockSize()>:
    units::data::byte_t GetBlockSize() override
    1c7e:	b580      	push	{r7, lr}
    1c80:	b082      	sub	sp, #8
    1c82:	af00      	add	r7, sp, #0
    1c84:	6078      	str	r0, [r7, #4]
    {
      return 0_B;
    1c86:	f04f 0000 	mov.w	r0, #0
    1c8a:	f04f 0100 	mov.w	r1, #0
    1c8e:	f7ff fea7 	bl	19e0 <units::literals::operator"" _B(unsigned long long)>
    1c92:	4603      	mov	r3, r0
    }
    1c94:	4618      	mov	r0, r3
    1c96:	3708      	adds	r7, #8
    1c98:	46bd      	mov	sp, r7
    1c9a:	bd80      	pop	{r7, pc}

00001c9c <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Erase(unsigned long, unsigned int)>:
    Returns<void> Erase(uint32_t, size_t) override
    1c9c:	b580      	push	{r7, lr}
    1c9e:	b084      	sub	sp, #16
    1ca0:	af00      	add	r7, sp, #0
    1ca2:	60f8      	str	r0, [r7, #12]
    1ca4:	60b9      	str	r1, [r7, #8]
    1ca6:	607a      	str	r2, [r7, #4]
    1ca8:	603b      	str	r3, [r7, #0]
    {
      return {};
    1caa:	68fb      	ldr	r3, [r7, #12]
    1cac:	4618      	mov	r0, r3
    1cae:	2328      	movs	r3, #40	; 0x28
    1cb0:	461a      	mov	r2, r3
    1cb2:	2100      	movs	r1, #0
    1cb4:	f005 f986 	bl	6fc4 <memset>
    1cb8:	68f8      	ldr	r0, [r7, #12]
    1cba:	f7ff ff7d 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1cbe:	68f8      	ldr	r0, [r7, #12]
    1cc0:	3710      	adds	r7, #16
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bd80      	pop	{r7, pc}

00001cc6 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Write(unsigned long, void const*, unsigned int)>:
    Returns<void> Write(uint32_t, const void *, size_t) override
    1cc6:	b580      	push	{r7, lr}
    1cc8:	b084      	sub	sp, #16
    1cca:	af00      	add	r7, sp, #0
    1ccc:	60f8      	str	r0, [r7, #12]
    1cce:	60b9      	str	r1, [r7, #8]
    1cd0:	607a      	str	r2, [r7, #4]
    1cd2:	603b      	str	r3, [r7, #0]
    {
      return {};
    1cd4:	68fb      	ldr	r3, [r7, #12]
    1cd6:	4618      	mov	r0, r3
    1cd8:	2328      	movs	r3, #40	; 0x28
    1cda:	461a      	mov	r2, r3
    1cdc:	2100      	movs	r1, #0
    1cde:	f005 f971 	bl	6fc4 <memset>
    1ce2:	68f8      	ldr	r0, [r7, #12]
    1ce4:	f7ff ff68 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1ce8:	68f8      	ldr	r0, [r7, #12]
    1cea:	3710      	adds	r7, #16
    1cec:	46bd      	mov	sp, r7
    1cee:	bd80      	pop	{r7, pc}

00001cf0 <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Read(unsigned long, void*, unsigned int)>:
    Returns<void> Read(uint32_t, void *, size_t) override
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b084      	sub	sp, #16
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	60f8      	str	r0, [r7, #12]
    1cf8:	60b9      	str	r1, [r7, #8]
    1cfa:	607a      	str	r2, [r7, #4]
    1cfc:	603b      	str	r3, [r7, #0]
    {
      return {};
    1cfe:	68fb      	ldr	r3, [r7, #12]
    1d00:	4618      	mov	r0, r3
    1d02:	2328      	movs	r3, #40	; 0x28
    1d04:	461a      	mov	r2, r3
    1d06:	2100      	movs	r1, #0
    1d08:	f005 f95c 	bl	6fc4 <memset>
    1d0c:	68f8      	ldr	r0, [r7, #12]
    1d0e:	f7ff ff53 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1d12:	68f8      	ldr	r0, [r7, #12]
    1d14:	3710      	adds	r7, #16
    1d16:	46bd      	mov	sp, r7
    1d18:	bd80      	pop	{r7, pc}

00001d1a <sjsu::GetInactive<sjsu::Storage>()::InactiveStorage::Disable()>:
    Returns<void> Disable() override
    1d1a:	b580      	push	{r7, lr}
    1d1c:	b082      	sub	sp, #8
    1d1e:	af00      	add	r7, sp, #0
    1d20:	6078      	str	r0, [r7, #4]
    1d22:	6039      	str	r1, [r7, #0]
    {
      return {};
    1d24:	687b      	ldr	r3, [r7, #4]
    1d26:	4618      	mov	r0, r3
    1d28:	2328      	movs	r3, #40	; 0x28
    1d2a:	461a      	mov	r2, r3
    1d2c:	2100      	movs	r1, #0
    1d2e:	f005 f949 	bl	6fc4 <memset>
    1d32:	6878      	ldr	r0, [r7, #4]
    1d34:	f7ff ff40 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
    }
    1d38:	6878      	ldr	r0, [r7, #4]
    1d3a:	3708      	adds	r7, #8
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}

00001d40 <sjsu::Storage& sjsu::GetInactive<sjsu::Storage>()>:
{
    1d40:	b480      	push	{r7}
    1d42:	af00      	add	r7, sp, #0
  };

  static InactiveStorage inactive;
  return inactive;
    1d44:	4b02      	ldr	r3, [pc, #8]	; (1d50 <sjsu::Storage& sjsu::GetInactive<sjsu::Storage>()+0x10>)
}
    1d46:	4618      	mov	r0, r3
    1d48:	46bd      	mov	sp, r7
    1d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4e:	4770      	bx	lr
    1d50:	10000004 	.word	0x10000004

00001d54 <(anonymous namespace)::FatfsDevice_t::FatfsDevice_t()>:

namespace
{
sjsu::Storage & empty_storage = sjsu::GetInactive<sjsu::Storage>();

struct FatfsDevice_t
    1d54:	b480      	push	{r7}
    1d56:	b083      	sub	sp, #12
    1d58:	af00      	add	r7, sp, #0
    1d5a:	6078      	str	r0, [r7, #4]
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	2200      	movs	r2, #0
    1d60:	701a      	strb	r2, [r3, #0]
    1d62:	4b05      	ldr	r3, [pc, #20]	; (1d78 <(anonymous namespace)::FatfsDevice_t::FatfsDevice_t()+0x24>)
    1d64:	681a      	ldr	r2, [r3, #0]
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	605a      	str	r2, [r3, #4]
    1d6a:	687b      	ldr	r3, [r7, #4]
    1d6c:	4618      	mov	r0, r3
    1d6e:	370c      	adds	r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d76:	4770      	bx	lr
    1d78:	10000160 	.word	0x10000160

00001d7c <std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()>:
    struct array
    1d7c:	b5b0      	push	{r4, r5, r7, lr}
    1d7e:	b082      	sub	sp, #8
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	2500      	movs	r5, #0
    1d88:	461c      	mov	r4, r3
    1d8a:	2d00      	cmp	r5, #0
    1d8c:	db09      	blt.n	1da2 <std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()+0x26>
    1d8e:	2300      	movs	r3, #0
    1d90:	7023      	strb	r3, [r4, #0]
    1d92:	2300      	movs	r3, #0
    1d94:	6063      	str	r3, [r4, #4]
    1d96:	4620      	mov	r0, r4
    1d98:	f7ff ffdc 	bl	1d54 <(anonymous namespace)::FatfsDevice_t::FatfsDevice_t()>
    1d9c:	3408      	adds	r4, #8
    1d9e:	3d01      	subs	r5, #1
    1da0:	e7f3      	b.n	1d8a <std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()+0xe>
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	4618      	mov	r0, r3
    1da6:	3708      	adds	r7, #8
    1da8:	46bd      	mov	sp, r7
    1daa:	bdb0      	pop	{r4, r5, r7, pc}

00001dac <std::basic_string_view<char, std::char_traits<char> >::data() const>:
	// __glibcxx_assert(this->_M_len > 0);
	return *(this->_M_str + this->_M_len - 1);
      }

      constexpr const_pointer
      data() const noexcept
    1dac:	b480      	push	{r7}
    1dae:	b083      	sub	sp, #12
    1db0:	af00      	add	r7, sp, #0
    1db2:	6078      	str	r0, [r7, #4]
      { return this->_M_str; }
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	685b      	ldr	r3, [r3, #4]
    1db8:	4618      	mov	r0, r3
    1dba:	370c      	adds	r7, #12
    1dbc:	46bd      	mov	sp, r7
    1dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc2:	4770      	bx	lr

00001dc4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<1ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    1dc4:	b580      	push	{r7, lr}
    1dc6:	b082      	sub	sp, #8
    1dc8:	af00      	add	r7, sp, #0
    1dca:	6078      	str	r0, [r7, #4]
    1dcc:	ed87 0a00 	vstr	s0, [r7]
    1dd0:	687b      	ldr	r3, [r7, #4]
    1dd2:	463a      	mov	r2, r7
    1dd4:	4611      	mov	r1, r2
    1dd6:	4618      	mov	r0, r3
    1dd8:	f7ff fe18 	bl	1a0c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    1ddc:	687b      	ldr	r3, [r7, #4]
    1dde:	4618      	mov	r0, r3
    1de0:	3708      	adds	r7, #8
    1de2:	46bd      	mov	sp, r7
    1de4:	bd80      	pop	{r7, pc}

00001de6 <tl::unexpected<sjsu::Error_t>::unexpected(sjsu::Error_t&&)>:
  constexpr explicit unexpected(E &&e) : m_val(std::move(e)) {}
    1de6:	b5b0      	push	{r4, r5, r7, lr}
    1de8:	b082      	sub	sp, #8
    1dea:	af00      	add	r7, sp, #0
    1dec:	6078      	str	r0, [r7, #4]
    1dee:	6039      	str	r1, [r7, #0]
    1df0:	6838      	ldr	r0, [r7, #0]
    1df2:	f000 f89e 	bl	1f32 <std::remove_reference<sjsu::Error_t&>::type&& std::move<sjsu::Error_t&>(sjsu::Error_t&)>
    1df6:	4602      	mov	r2, r0
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	461c      	mov	r4, r3
    1dfc:	4615      	mov	r5, r2
    1dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1e06:	682b      	ldr	r3, [r5, #0]
    1e08:	6023      	str	r3, [r4, #0]
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	4618      	mov	r0, r3
    1e0e:	3708      	adds	r7, #8
    1e10:	46bd      	mov	sp, r7
    1e12:	bdb0      	pop	{r4, r5, r7, pc}

00001e14 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	ee07 3a90 	vmov	s15, r3
    1e24:	eeb0 0a67 	vmov.f32	s0, s15
    1e28:	370c      	adds	r7, #12
    1e2a:	46bd      	mov	sp, r7
    1e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e30:	4770      	bx	lr

00001e32 <tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base()>:
  TL_EXPECTED_MSVC2015_CONSTEXPR expected_storage_base() : m_has_val(true) {}
    1e32:	b480      	push	{r7}
    1e34:	b083      	sub	sp, #12
    1e36:	af00      	add	r7, sp, #0
    1e38:	6078      	str	r0, [r7, #4]
    1e3a:	687b      	ldr	r3, [r7, #4]
    1e3c:	2201      	movs	r2, #1
    1e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	4618      	mov	r0, r3
    1e46:	370c      	adds	r7, #12
    1e48:	46bd      	mov	sp, r7
    1e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e4e:	4770      	bx	lr

00001e50 <tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  using expected_storage_base<void, E>::expected_storage_base;
    1e50:	b590      	push	{r4, r7, lr}
    1e52:	b085      	sub	sp, #20
    1e54:	af00      	add	r7, sp, #0
    1e56:	60f8      	str	r0, [r7, #12]
    1e58:	7239      	strb	r1, [r7, #8]
    1e5a:	607a      	str	r2, [r7, #4]
    1e5c:	68fb      	ldr	r3, [r7, #12]
    1e5e:	687a      	ldr	r2, [r7, #4]
    1e60:	4621      	mov	r1, r4
    1e62:	4618      	mov	r0, r3
    1e64:	f000 f886 	bl	1f74 <tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	4618      	mov	r0, r3
    1e6c:	3714      	adds	r7, #20
    1e6e:	46bd      	mov	sp, r7
    1e70:	bd90      	pop	{r4, r7, pc}

00001e72 <tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  using expected_operations_base<T, E>::expected_operations_base;
    1e72:	b590      	push	{r4, r7, lr}
    1e74:	b085      	sub	sp, #20
    1e76:	af00      	add	r7, sp, #0
    1e78:	60f8      	str	r0, [r7, #12]
    1e7a:	7239      	strb	r1, [r7, #8]
    1e7c:	607a      	str	r2, [r7, #4]
    1e7e:	68fb      	ldr	r3, [r7, #12]
    1e80:	687a      	ldr	r2, [r7, #4]
    1e82:	4621      	mov	r1, r4
    1e84:	4618      	mov	r0, r3
    1e86:	f7ff ffe3 	bl	1e50 <tl::detail::expected_operations_base<void, sjsu::Error_t>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1e8a:	68fb      	ldr	r3, [r7, #12]
    1e8c:	4618      	mov	r0, r3
    1e8e:	3714      	adds	r7, #20
    1e90:	46bd      	mov	sp, r7
    1e92:	bd90      	pop	{r4, r7, pc}

00001e94 <tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  using expected_copy_base<T, E>::expected_copy_base;
    1e94:	b590      	push	{r4, r7, lr}
    1e96:	b085      	sub	sp, #20
    1e98:	af00      	add	r7, sp, #0
    1e9a:	60f8      	str	r0, [r7, #12]
    1e9c:	7239      	strb	r1, [r7, #8]
    1e9e:	607a      	str	r2, [r7, #4]
    1ea0:	68fb      	ldr	r3, [r7, #12]
    1ea2:	687a      	ldr	r2, [r7, #4]
    1ea4:	4621      	mov	r1, r4
    1ea6:	4618      	mov	r0, r3
    1ea8:	f7ff ffe3 	bl	1e72 <tl::detail::expected_copy_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1eac:	68fb      	ldr	r3, [r7, #12]
    1eae:	4618      	mov	r0, r3
    1eb0:	3714      	adds	r7, #20
    1eb2:	46bd      	mov	sp, r7
    1eb4:	bd90      	pop	{r4, r7, pc}

00001eb6 <tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  using expected_move_base<T, E>::expected_move_base;
    1eb6:	b590      	push	{r4, r7, lr}
    1eb8:	b085      	sub	sp, #20
    1eba:	af00      	add	r7, sp, #0
    1ebc:	60f8      	str	r0, [r7, #12]
    1ebe:	7239      	strb	r1, [r7, #8]
    1ec0:	607a      	str	r2, [r7, #4]
    1ec2:	68fb      	ldr	r3, [r7, #12]
    1ec4:	687a      	ldr	r2, [r7, #4]
    1ec6:	4621      	mov	r1, r4
    1ec8:	4618      	mov	r0, r3
    1eca:	f7ff ffe3 	bl	1e94 <tl::detail::expected_move_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1ece:	68fb      	ldr	r3, [r7, #12]
    1ed0:	4618      	mov	r0, r3
    1ed2:	3714      	adds	r7, #20
    1ed4:	46bd      	mov	sp, r7
    1ed6:	bd90      	pop	{r4, r7, pc}

00001ed8 <tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  using expected_copy_assign_base<T, E>::expected_copy_assign_base;
    1ed8:	b590      	push	{r4, r7, lr}
    1eda:	b085      	sub	sp, #20
    1edc:	af00      	add	r7, sp, #0
    1ede:	60f8      	str	r0, [r7, #12]
    1ee0:	7239      	strb	r1, [r7, #8]
    1ee2:	607a      	str	r2, [r7, #4]
    1ee4:	68fb      	ldr	r3, [r7, #12]
    1ee6:	687a      	ldr	r2, [r7, #4]
    1ee8:	4621      	mov	r1, r4
    1eea:	4618      	mov	r0, r3
    1eec:	f7ff ffe3 	bl	1eb6 <tl::detail::expected_copy_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1ef0:	68fb      	ldr	r3, [r7, #12]
    1ef2:	4618      	mov	r0, r3
    1ef4:	3714      	adds	r7, #20
    1ef6:	46bd      	mov	sp, r7
    1ef8:	bd90      	pop	{r4, r7, pc}

00001efa <tl::expected<void, sjsu::Error_t>::expected<sjsu::Error_t, (void*)0, (void*)0>(tl::unexpected<sjsu::Error_t>&&)>:

    template <
      class G = E,
      detail::enable_if_t<std::is_constructible<E, G &&>::value> * = nullptr,
      detail::enable_if_t<std::is_convertible<G &&, E>::value> * = nullptr>
  constexpr expected(unexpected<G> &&e) noexcept(
    1efa:	b5f0      	push	{r4, r5, r6, r7, lr}
    1efc:	b083      	sub	sp, #12
    1efe:	af00      	add	r7, sp, #0
    1f00:	6078      	str	r0, [r7, #4]
    1f02:	6039      	str	r1, [r7, #0]
      std::is_nothrow_constructible<E, G &&>::value)
      : impl_base(unexpect, std::move(e.value())),
        ctor_base(detail::default_constructor_tag{}) {}
    1f04:	687c      	ldr	r4, [r7, #4]
      : impl_base(unexpect, std::move(e.value())),
    1f06:	6838      	ldr	r0, [r7, #0]
    1f08:	f000 f81e 	bl	1f48 <tl::unexpected<sjsu::Error_t>::value() &>
    1f0c:	4603      	mov	r3, r0
    1f0e:	4618      	mov	r0, r3
    1f10:	f000 f80f 	bl	1f32 <std::remove_reference<sjsu::Error_t&>::type&& std::move<sjsu::Error_t&>(sjsu::Error_t&)>
    1f14:	4603      	mov	r3, r0
        ctor_base(detail::default_constructor_tag{}) {}
    1f16:	461a      	mov	r2, r3
    1f18:	4631      	mov	r1, r6
    1f1a:	4620      	mov	r0, r4
    1f1c:	f7ff ffdc 	bl	1ed8 <tl::detail::expected_move_assign_base<void, sjsu::Error_t, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>
    1f20:	4629      	mov	r1, r5
    1f22:	6878      	ldr	r0, [r7, #4]
    1f24:	f000 f83e 	bl	1fa4 <tl::detail::expected_default_ctor_base<void, sjsu::Error_t, true>::expected_default_ctor_base(tl::detail::default_constructor_tag)>
    1f28:	687b      	ldr	r3, [r7, #4]
    1f2a:	4618      	mov	r0, r3
    1f2c:	370c      	adds	r7, #12
    1f2e:	46bd      	mov	sp, r7
    1f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f32 <std::remove_reference<sjsu::Error_t&>::type&& std::move<sjsu::Error_t&>(sjsu::Error_t&)>:
    move(_Tp&& __t) noexcept
    1f32:	b480      	push	{r7}
    1f34:	b083      	sub	sp, #12
    1f36:	af00      	add	r7, sp, #0
    1f38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	4618      	mov	r0, r3
    1f3e:	370c      	adds	r7, #12
    1f40:	46bd      	mov	sp, r7
    1f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f46:	4770      	bx	lr

00001f48 <tl::unexpected<sjsu::Error_t>::value() &>:
  TL_EXPECTED_11_CONSTEXPR E &value() & { return m_val; }
    1f48:	b480      	push	{r7}
    1f4a:	b083      	sub	sp, #12
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	4618      	mov	r0, r3
    1f54:	370c      	adds	r7, #12
    1f56:	46bd      	mov	sp, r7
    1f58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f5c:	4770      	bx	lr

00001f5e <sjsu::Error_t&& std::forward<sjsu::Error_t>(std::remove_reference<sjsu::Error_t>::type&)>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    1f5e:	b480      	push	{r7}
    1f60:	b083      	sub	sp, #12
    1f62:	af00      	add	r7, sp, #0
    1f64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	4618      	mov	r0, r3
    1f6a:	370c      	adds	r7, #12
    1f6c:	46bd      	mov	sp, r7
    1f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f72:	4770      	bx	lr

00001f74 <tl::detail::expected_storage_base<void, sjsu::Error_t, false, true>::expected_storage_base<sjsu::Error_t, (void*)0>(tl::unexpect_t, sjsu::Error_t&&)>:
  constexpr explicit expected_storage_base(unexpect_t, Args &&... args)
    1f74:	b590      	push	{r4, r7, lr}
    1f76:	b085      	sub	sp, #20
    1f78:	af00      	add	r7, sp, #0
    1f7a:	60f8      	str	r0, [r7, #12]
    1f7c:	7239      	strb	r1, [r7, #8]
    1f7e:	607a      	str	r2, [r7, #4]
      : m_unexpect(std::forward<Args>(args)...), m_has_val(false) {}
    1f80:	68fc      	ldr	r4, [r7, #12]
    1f82:	6878      	ldr	r0, [r7, #4]
    1f84:	f7ff ffeb 	bl	1f5e <sjsu::Error_t&& std::forward<sjsu::Error_t>(std::remove_reference<sjsu::Error_t>::type&)>
    1f88:	4603      	mov	r3, r0
    1f8a:	4619      	mov	r1, r3
    1f8c:	4620      	mov	r0, r4
    1f8e:	f7ff ff2a 	bl	1de6 <tl::unexpected<sjsu::Error_t>::unexpected(sjsu::Error_t&&)>
    1f92:	68fb      	ldr	r3, [r7, #12]
    1f94:	2200      	movs	r2, #0
    1f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    1f9a:	68fb      	ldr	r3, [r7, #12]
    1f9c:	4618      	mov	r0, r3
    1f9e:	3714      	adds	r7, #20
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bd90      	pop	{r4, r7, pc}

00001fa4 <tl::detail::expected_default_ctor_base<void, sjsu::Error_t, true>::expected_default_ctor_base(tl::detail::default_constructor_tag)>:
  constexpr explicit expected_default_ctor_base(default_constructor_tag) {}
    1fa4:	b480      	push	{r7}
    1fa6:	b083      	sub	sp, #12
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
    1fac:	7039      	strb	r1, [r7, #0]
    1fae:	687b      	ldr	r3, [r7, #4]
    1fb0:	4618      	mov	r0, r3
    1fb2:	370c      	adds	r7, #12
    1fb4:	46bd      	mov	sp, r7
    1fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fba:	4770      	bx	lr

00001fbc <__static_initialization_and_destruction_0(int, int)>:
extern "C" DRESULT disk_ioctl([[maybe_unused]] BYTE drive_number,
                              [[maybe_unused]] BYTE command,
                              [[maybe_unused]] void * buffer)
{
  return RES_PARERR;
}
    1fbc:	b580      	push	{r7, lr}
    1fbe:	b082      	sub	sp, #8
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	6078      	str	r0, [r7, #4]
    1fc4:	6039      	str	r1, [r7, #0]
    1fc6:	687b      	ldr	r3, [r7, #4]
    1fc8:	2b01      	cmp	r3, #1
    1fca:	d12a      	bne.n	2022 <__static_initialization_and_destruction_0(int, int)+0x66>
    1fcc:	683b      	ldr	r3, [r7, #0]
    1fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fd2:	4293      	cmp	r3, r2
    1fd4:	d125      	bne.n	2022 <__static_initialization_and_destruction_0(int, int)+0x66>

  /// A pointer holding the address to the LPC40xx PIN peripheral.
  /// This variable is a dependency injection point for unit testing thus it is
  /// public and mutable. This is needed to perform the "test by side effect"
  /// technique for this class.
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    1fd6:	4b15      	ldr	r3, [pc, #84]	; (202c <__static_initialization_and_destruction_0(int, int)+0x70>)
    1fd8:	681b      	ldr	r3, [r3, #0]
    1fda:	f003 0301 	and.w	r3, r3, #1
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d105      	bne.n	1fee <__static_initialization_and_destruction_0(int, int)+0x32>
    1fe2:	4b12      	ldr	r3, [pc, #72]	; (202c <__static_initialization_and_destruction_0(int, int)+0x70>)
    1fe4:	2201      	movs	r2, #1
    1fe6:	601a      	str	r2, [r3, #0]
    1fe8:	4a11      	ldr	r2, [pc, #68]	; (2030 <__static_initialization_and_destruction_0(int, int)+0x74>)
    1fea:	4b12      	ldr	r3, [pc, #72]	; (2034 <__static_initialization_and_destruction_0(int, int)+0x78>)
    1fec:	601a      	str	r2, [r3, #0]
    1fee:	4b12      	ldr	r3, [pc, #72]	; (2038 <__static_initialization_and_destruction_0(int, int)+0x7c>)
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	f003 0301 	and.w	r3, r3, #1
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d10b      	bne.n	2012 <__static_initialization_and_destruction_0(int, int)+0x56>
    1ffa:	4b0f      	ldr	r3, [pc, #60]	; (2038 <__static_initialization_and_destruction_0(int, int)+0x7c>)
    1ffc:	2201      	movs	r2, #1
    1ffe:	601a      	str	r2, [r3, #0]
    2000:	490e      	ldr	r1, [pc, #56]	; (203c <__static_initialization_and_destruction_0(int, int)+0x80>)
    2002:	480f      	ldr	r0, [pc, #60]	; (2040 <__static_initialization_and_destruction_0(int, int)+0x84>)
    2004:	f7fe fd5a 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2008:	4a0e      	ldr	r2, [pc, #56]	; (2044 <__static_initialization_and_destruction_0(int, int)+0x88>)
    200a:	490f      	ldr	r1, [pc, #60]	; (2048 <__static_initialization_and_destruction_0(int, int)+0x8c>)
    200c:	480c      	ldr	r0, [pc, #48]	; (2040 <__static_initialization_and_destruction_0(int, int)+0x84>)
    200e:	f004 fc53 	bl	68b8 <__aeabi_atexit>
sjsu::Storage & empty_storage = sjsu::GetInactive<sjsu::Storage>();
    2012:	f7ff fe95 	bl	1d40 <sjsu::Storage& sjsu::GetInactive<sjsu::Storage>()>
    2016:	4603      	mov	r3, r0
    2018:	4a0c      	ldr	r2, [pc, #48]	; (204c <__static_initialization_and_destruction_0(int, int)+0x90>)
    201a:	6013      	str	r3, [r2, #0]
std::array<FatfsDevice_t, config::kFatDriveCount> drive;
    201c:	480c      	ldr	r0, [pc, #48]	; (2050 <__static_initialization_and_destruction_0(int, int)+0x94>)
    201e:	f7ff fead 	bl	1d7c <std::array<(anonymous namespace)::FatfsDevice_t, 1u>::array()>
}
    2022:	bf00      	nop
    2024:	3708      	adds	r7, #8
    2026:	46bd      	mov	sp, r7
    2028:	bd80      	pop	{r7, pc}
    202a:	bf00      	nop
    202c:	1000016c 	.word	0x1000016c
    2030:	4002c000 	.word	0x4002c000
    2034:	1000015c 	.word	0x1000015c
    2038:	10000158 	.word	0x10000158
    203c:	000007f5 	.word	0x000007f5
    2040:	10000148 	.word	0x10000148
    2044:	10000000 	.word	0x10000000
    2048:	0000083d 	.word	0x0000083d
    204c:	10000160 	.word	0x10000160
    2050:	10000164 	.word	0x10000164

00002054 <_GLOBAL__sub_I__ZN4sjsu18RegisterFatFsDriveEPNS_7StorageEh>:
    2054:	b580      	push	{r7, lr}
    2056:	af00      	add	r7, sp, #0
    2058:	f64f 71ff 	movw	r1, #65535	; 0xffff
    205c:	2001      	movs	r0, #1
    205e:	f7ff ffad 	bl	1fbc <__static_initialization_and_destruction_0(int, int)>
    2062:	bd80      	pop	{r7, pc}

00002064 <sjsu::InitializeDataSection()>:

namespace sjsu
{
/// Copies the defined variabes within the .data section in ROM into RAM
inline void InitializeDataSection()
{
    2064:	b480      	push	{r7}
    2066:	b085      	sub	sp, #20
    2068:	af00      	add	r7, sp, #0
  uint32_t * rom_location = data_section_table[0].rom_location;
    206a:	4b12      	ldr	r3, [pc, #72]	; (20b4 <sjsu::InitializeDataSection()+0x50>)
    206c:	681b      	ldr	r3, [r3, #0]
    206e:	60bb      	str	r3, [r7, #8]
  uint32_t * ram_location = data_section_table[0].ram_location;
    2070:	4b10      	ldr	r3, [pc, #64]	; (20b4 <sjsu::InitializeDataSection()+0x50>)
    2072:	685b      	ldr	r3, [r3, #4]
    2074:	607b      	str	r3, [r7, #4]
  uint32_t length         = data_section_table[0].length / sizeof(uint32_t);
    2076:	4b0f      	ldr	r3, [pc, #60]	; (20b4 <sjsu::InitializeDataSection()+0x50>)
    2078:	689b      	ldr	r3, [r3, #8]
    207a:	089b      	lsrs	r3, r3, #2
    207c:	603b      	str	r3, [r7, #0]
  for (size_t j = 0; j < length; j++)
    207e:	2300      	movs	r3, #0
    2080:	60fb      	str	r3, [r7, #12]
    2082:	68fa      	ldr	r2, [r7, #12]
    2084:	683b      	ldr	r3, [r7, #0]
    2086:	429a      	cmp	r2, r3
    2088:	d20d      	bcs.n	20a6 <sjsu::InitializeDataSection()+0x42>
  {
    ram_location[j] = rom_location[j];
    208a:	68fb      	ldr	r3, [r7, #12]
    208c:	009b      	lsls	r3, r3, #2
    208e:	68ba      	ldr	r2, [r7, #8]
    2090:	441a      	add	r2, r3
    2092:	68fb      	ldr	r3, [r7, #12]
    2094:	009b      	lsls	r3, r3, #2
    2096:	6879      	ldr	r1, [r7, #4]
    2098:	440b      	add	r3, r1
    209a:	6812      	ldr	r2, [r2, #0]
    209c:	601a      	str	r2, [r3, #0]
  for (size_t j = 0; j < length; j++)
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	3301      	adds	r3, #1
    20a2:	60fb      	str	r3, [r7, #12]
    20a4:	e7ed      	b.n	2082 <sjsu::InitializeDataSection()+0x1e>
  }
}
    20a6:	bf00      	nop
    20a8:	3714      	adds	r7, #20
    20aa:	46bd      	mov	sp, r7
    20ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    20b0:	4770      	bx	lr
    20b2:	bf00      	nop
    20b4:	000000e4 	.word	0x000000e4

000020b8 <sjsu::InitializeBssSection()>:
/// Initializes the .bss section of RAM. The STD C libraries assume that BSS is
/// set to zero and will fault otherwise.
inline void InitializeBssSection()
{
    20b8:	b480      	push	{r7}
    20ba:	b085      	sub	sp, #20
    20bc:	af00      	add	r7, sp, #0
  uint32_t * ram_location = bss_section_table[0].ram_location;
    20be:	4b0e      	ldr	r3, [pc, #56]	; (20f8 <sjsu::InitializeBssSection()+0x40>)
    20c0:	681b      	ldr	r3, [r3, #0]
    20c2:	60bb      	str	r3, [r7, #8]
  uint32_t length         = bss_section_table[0].length / sizeof(uint32_t);
    20c4:	4b0c      	ldr	r3, [pc, #48]	; (20f8 <sjsu::InitializeBssSection()+0x40>)
    20c6:	685b      	ldr	r3, [r3, #4]
    20c8:	089b      	lsrs	r3, r3, #2
    20ca:	607b      	str	r3, [r7, #4]
  for (size_t j = 0; j < length; j++)
    20cc:	2300      	movs	r3, #0
    20ce:	60fb      	str	r3, [r7, #12]
    20d0:	68fa      	ldr	r2, [r7, #12]
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	429a      	cmp	r2, r3
    20d6:	d209      	bcs.n	20ec <sjsu::InitializeBssSection()+0x34>
  {
    ram_location[j] = 0;
    20d8:	68fb      	ldr	r3, [r7, #12]
    20da:	009b      	lsls	r3, r3, #2
    20dc:	68ba      	ldr	r2, [r7, #8]
    20de:	4413      	add	r3, r2
    20e0:	2200      	movs	r2, #0
    20e2:	601a      	str	r2, [r3, #0]
  for (size_t j = 0; j < length; j++)
    20e4:	68fb      	ldr	r3, [r7, #12]
    20e6:	3301      	adds	r3, #1
    20e8:	60fb      	str	r3, [r7, #12]
    20ea:	e7f1      	b.n	20d0 <sjsu::InitializeBssSection()+0x18>
  }
}
    20ec:	bf00      	nop
    20ee:	3714      	adds	r7, #20
    20f0:	46bd      	mov	sp, r7
    20f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    20f6:	4770      	bx	lr
    20f8:	000000fc 	.word	0x000000fc

000020fc <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    20fc:	b580      	push	{r7, lr}
    20fe:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    2100:	f7ff ffb0 	bl	2064 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    2104:	f7ff ffd8 	bl	20b8 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    2108:	f004 ff1e 	bl	6f48 <__libc_init_array>
}
    210c:	bf00      	nop
    210e:	bd80      	pop	{r7, pc}

00002110 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param final_address - when this address is spotted, terminate the backtrace
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    2110:	b480      	push	{r7}
    2112:	b083      	sub	sp, #12
    2114:	af00      	add	r7, sp, #0
    2116:	4603      	mov	r3, r0
    2118:	6039      	str	r1, [r7, #0]
    211a:	71fb      	strb	r3, [r7, #7]
      printf(
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    211c:	bf00      	nop
    211e:	370c      	adds	r7, #12
    2120:	46bd      	mov	sp, r7
    2122:	f85d 7b04 	ldr.w	r7, [sp], #4
    2126:	4770      	bx	lr

00002128 <GetRegistersFromStack>:
#include "third_party/semihost/trace.h"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    2128:	b580      	push	{r7, lr}
    212a:	b08c      	sub	sp, #48	; 0x30
    212c:	af02      	add	r7, sp, #8
    212e:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    2130:	687b      	ldr	r3, [r7, #4]
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    2136:	687b      	ldr	r3, [r7, #4]
    2138:	685b      	ldr	r3, [r3, #4]
    213a:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	689b      	ldr	r3, [r3, #8]
    2140:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	68db      	ldr	r3, [r3, #12]
    2146:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	691b      	ldr	r3, [r3, #16]
    214c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	695b      	ldr	r3, [r3, #20]
    2152:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    2154:	687b      	ldr	r3, [r7, #4]
    2156:	699b      	ldr	r3, [r3, #24]
    2158:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    215a:	687b      	ldr	r3, [r7, #4]
    215c:	69db      	ldr	r3, [r3, #28]
    215e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    2160:	480f      	ldr	r0, [pc, #60]	; (21a0 <GetRegistersFromStack+0x78>)
    2162:	f001 f931 	bl	33c8 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    2166:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2168:	6a3a      	ldr	r2, [r7, #32]
    216a:	69f8      	ldr	r0, [r7, #28]
    216c:	69bb      	ldr	r3, [r7, #24]
    216e:	9300      	str	r3, [sp, #0]
    2170:	4603      	mov	r3, r0
    2172:	480c      	ldr	r0, [pc, #48]	; (21a4 <GetRegistersFromStack+0x7c>)
    2174:	f001 f928 	bl	33c8 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    2178:	6979      	ldr	r1, [r7, #20]
    217a:	693a      	ldr	r2, [r7, #16]
    217c:	68f8      	ldr	r0, [r7, #12]
    217e:	68bb      	ldr	r3, [r7, #8]
    2180:	9300      	str	r3, [sp, #0]
    2182:	4603      	mov	r3, r0
    2184:	4808      	ldr	r0, [pc, #32]	; (21a8 <GetRegistersFromStack+0x80>)
    2186:	f001 f91f 	bl	33c8 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    218a:	68fb      	ldr	r3, [r7, #12]
    218c:	4619      	mov	r1, r3
    218e:	2001      	movs	r0, #1
    2190:	f7ff ffbe 	bl	2110 <sjsu::debug::PrintBacktrace(bool, void*)>
    // When the following line is hit, the variables contain the register values
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
    2194:	f7ff fbd6 	bl	1944 <sjsu::Halt()>
  }
    2198:	bf00      	nop
    219a:	3728      	adds	r7, #40	; 0x28
    219c:	46bd      	mov	sp, r7
    219e:	bd80      	pop	{r7, pc}
    21a0:	00007774 	.word	0x00007774
    21a4:	000077a0 	.word	0x000077a0
    21a8:	000077d4 	.word	0x000077d4

000021ac <ArmHardFaultHandler>:

  void ArmHardFaultHandler(void)
  {
    21ac:	b480      	push	{r7}
    21ae:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    21b0:	f01e 0f04 	tst.w	lr, #4
    21b4:	bf0c      	ite	eq
    21b6:	f3ef 8008 	mrseq	r0, MSP
    21ba:	f3ef 8009 	mrsne	r0, PSP
    21be:	6981      	ldr	r1, [r0, #24]
    21c0:	4a00      	ldr	r2, [pc, #0]	; (21c4 <handler2_address_const>)
    21c2:	4710      	bx	r2

000021c4 <handler2_address_const>:
    21c4:	00002129 	.word	0x00002129
    }
  }
    21c8:	bf00      	nop
    21ca:	46bd      	mov	sp, r7
    21cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    21d0:	4770      	bx	lr
    21d2:	Address 0x00000000000021d2 is out of bounds.


000021d4 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    21d4:	b580      	push	{r7, lr}
    21d6:	b084      	sub	sp, #16
    21d8:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    21da:	4b1a      	ldr	r3, [pc, #104]	; (2244 <ArmResetHandler+0x70>)
    21dc:	60fb      	str	r3, [r7, #12]
    21de:	68fb      	ldr	r3, [r7, #12]
    21e0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    21e2:	683b      	ldr	r3, [r7, #0]
    21e4:	f383 8809 	msr	PSP, r3
}
    21e8:	bf00      	nop
    21ea:	68fb      	ldr	r3, [r7, #12]
    21ec:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    21ee:	687b      	ldr	r3, [r7, #4]
    21f0:	f383 8808 	msr	MSP, r3
}
    21f4:	bf00      	nop
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    21f6:	f7ff ff81 	bl	20fc <sjsu::SystemInitialize()>
    // Check if Debugger is connected
    {
      using sjsu::cortex::CoreDebug_Type;
      if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
    21fa:	4b13      	ldr	r3, [pc, #76]	; (2248 <ArmResetHandler+0x74>)
    21fc:	681b      	ldr	r3, [r3, #0]
    21fe:	f003 0301 	and.w	r3, r3, #1
    2202:	2b00      	cmp	r3, #0
    2204:	bf14      	ite	ne
    2206:	2301      	movne	r3, #1
    2208:	2300      	moveq	r3, #0
    220a:	b2db      	uxtb	r3, r3
    220c:	2b00      	cmp	r3, #0
    220e:	d001      	beq.n	2214 <ArmResetHandler+0x40>
      {
          trace_initialize();  // Enable debug tracing
    2210:	f001 f92c 	bl	346c <trace_initialize>
      }
    }
    sjsu::InitializePlatform();
    2214:	f003 f97a 	bl	550c <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    2218:	f7fe fbde 	bl	9d8 <main>
    221c:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    221e:	68bb      	ldr	r3, [r7, #8]
    2220:	2b00      	cmp	r3, #0
    2222:	db04      	blt.n	222e <ArmResetHandler+0x5a>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    2224:	68b9      	ldr	r1, [r7, #8]
    2226:	4809      	ldr	r0, [pc, #36]	; (224c <ArmResetHandler+0x78>)
    2228:	f001 f8ce 	bl	33c8 <printf>
    222c:	e003      	b.n	2236 <ArmResetHandler+0x62>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    222e:	68b9      	ldr	r1, [r7, #8]
    2230:	4807      	ldr	r0, [pc, #28]	; (2250 <ArmResetHandler+0x7c>)
    2232:	f001 f8c9 	bl	33c8 <printf>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    sjsu::Halt();
    2236:	f7ff fb85 	bl	1944 <sjsu::Halt()>
  }
    223a:	bf00      	nop
    223c:	3710      	adds	r7, #16
    223e:	46bd      	mov	sp, r7
    2240:	bd80      	pop	{r7, pc}
    2242:	bf00      	nop
    2244:	10010000 	.word	0x10010000
    2248:	e000edf0 	.word	0xe000edf0
    224c:	0000780c 	.word	0x0000780c
    2250:	00007840 	.word	0x00007840

00002254 <__static_initialization_and_destruction_0(int, int)>:

}  // extern "C"
    2254:	b580      	push	{r7, lr}
    2256:	b082      	sub	sp, #8
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
    225c:	6039      	str	r1, [r7, #0]
    225e:	687b      	ldr	r3, [r7, #4]
    2260:	2b01      	cmp	r3, #1
    2262:	d116      	bne.n	2292 <__static_initialization_and_destruction_0(int, int)+0x3e>
    2264:	683b      	ldr	r3, [r7, #0]
    2266:	f64f 72ff 	movw	r2, #65535	; 0xffff
    226a:	4293      	cmp	r3, r2
    226c:	d111      	bne.n	2292 <__static_initialization_and_destruction_0(int, int)+0x3e>
    226e:	4b0b      	ldr	r3, [pc, #44]	; (229c <__static_initialization_and_destruction_0(int, int)+0x48>)
    2270:	681b      	ldr	r3, [r3, #0]
    2272:	f003 0301 	and.w	r3, r3, #1
    2276:	2b00      	cmp	r3, #0
    2278:	d10b      	bne.n	2292 <__static_initialization_and_destruction_0(int, int)+0x3e>
    227a:	4b08      	ldr	r3, [pc, #32]	; (229c <__static_initialization_and_destruction_0(int, int)+0x48>)
    227c:	2201      	movs	r2, #1
    227e:	601a      	str	r2, [r3, #0]
    2280:	4907      	ldr	r1, [pc, #28]	; (22a0 <__static_initialization_and_destruction_0(int, int)+0x4c>)
    2282:	4808      	ldr	r0, [pc, #32]	; (22a4 <__static_initialization_and_destruction_0(int, int)+0x50>)
    2284:	f7fe fc1a 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    2288:	4a07      	ldr	r2, [pc, #28]	; (22a8 <__static_initialization_and_destruction_0(int, int)+0x54>)
    228a:	4908      	ldr	r1, [pc, #32]	; (22ac <__static_initialization_and_destruction_0(int, int)+0x58>)
    228c:	4805      	ldr	r0, [pc, #20]	; (22a4 <__static_initialization_and_destruction_0(int, int)+0x50>)
    228e:	f004 fb13 	bl	68b8 <__aeabi_atexit>
    2292:	bf00      	nop
    2294:	3708      	adds	r7, #8
    2296:	46bd      	mov	sp, r7
    2298:	bd80      	pop	{r7, pc}
    229a:	bf00      	nop
    229c:	10000158 	.word	0x10000158
    22a0:	000007f5 	.word	0x000007f5
    22a4:	10000148 	.word	0x10000148
    22a8:	10000000 	.word	0x10000000
    22ac:	0000083d 	.word	0x0000083d

000022b0 <_GLOBAL__sub_I_GetRegistersFromStack>:
    22b0:	b580      	push	{r7, lr}
    22b2:	af00      	add	r7, sp, #0
    22b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    22b8:	2001      	movs	r0, #1
    22ba:	f7ff ffcb 	bl	2254 <__static_initialization_and_destruction_0(int, int)>
    22be:	bd80      	pop	{r7, pc}

000022c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b084      	sub	sp, #16
    22c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    22c6:	4b28      	ldr	r3, [pc, #160]	; (2368 <vTaskSwitchContext+0xa8>)
    22c8:	681b      	ldr	r3, [r3, #0]
    22ca:	2b00      	cmp	r3, #0
    22cc:	d003      	beq.n	22d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    22ce:	4b27      	ldr	r3, [pc, #156]	; (236c <vTaskSwitchContext+0xac>)
    22d0:	2201      	movs	r2, #1
    22d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    22d4:	e043      	b.n	235e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    22d6:	4b25      	ldr	r3, [pc, #148]	; (236c <vTaskSwitchContext+0xac>)
    22d8:	2200      	movs	r2, #0
    22da:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    22dc:	f003 f90c 	bl	54f8 <ThreadRuntimeCounter>
    22e0:	4603      	mov	r3, r0
    22e2:	4a23      	ldr	r2, [pc, #140]	; (2370 <vTaskSwitchContext+0xb0>)
    22e4:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    22e6:	4b22      	ldr	r3, [pc, #136]	; (2370 <vTaskSwitchContext+0xb0>)
    22e8:	681a      	ldr	r2, [r3, #0]
    22ea:	4b22      	ldr	r3, [pc, #136]	; (2374 <vTaskSwitchContext+0xb4>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	429a      	cmp	r2, r3
    22f0:	d909      	bls.n	2306 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    22f2:	4b21      	ldr	r3, [pc, #132]	; (2378 <vTaskSwitchContext+0xb8>)
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
    22f8:	4a1d      	ldr	r2, [pc, #116]	; (2370 <vTaskSwitchContext+0xb0>)
    22fa:	6810      	ldr	r0, [r2, #0]
    22fc:	4a1d      	ldr	r2, [pc, #116]	; (2374 <vTaskSwitchContext+0xb4>)
    22fe:	6812      	ldr	r2, [r2, #0]
    2300:	1a82      	subs	r2, r0, r2
    2302:	440a      	add	r2, r1
    2304:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    2306:	4b1a      	ldr	r3, [pc, #104]	; (2370 <vTaskSwitchContext+0xb0>)
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	4a1a      	ldr	r2, [pc, #104]	; (2374 <vTaskSwitchContext+0xb4>)
    230c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    230e:	4b1b      	ldr	r3, [pc, #108]	; (237c <vTaskSwitchContext+0xbc>)
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    2314:	687b      	ldr	r3, [r7, #4]
    2316:	fab3 f383 	clz	r3, r3
    231a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    231c:	78fb      	ldrb	r3, [r7, #3]
    231e:	f1c3 031f 	rsb	r3, r3, #31
    2322:	60fb      	str	r3, [r7, #12]
    2324:	68fa      	ldr	r2, [r7, #12]
    2326:	4613      	mov	r3, r2
    2328:	009b      	lsls	r3, r3, #2
    232a:	4413      	add	r3, r2
    232c:	009b      	lsls	r3, r3, #2
    232e:	4a14      	ldr	r2, [pc, #80]	; (2380 <vTaskSwitchContext+0xc0>)
    2330:	4413      	add	r3, r2
    2332:	60bb      	str	r3, [r7, #8]
    2334:	68bb      	ldr	r3, [r7, #8]
    2336:	685b      	ldr	r3, [r3, #4]
    2338:	685a      	ldr	r2, [r3, #4]
    233a:	68bb      	ldr	r3, [r7, #8]
    233c:	605a      	str	r2, [r3, #4]
    233e:	68bb      	ldr	r3, [r7, #8]
    2340:	685a      	ldr	r2, [r3, #4]
    2342:	68bb      	ldr	r3, [r7, #8]
    2344:	3308      	adds	r3, #8
    2346:	429a      	cmp	r2, r3
    2348:	d104      	bne.n	2354 <vTaskSwitchContext+0x94>
    234a:	68bb      	ldr	r3, [r7, #8]
    234c:	685b      	ldr	r3, [r3, #4]
    234e:	685a      	ldr	r2, [r3, #4]
    2350:	68bb      	ldr	r3, [r7, #8]
    2352:	605a      	str	r2, [r3, #4]
    2354:	68bb      	ldr	r3, [r7, #8]
    2356:	685b      	ldr	r3, [r3, #4]
    2358:	68db      	ldr	r3, [r3, #12]
    235a:	4a07      	ldr	r2, [pc, #28]	; (2378 <vTaskSwitchContext+0xb8>)
    235c:	6013      	str	r3, [r2, #0]
}
    235e:	bf00      	nop
    2360:	3710      	adds	r7, #16
    2362:	46bd      	mov	sp, r7
    2364:	bd80      	pop	{r7, pc}
    2366:	bf00      	nop
    2368:	100001e0 	.word	0x100001e0
    236c:	100001dc 	.word	0x100001dc
    2370:	100001e8 	.word	0x100001e8
    2374:	100001e4 	.word	0x100001e4
    2378:	10000170 	.word	0x10000170
    237c:	100001d8 	.word	0x100001d8
    2380:	10000174 	.word	0x10000174

00002384 <_getpid>:
extern "C"
{
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    2384:	b480      	push	{r7}
    2386:	af00      	add	r7, sp, #0
    return 1;
    2388:	2301      	movs	r3, #1
  }
    238a:	4618      	mov	r0, r3
    238c:	46bd      	mov	sp, r7
    238e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2392:	4770      	bx	lr

00002394 <_kill>:

  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    2394:	b480      	push	{r7}
    2396:	b083      	sub	sp, #12
    2398:	af00      	add	r7, sp, #0
    239a:	6078      	str	r0, [r7, #4]
    239c:	6039      	str	r1, [r7, #0]
    return -1;
    239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    23a2:	4618      	mov	r0, r3
    23a4:	370c      	adds	r7, #12
    23a6:	46bd      	mov	sp, r7
    23a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    23ac:	4770      	bx	lr
    23ae:	Address 0x00000000000023ae is out of bounds.


000023b0 <_write>:
    return previous_heap_position;
  }

  // NOLINTNEXTLINE(readability-identifier-naming)
  int _write([[maybe_unused]] int file, const char * ptr, int length)
  {
    23b0:	b580      	push	{r7, lr}
    23b2:	b084      	sub	sp, #16
    23b4:	af00      	add	r7, sp, #0
    23b6:	60f8      	str	r0, [r7, #12]
    23b8:	60b9      	str	r1, [r7, #8]
    23ba:	607a      	str	r2, [r7, #4]
    trace_write(ptr, length);
    23bc:	687b      	ldr	r3, [r7, #4]
    23be:	4619      	mov	r1, r3
    23c0:	68b8      	ldr	r0, [r7, #8]
    23c2:	f001 f85a 	bl	347a <trace_write>
    return sjsu::newlib::out(ptr, length);
    23c6:	4b05      	ldr	r3, [pc, #20]	; (23dc <_write+0x2c>)
    23c8:	681b      	ldr	r3, [r3, #0]
    23ca:	687a      	ldr	r2, [r7, #4]
    23cc:	4611      	mov	r1, r2
    23ce:	68b8      	ldr	r0, [r7, #8]
    23d0:	4798      	blx	r3
    23d2:	4603      	mov	r3, r0
  }
    23d4:	4618      	mov	r0, r3
    23d6:	3710      	adds	r7, #16
    23d8:	46bd      	mov	sp, r7
    23da:	bd80      	pop	{r7, pc}
    23dc:	10000008 	.word	0x10000008

000023e0 <fputs>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int fputs(const char * str, FILE * file)  // NOLINT
  {
    23e0:	b580      	push	{r7, lr}
    23e2:	b086      	sub	sp, #24
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
    23e8:	6039      	str	r1, [r7, #0]
    int string_length    = static_cast<int>(strlen(str));
    23ea:	6878      	ldr	r0, [r7, #4]
    23ec:	f004 fe36 	bl	705c <strlen>
    23f0:	4603      	mov	r3, r0
    23f2:	617b      	str	r3, [r7, #20]
    int result           = 0;
    23f4:	2300      	movs	r3, #0
    23f6:	613b      	str	r3, [r7, #16]
    intptr_t file_intptr = reinterpret_cast<intptr_t>(file);
    23f8:	683b      	ldr	r3, [r7, #0]
    23fa:	60fb      	str	r3, [r7, #12]
    int file_int         = static_cast<int>(file_intptr);
    23fc:	68fb      	ldr	r3, [r7, #12]
    23fe:	60bb      	str	r3, [r7, #8]

    result += _write(static_cast<int>(file_int), str, string_length);
    2400:	697a      	ldr	r2, [r7, #20]
    2402:	6879      	ldr	r1, [r7, #4]
    2404:	68b8      	ldr	r0, [r7, #8]
    2406:	f7ff ffd3 	bl	23b0 <_write>
    240a:	4602      	mov	r2, r0
    240c:	693b      	ldr	r3, [r7, #16]
    240e:	4413      	add	r3, r2
    2410:	613b      	str	r3, [r7, #16]
    return result;
    2412:	693b      	ldr	r3, [r7, #16]
  }
    2414:	4618      	mov	r0, r3
    2416:	3718      	adds	r7, #24
    2418:	46bd      	mov	sp, r7
    241a:	bd80      	pop	{r7, pc}

0000241c <_exit>:

  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    241c:	b480      	push	{r7}
    241e:	b083      	sub	sp, #12
    2420:	af00      	add	r7, sp, #0
    2422:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    2424:	bf00      	nop
    while (1)
    2426:	e7fd      	b.n	2424 <_exit+0x8>

00002428 <_out_chunk(char, void*, unsigned int, unsigned int)>:
// efficient vs using the out() with individual characters.
extern "C" int _write(int file, char * ptr, int length);
// internal chunk output

void _out_chunk(char character, void* buffer, size_t idx, size_t)
{
    2428:	b580      	push	{r7, lr}
    242a:	b088      	sub	sp, #32
    242c:	af00      	add	r7, sp, #0
    242e:	60b9      	str	r1, [r7, #8]
    2430:	607a      	str	r2, [r7, #4]
    2432:	603b      	str	r3, [r7, #0]
    2434:	4603      	mov	r3, r0
    2436:	73fb      	strb	r3, [r7, #15]
  size_t string_limit = SJ2_PRINTF_BUFFER_SIZE - 2;
    2438:	23fe      	movs	r3, #254	; 0xfe
    243a:	61fb      	str	r3, [r7, #28]
  size_t proper_index = idx % (string_limit);
    243c:	687b      	ldr	r3, [r7, #4]
    243e:	69fa      	ldr	r2, [r7, #28]
    2440:	fbb3 f2f2 	udiv	r2, r3, r2
    2444:	69f9      	ldr	r1, [r7, #28]
    2446:	fb01 f202 	mul.w	r2, r1, r2
    244a:	1a9b      	subs	r3, r3, r2
    244c:	61bb      	str	r3, [r7, #24]
  ((char*)buffer)[proper_index] = character;
    244e:	68ba      	ldr	r2, [r7, #8]
    2450:	69bb      	ldr	r3, [r7, #24]
    2452:	4413      	add	r3, r2
    2454:	7bfa      	ldrb	r2, [r7, #15]
    2456:	701a      	strb	r2, [r3, #0]
  // if character == '\0', flush the buffer.
  if (character == '\0') {
    2458:	7bfb      	ldrb	r3, [r7, #15]
    245a:	2b00      	cmp	r3, #0
    245c:	d106      	bne.n	246c <_out_chunk(char, void*, unsigned int, unsigned int)+0x44>
    _write(STDOUT_FILENO, (char*)buffer, proper_index);
    245e:	69bb      	ldr	r3, [r7, #24]
    2460:	461a      	mov	r2, r3
    2462:	68b9      	ldr	r1, [r7, #8]
    2464:	2001      	movs	r0, #1
    2466:	f7ff ffa3 	bl	23b0 <_write>
    size_t last_character = string_limit + 1;
    ((char*)buffer)[last_character] = '\0';
    // At the end of the buffer, flush buffer.
    _write(STDOUT_FILENO, (char*)buffer, last_character);
  }
}
    246a:	e012      	b.n	2492 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
  } else if (proper_index + 1 == string_limit) {
    246c:	69bb      	ldr	r3, [r7, #24]
    246e:	3301      	adds	r3, #1
    2470:	69fa      	ldr	r2, [r7, #28]
    2472:	429a      	cmp	r2, r3
    2474:	d10d      	bne.n	2492 <_out_chunk(char, void*, unsigned int, unsigned int)+0x6a>
    size_t last_character = string_limit + 1;
    2476:	69fb      	ldr	r3, [r7, #28]
    2478:	3301      	adds	r3, #1
    247a:	617b      	str	r3, [r7, #20]
    ((char*)buffer)[last_character] = '\0';
    247c:	68ba      	ldr	r2, [r7, #8]
    247e:	697b      	ldr	r3, [r7, #20]
    2480:	4413      	add	r3, r2
    2482:	2200      	movs	r2, #0
    2484:	701a      	strb	r2, [r3, #0]
    _write(STDOUT_FILENO, (char*)buffer, last_character);
    2486:	697b      	ldr	r3, [r7, #20]
    2488:	461a      	mov	r2, r3
    248a:	68b9      	ldr	r1, [r7, #8]
    248c:	2001      	movs	r0, #1
    248e:	f7ff ff8f 	bl	23b0 <_write>
}
    2492:	bf00      	nop
    2494:	3720      	adds	r7, #32
    2496:	46bd      	mov	sp, r7
    2498:	bd80      	pop	{r7, pc}

0000249a <_out_buffer(char, void*, unsigned int, unsigned int)>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
    249a:	b480      	push	{r7}
    249c:	b085      	sub	sp, #20
    249e:	af00      	add	r7, sp, #0
    24a0:	60b9      	str	r1, [r7, #8]
    24a2:	607a      	str	r2, [r7, #4]
    24a4:	603b      	str	r3, [r7, #0]
    24a6:	4603      	mov	r3, r0
    24a8:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
    24aa:	687a      	ldr	r2, [r7, #4]
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	429a      	cmp	r2, r3
    24b0:	d204      	bcs.n	24bc <_out_buffer(char, void*, unsigned int, unsigned int)+0x22>
    ((char*)buffer)[idx] = character;
    24b2:	68ba      	ldr	r2, [r7, #8]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	4413      	add	r3, r2
    24b8:	7bfa      	ldrb	r2, [r7, #15]
    24ba:	701a      	strb	r2, [r3, #0]
  }
}
    24bc:	bf00      	nop
    24be:	3714      	adds	r7, #20
    24c0:	46bd      	mov	sp, r7
    24c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    24c6:	4770      	bx	lr

000024c8 <_out_null(char, void*, unsigned int, unsigned int)>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    24c8:	b480      	push	{r7}
    24ca:	b085      	sub	sp, #20
    24cc:	af00      	add	r7, sp, #0
    24ce:	60b9      	str	r1, [r7, #8]
    24d0:	607a      	str	r2, [r7, #4]
    24d2:	603b      	str	r3, [r7, #0]
    24d4:	4603      	mov	r3, r0
    24d6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    24d8:	bf00      	nop
    24da:	3714      	adds	r7, #20
    24dc:	46bd      	mov	sp, r7
    24de:	f85d 7b04 	ldr.w	r7, [sp], #4
    24e2:	4770      	bx	lr

000024e4 <_strnlen_s(char const*, unsigned int)>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
    24e4:	b480      	push	{r7}
    24e6:	b085      	sub	sp, #20
    24e8:	af00      	add	r7, sp, #0
    24ea:	6078      	str	r0, [r7, #4]
    24ec:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
    24ee:	687b      	ldr	r3, [r7, #4]
    24f0:	60fb      	str	r3, [r7, #12]
    24f2:	68fb      	ldr	r3, [r7, #12]
    24f4:	781b      	ldrb	r3, [r3, #0]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d006      	beq.n	2508 <_strnlen_s(char const*, unsigned int)+0x24>
    24fa:	683b      	ldr	r3, [r7, #0]
    24fc:	1e5a      	subs	r2, r3, #1
    24fe:	603a      	str	r2, [r7, #0]
    2500:	2b00      	cmp	r3, #0
    2502:	d001      	beq.n	2508 <_strnlen_s(char const*, unsigned int)+0x24>
    2504:	2301      	movs	r3, #1
    2506:	e000      	b.n	250a <_strnlen_s(char const*, unsigned int)+0x26>
    2508:	2300      	movs	r3, #0
    250a:	2b00      	cmp	r3, #0
    250c:	d003      	beq.n	2516 <_strnlen_s(char const*, unsigned int)+0x32>
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	3301      	adds	r3, #1
    2512:	60fb      	str	r3, [r7, #12]
    2514:	e7ed      	b.n	24f2 <_strnlen_s(char const*, unsigned int)+0xe>
  return (unsigned int)(s - str);
    2516:	68fa      	ldr	r2, [r7, #12]
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	1ad3      	subs	r3, r2, r3
}
    251c:	4618      	mov	r0, r3
    251e:	3714      	adds	r7, #20
    2520:	46bd      	mov	sp, r7
    2522:	f85d 7b04 	ldr.w	r7, [sp], #4
    2526:	4770      	bx	lr

00002528 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    2528:	b480      	push	{r7}
    252a:	b083      	sub	sp, #12
    252c:	af00      	add	r7, sp, #0
    252e:	4603      	mov	r3, r0
    2530:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    2532:	79fb      	ldrb	r3, [r7, #7]
    2534:	2b2f      	cmp	r3, #47	; 0x2f
    2536:	d904      	bls.n	2542 <_is_digit(char)+0x1a>
    2538:	79fb      	ldrb	r3, [r7, #7]
    253a:	2b39      	cmp	r3, #57	; 0x39
    253c:	d801      	bhi.n	2542 <_is_digit(char)+0x1a>
    253e:	2301      	movs	r3, #1
    2540:	e000      	b.n	2544 <_is_digit(char)+0x1c>
    2542:	2300      	movs	r3, #0
}
    2544:	4618      	mov	r0, r3
    2546:	370c      	adds	r7, #12
    2548:	46bd      	mov	sp, r7
    254a:	f85d 7b04 	ldr.w	r7, [sp], #4
    254e:	4770      	bx	lr

00002550 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    2550:	b580      	push	{r7, lr}
    2552:	b084      	sub	sp, #16
    2554:	af00      	add	r7, sp, #0
    2556:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    2558:	2300      	movs	r3, #0
    255a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	4618      	mov	r0, r3
    2564:	f7ff ffe0 	bl	2528 <_is_digit(char)>
    2568:	4603      	mov	r3, r0
    256a:	2b00      	cmp	r3, #0
    256c:	d00f      	beq.n	258e <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    256e:	68fa      	ldr	r2, [r7, #12]
    2570:	4613      	mov	r3, r2
    2572:	009b      	lsls	r3, r3, #2
    2574:	4413      	add	r3, r2
    2576:	005b      	lsls	r3, r3, #1
    2578:	4618      	mov	r0, r3
    257a:	687b      	ldr	r3, [r7, #4]
    257c:	681b      	ldr	r3, [r3, #0]
    257e:	1c59      	adds	r1, r3, #1
    2580:	687a      	ldr	r2, [r7, #4]
    2582:	6011      	str	r1, [r2, #0]
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	4403      	add	r3, r0
    2588:	3b30      	subs	r3, #48	; 0x30
    258a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    258c:	e7e6      	b.n	255c <_atoi(char const**)+0xc>
  }
  return i;
    258e:	68fb      	ldr	r3, [r7, #12]
}
    2590:	4618      	mov	r0, r3
    2592:	3710      	adds	r7, #16
    2594:	46bd      	mov	sp, r7
    2596:	bd80      	pop	{r7, pc}

00002598 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    2598:	b590      	push	{r4, r7, lr}
    259a:	b087      	sub	sp, #28
    259c:	af00      	add	r7, sp, #0
    259e:	60f8      	str	r0, [r7, #12]
    25a0:	60b9      	str	r1, [r7, #8]
    25a2:	607a      	str	r2, [r7, #4]
    25a4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    25aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25ac:	f003 0302 	and.w	r3, r3, #2
    25b0:	2b00      	cmp	r3, #0
    25b2:	d116      	bne.n	25e2 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x4a>
    25b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    25b6:	f003 0301 	and.w	r3, r3, #1
    25ba:	2b00      	cmp	r3, #0
    25bc:	d111      	bne.n	25e2 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x4a>
    for (size_t i = len; i < width; i++) {
    25be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25c0:	617b      	str	r3, [r7, #20]
    25c2:	697a      	ldr	r2, [r7, #20]
    25c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    25c6:	429a      	cmp	r2, r3
    25c8:	d20b      	bcs.n	25e2 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x4a>
      out(' ', buffer, idx++, maxlen);
    25ca:	68fc      	ldr	r4, [r7, #12]
    25cc:	687a      	ldr	r2, [r7, #4]
    25ce:	1c53      	adds	r3, r2, #1
    25d0:	607b      	str	r3, [r7, #4]
    25d2:	683b      	ldr	r3, [r7, #0]
    25d4:	68b9      	ldr	r1, [r7, #8]
    25d6:	2020      	movs	r0, #32
    25d8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    25da:	697b      	ldr	r3, [r7, #20]
    25dc:	3301      	adds	r3, #1
    25de:	617b      	str	r3, [r7, #20]
    25e0:	e7ef      	b.n	25c2 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x2a>
    }
  }

  // reverse string
  while (len) {
    25e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25e4:	2b00      	cmp	r3, #0
    25e6:	d00e      	beq.n	2606 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
    25e8:	68fc      	ldr	r4, [r7, #12]
    25ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25ec:	3b01      	subs	r3, #1
    25ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    25f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    25f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    25f4:	4413      	add	r3, r2
    25f6:	7818      	ldrb	r0, [r3, #0]
    25f8:	687a      	ldr	r2, [r7, #4]
    25fa:	1c53      	adds	r3, r2, #1
    25fc:	607b      	str	r3, [r7, #4]
    25fe:	683b      	ldr	r3, [r7, #0]
    2600:	68b9      	ldr	r1, [r7, #8]
    2602:	47a0      	blx	r4
  while (len) {
    2604:	e7ed      	b.n	25e2 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2608:	f003 0302 	and.w	r3, r3, #2
    260c:	2b00      	cmp	r3, #0
    260e:	d00e      	beq.n	262e <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x96>
    while (idx - start_idx < width) {
    2610:	687a      	ldr	r2, [r7, #4]
    2612:	693b      	ldr	r3, [r7, #16]
    2614:	1ad3      	subs	r3, r2, r3
    2616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2618:	429a      	cmp	r2, r3
    261a:	d908      	bls.n	262e <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x96>
      out(' ', buffer, idx++, maxlen);
    261c:	68fc      	ldr	r4, [r7, #12]
    261e:	687a      	ldr	r2, [r7, #4]
    2620:	1c53      	adds	r3, r2, #1
    2622:	607b      	str	r3, [r7, #4]
    2624:	683b      	ldr	r3, [r7, #0]
    2626:	68b9      	ldr	r1, [r7, #8]
    2628:	2020      	movs	r0, #32
    262a:	47a0      	blx	r4
    while (idx - start_idx < width) {
    262c:	e7f0      	b.n	2610 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)+0x78>
    }
  }

  return idx;
    262e:	687b      	ldr	r3, [r7, #4]
}
    2630:	4618      	mov	r0, r3
    2632:	371c      	adds	r7, #28
    2634:	46bd      	mov	sp, r7
    2636:	bd90      	pop	{r4, r7, pc}

00002638 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2638:	b580      	push	{r7, lr}
    263a:	b088      	sub	sp, #32
    263c:	af04      	add	r7, sp, #16
    263e:	60f8      	str	r0, [r7, #12]
    2640:	60b9      	str	r1, [r7, #8]
    2642:	607a      	str	r2, [r7, #4]
    2644:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
    2646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2648:	f003 0302 	and.w	r3, r3, #2
    264c:	2b00      	cmp	r3, #0
    264e:	d136      	bne.n	26be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2652:	2b00      	cmp	r3, #0
    2654:	d010      	beq.n	2678 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x40>
    2656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2658:	f003 0301 	and.w	r3, r3, #1
    265c:	2b00      	cmp	r3, #0
    265e:	d00b      	beq.n	2678 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x40>
    2660:	f897 3020 	ldrb.w	r3, [r7, #32]
    2664:	2b00      	cmp	r3, #0
    2666:	d104      	bne.n	2672 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    2668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    266a:	f003 030c 	and.w	r3, r3, #12
    266e:	2b00      	cmp	r3, #0
    2670:	d002      	beq.n	2678 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x40>
      width--;
    2672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2674:	3b01      	subs	r3, #1
    2676:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2678:	69fa      	ldr	r2, [r7, #28]
    267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    267c:	429a      	cmp	r2, r3
    267e:	d20a      	bcs.n	2696 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x5e>
    2680:	69fb      	ldr	r3, [r7, #28]
    2682:	2b1f      	cmp	r3, #31
    2684:	d807      	bhi.n	2696 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x5e>
      buf[len++] = '0';
    2686:	69fb      	ldr	r3, [r7, #28]
    2688:	1c5a      	adds	r2, r3, #1
    268a:	61fa      	str	r2, [r7, #28]
    268c:	69ba      	ldr	r2, [r7, #24]
    268e:	4413      	add	r3, r2
    2690:	2230      	movs	r2, #48	; 0x30
    2692:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2694:	e7f0      	b.n	2678 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2698:	f003 0301 	and.w	r3, r3, #1
    269c:	2b00      	cmp	r3, #0
    269e:	d00e      	beq.n	26be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x86>
    26a0:	69fa      	ldr	r2, [r7, #28]
    26a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26a4:	429a      	cmp	r2, r3
    26a6:	d20a      	bcs.n	26be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x86>
    26a8:	69fb      	ldr	r3, [r7, #28]
    26aa:	2b1f      	cmp	r3, #31
    26ac:	d807      	bhi.n	26be <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x86>
      buf[len++] = '0';
    26ae:	69fb      	ldr	r3, [r7, #28]
    26b0:	1c5a      	adds	r2, r3, #1
    26b2:	61fa      	str	r2, [r7, #28]
    26b4:	69ba      	ldr	r2, [r7, #24]
    26b6:	4413      	add	r3, r2
    26b8:	2230      	movs	r2, #48	; 0x30
    26ba:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26bc:	e7eb      	b.n	2696 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    26be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    26c0:	f003 0310 	and.w	r3, r3, #16
    26c4:	2b00      	cmp	r3, #0
    26c6:	d058      	beq.n	277a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    26c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    26ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    26ce:	2b00      	cmp	r3, #0
    26d0:	d116      	bne.n	2700 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    26d2:	69fb      	ldr	r3, [r7, #28]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d013      	beq.n	2700 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    26d8:	69fa      	ldr	r2, [r7, #28]
    26da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    26dc:	429a      	cmp	r2, r3
    26de:	d003      	beq.n	26e8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xb0>
    26e0:	69fa      	ldr	r2, [r7, #28]
    26e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    26e4:	429a      	cmp	r2, r3
    26e6:	d10b      	bne.n	2700 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
      len--;
    26e8:	69fb      	ldr	r3, [r7, #28]
    26ea:	3b01      	subs	r3, #1
    26ec:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
    26ee:	69fb      	ldr	r3, [r7, #28]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d005      	beq.n	2700 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    26f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26f6:	2b10      	cmp	r3, #16
    26f8:	d102      	bne.n	2700 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
        len--;
    26fa:	69fb      	ldr	r3, [r7, #28]
    26fc:	3b01      	subs	r3, #1
    26fe:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2702:	2b10      	cmp	r3, #16
    2704:	d10f      	bne.n	2726 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xee>
    2706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2708:	f003 0320 	and.w	r3, r3, #32
    270c:	2b00      	cmp	r3, #0
    270e:	d10a      	bne.n	2726 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xee>
    2710:	69fb      	ldr	r3, [r7, #28]
    2712:	2b1f      	cmp	r3, #31
    2714:	d807      	bhi.n	2726 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xee>
      buf[len++] = 'x';
    2716:	69fb      	ldr	r3, [r7, #28]
    2718:	1c5a      	adds	r2, r3, #1
    271a:	61fa      	str	r2, [r7, #28]
    271c:	69ba      	ldr	r2, [r7, #24]
    271e:	4413      	add	r3, r2
    2720:	2278      	movs	r2, #120	; 0x78
    2722:	701a      	strb	r2, [r3, #0]
    2724:	e01f      	b.n	2766 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2728:	2b10      	cmp	r3, #16
    272a:	d10f      	bne.n	274c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    272e:	f003 0320 	and.w	r3, r3, #32
    2732:	2b00      	cmp	r3, #0
    2734:	d00a      	beq.n	274c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    2736:	69fb      	ldr	r3, [r7, #28]
    2738:	2b1f      	cmp	r3, #31
    273a:	d807      	bhi.n	274c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'X';
    273c:	69fb      	ldr	r3, [r7, #28]
    273e:	1c5a      	adds	r2, r3, #1
    2740:	61fa      	str	r2, [r7, #28]
    2742:	69ba      	ldr	r2, [r7, #24]
    2744:	4413      	add	r3, r2
    2746:	2258      	movs	r2, #88	; 0x58
    2748:	701a      	strb	r2, [r3, #0]
    274a:	e00c      	b.n	2766 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    274e:	2b02      	cmp	r3, #2
    2750:	d109      	bne.n	2766 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12e>
    2752:	69fb      	ldr	r3, [r7, #28]
    2754:	2b1f      	cmp	r3, #31
    2756:	d806      	bhi.n	2766 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12e>
      buf[len++] = 'b';
    2758:	69fb      	ldr	r3, [r7, #28]
    275a:	1c5a      	adds	r2, r3, #1
    275c:	61fa      	str	r2, [r7, #28]
    275e:	69ba      	ldr	r2, [r7, #24]
    2760:	4413      	add	r3, r2
    2762:	2262      	movs	r2, #98	; 0x62
    2764:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2766:	69fb      	ldr	r3, [r7, #28]
    2768:	2b1f      	cmp	r3, #31
    276a:	d806      	bhi.n	277a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x142>
      buf[len++] = '0';
    276c:	69fb      	ldr	r3, [r7, #28]
    276e:	1c5a      	adds	r2, r3, #1
    2770:	61fa      	str	r2, [r7, #28]
    2772:	69ba      	ldr	r2, [r7, #24]
    2774:	4413      	add	r3, r2
    2776:	2230      	movs	r2, #48	; 0x30
    2778:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    277a:	69fb      	ldr	r3, [r7, #28]
    277c:	2b1f      	cmp	r3, #31
    277e:	d824      	bhi.n	27ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x192>
    if (negative) {
    2780:	f897 3020 	ldrb.w	r3, [r7, #32]
    2784:	2b00      	cmp	r3, #0
    2786:	d007      	beq.n	2798 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
      buf[len++] = '-';
    2788:	69fb      	ldr	r3, [r7, #28]
    278a:	1c5a      	adds	r2, r3, #1
    278c:	61fa      	str	r2, [r7, #28]
    278e:	69ba      	ldr	r2, [r7, #24]
    2790:	4413      	add	r3, r2
    2792:	222d      	movs	r2, #45	; 0x2d
    2794:	701a      	strb	r2, [r3, #0]
    2796:	e018      	b.n	27ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x192>
    }
    else if (flags & FLAGS_PLUS) {
    2798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    279a:	f003 0304 	and.w	r3, r3, #4
    279e:	2b00      	cmp	r3, #0
    27a0:	d007      	beq.n	27b2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    27a2:	69fb      	ldr	r3, [r7, #28]
    27a4:	1c5a      	adds	r2, r3, #1
    27a6:	61fa      	str	r2, [r7, #28]
    27a8:	69ba      	ldr	r2, [r7, #24]
    27aa:	4413      	add	r3, r2
    27ac:	222b      	movs	r2, #43	; 0x2b
    27ae:	701a      	strb	r2, [r3, #0]
    27b0:	e00b      	b.n	27ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x192>
    }
    else if (flags & FLAGS_SPACE) {
    27b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    27b4:	f003 0308 	and.w	r3, r3, #8
    27b8:	2b00      	cmp	r3, #0
    27ba:	d006      	beq.n	27ca <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x192>
      buf[len++] = ' ';
    27bc:	69fb      	ldr	r3, [r7, #28]
    27be:	1c5a      	adds	r2, r3, #1
    27c0:	61fa      	str	r2, [r7, #28]
    27c2:	69ba      	ldr	r2, [r7, #24]
    27c4:	4413      	add	r3, r2
    27c6:	2220      	movs	r2, #32
    27c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    27ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    27cc:	9303      	str	r3, [sp, #12]
    27ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    27d0:	9302      	str	r3, [sp, #8]
    27d2:	69fb      	ldr	r3, [r7, #28]
    27d4:	9301      	str	r3, [sp, #4]
    27d6:	69bb      	ldr	r3, [r7, #24]
    27d8:	9300      	str	r3, [sp, #0]
    27da:	683b      	ldr	r3, [r7, #0]
    27dc:	687a      	ldr	r2, [r7, #4]
    27de:	68b9      	ldr	r1, [r7, #8]
    27e0:	68f8      	ldr	r0, [r7, #12]
    27e2:	f7ff fed9 	bl	2598 <_out_rev(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char const*, unsigned int, unsigned int, unsigned int)>
    27e6:	4603      	mov	r3, r0
}
    27e8:	4618      	mov	r0, r3
    27ea:	3710      	adds	r7, #16
    27ec:	46bd      	mov	sp, r7
    27ee:	bd80      	pop	{r7, pc}

000027f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    27f0:	b580      	push	{r7, lr}
    27f2:	b096      	sub	sp, #88	; 0x58
    27f4:	af08      	add	r7, sp, #32
    27f6:	60f8      	str	r0, [r7, #12]
    27f8:	60b9      	str	r1, [r7, #8]
    27fa:	607a      	str	r2, [r7, #4]
    27fc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    27fe:	2300      	movs	r3, #0
    2800:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    2802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2804:	2b00      	cmp	r3, #0
    2806:	d103      	bne.n	2810 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    2808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    280a:	f023 0310 	bic.w	r3, r3, #16
    280e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2816:	2b00      	cmp	r3, #0
    2818:	d002      	beq.n	2820 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    281a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    281c:	2b00      	cmp	r3, #0
    281e:	d034      	beq.n	288a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    2820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2822:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2824:	fbb3 f2f2 	udiv	r2, r3, r2
    2828:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    282a:	fb01 f202 	mul.w	r2, r1, r2
    282e:	1a9b      	subs	r3, r3, r2
    2830:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2838:	2b09      	cmp	r3, #9
    283a:	d804      	bhi.n	2846 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    283c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2840:	3330      	adds	r3, #48	; 0x30
    2842:	b2da      	uxtb	r2, r3
    2844:	e00d      	b.n	2862 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    2846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2848:	f003 0320 	and.w	r3, r3, #32
    284c:	2b00      	cmp	r3, #0
    284e:	d001      	beq.n	2854 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    2850:	2241      	movs	r2, #65	; 0x41
    2852:	e000      	b.n	2856 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    2854:	2261      	movs	r2, #97	; 0x61
    2856:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    285a:	4413      	add	r3, r2
    285c:	b2db      	uxtb	r3, r3
    285e:	3b0a      	subs	r3, #10
    2860:	b2da      	uxtb	r2, r3
    2862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2864:	1c59      	adds	r1, r3, #1
    2866:	6379      	str	r1, [r7, #52]	; 0x34
    2868:	f107 0138 	add.w	r1, r7, #56	; 0x38
    286c:	440b      	add	r3, r1
    286e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    2872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2876:	fbb2 f3f3 	udiv	r3, r2, r3
    287a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    287c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    287e:	2b00      	cmp	r3, #0
    2880:	d003      	beq.n	288a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    2882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2884:	2b1f      	cmp	r3, #31
    2886:	d800      	bhi.n	288a <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    2888:	e7ca      	b.n	2820 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    288c:	9306      	str	r3, [sp, #24]
    288e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2890:	9305      	str	r3, [sp, #20]
    2892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2894:	9304      	str	r3, [sp, #16]
    2896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2898:	9303      	str	r3, [sp, #12]
    289a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    289e:	9302      	str	r3, [sp, #8]
    28a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    28a2:	9301      	str	r3, [sp, #4]
    28a4:	f107 0310 	add.w	r3, r7, #16
    28a8:	9300      	str	r3, [sp, #0]
    28aa:	683b      	ldr	r3, [r7, #0]
    28ac:	687a      	ldr	r2, [r7, #4]
    28ae:	68b9      	ldr	r1, [r7, #8]
    28b0:	68f8      	ldr	r0, [r7, #12]
    28b2:	f7ff fec1 	bl	2638 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    28b6:	4603      	mov	r3, r0
}
    28b8:	4618      	mov	r0, r3
    28ba:	3738      	adds	r7, #56	; 0x38
    28bc:	46bd      	mov	sp, r7
    28be:	bd80      	pop	{r7, pc}

000028c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b096      	sub	sp, #88	; 0x58
    28c4:	af08      	add	r7, sp, #32
    28c6:	60f8      	str	r0, [r7, #12]
    28c8:	60b9      	str	r1, [r7, #8]
    28ca:	607a      	str	r2, [r7, #4]
    28cc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    28ce:	2300      	movs	r3, #0
    28d0:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    28d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    28d6:	4313      	orrs	r3, r2
    28d8:	d103      	bne.n	28e2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    28da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    28dc:	f023 0310 	bic.w	r3, r3, #16
    28e0:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    28e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    28e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    28e8:	2b00      	cmp	r3, #0
    28ea:	d003      	beq.n	28f4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    28ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    28f0:	4313      	orrs	r3, r2
    28f2:	d039      	beq.n	2968 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
      const char digit = (char)(value % base);
    28f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    28f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    28fc:	f004 f992 	bl	6c24 <__aeabi_uldivmod>
    2900:	4613      	mov	r3, r2
    2902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2906:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    290a:	2b09      	cmp	r3, #9
    290c:	d804      	bhi.n	2918 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x58>
    290e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2912:	3330      	adds	r3, #48	; 0x30
    2914:	b2da      	uxtb	r2, r3
    2916:	e00d      	b.n	2934 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x74>
    2918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    291a:	f003 0320 	and.w	r3, r3, #32
    291e:	2b00      	cmp	r3, #0
    2920:	d001      	beq.n	2926 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x66>
    2922:	2241      	movs	r2, #65	; 0x41
    2924:	e000      	b.n	2928 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    2926:	2261      	movs	r2, #97	; 0x61
    2928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    292c:	4413      	add	r3, r2
    292e:	b2db      	uxtb	r3, r3
    2930:	3b0a      	subs	r3, #10
    2932:	b2da      	uxtb	r2, r3
    2934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2936:	1c59      	adds	r1, r3, #1
    2938:	6379      	str	r1, [r7, #52]	; 0x34
    293a:	f107 0138 	add.w	r1, r7, #56	; 0x38
    293e:	440b      	add	r3, r1
    2940:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    2944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
    2948:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
    294c:	f004 f96a 	bl	6c24 <__aeabi_uldivmod>
    2950:	4602      	mov	r2, r0
    2952:	460b      	mov	r3, r1
    2954:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2958:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    295c:	4313      	orrs	r3, r2
    295e:	d003      	beq.n	2968 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    2960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2962:	2b1f      	cmp	r3, #31
    2964:	d800      	bhi.n	2968 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xa8>
    do {
    2966:	e7c5      	b.n	28f4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    296a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    296c:	9206      	str	r2, [sp, #24]
    296e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2970:	9205      	str	r2, [sp, #20]
    2972:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2974:	9204      	str	r2, [sp, #16]
    2976:	9303      	str	r3, [sp, #12]
    2978:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    297c:	9302      	str	r3, [sp, #8]
    297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2980:	9301      	str	r3, [sp, #4]
    2982:	f107 0310 	add.w	r3, r7, #16
    2986:	9300      	str	r3, [sp, #0]
    2988:	683b      	ldr	r3, [r7, #0]
    298a:	687a      	ldr	r2, [r7, #4]
    298c:	68b9      	ldr	r1, [r7, #8]
    298e:	68f8      	ldr	r0, [r7, #12]
    2990:	f7ff fe52 	bl	2638 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    2994:	4603      	mov	r3, r0
}
    2996:	4618      	mov	r0, r3
    2998:	3738      	adds	r7, #56	; 0x38
    299a:	46bd      	mov	sp, r7
    299c:	bd80      	pop	{r7, pc}

0000299e <_PowerOf10(unsigned long)>:
// forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT
[[maybe_unused]]
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags);

static float _PowerOf10(uint32_t exponent)
{
    299e:	b480      	push	{r7}
    29a0:	b085      	sub	sp, #20
    29a2:	af00      	add	r7, sp, #0
    29a4:	6078      	str	r0, [r7, #4]
  float result = 1;
    29a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    29aa:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0; i < exponent; i++)
    29ac:	2300      	movs	r3, #0
    29ae:	60bb      	str	r3, [r7, #8]
    29b0:	68ba      	ldr	r2, [r7, #8]
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	429a      	cmp	r2, r3
    29b6:	d20b      	bcs.n	29d0 <_PowerOf10(unsigned long)+0x32>
  {
    result *= 10.0f;
    29b8:	edd7 7a03 	vldr	s15, [r7, #12]
    29bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    29c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    29c4:	edc7 7a03 	vstr	s15, [r7, #12]
  for (uint32_t i = 0; i < exponent; i++)
    29c8:	68bb      	ldr	r3, [r7, #8]
    29ca:	3301      	adds	r3, #1
    29cc:	60bb      	str	r3, [r7, #8]
    29ce:	e7ef      	b.n	29b0 <_PowerOf10(unsigned long)+0x12>
  }
  return result;
    29d0:	68fb      	ldr	r3, [r7, #12]
    29d2:	ee07 3a90 	vmov	s15, r3
}
    29d6:	eeb0 0a67 	vmov.f32	s0, s15
    29da:	3714      	adds	r7, #20
    29dc:	46bd      	mov	sp, r7
    29de:	f85d 7b04 	ldr.w	r7, [sp], #4
    29e2:	4770      	bx	lr

000029e4 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)>:
                                               size_t idx,
                                               size_t maxlen,
                                               float value,
                                               unsigned int precision,
                                               unsigned int flags)
{
    29e4:	b580      	push	{r7, lr}
    29e6:	ed2d 8b02 	vpush	{d8}
    29ea:	b090      	sub	sp, #64	; 0x40
    29ec:	af02      	add	r7, sp, #8
    29ee:	6178      	str	r0, [r7, #20]
    29f0:	6139      	str	r1, [r7, #16]
    29f2:	60fa      	str	r2, [r7, #12]
    29f4:	60bb      	str	r3, [r7, #8]
    29f6:	ed87 0a01 	vstr	s0, [r7, #4]
  static constexpr float kRounders[] = {
    0.5f, 0.05f, 0.005f, 0.0005f, 0.00005f, 0.000005f, 0.0000005f, 0.00000005f,
  };

  const char * negative = "";
    29fa:	4b35      	ldr	r3, [pc, #212]	; (2ad0 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0xec>)
    29fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (value < 0)
    29fe:	edd7 7a01 	vldr	s15, [r7, #4]
    2a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a0a:	d507      	bpl.n	2a1c <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0x38>
  {
    negative = "-";
    2a0c:	4b31      	ldr	r3, [pc, #196]	; (2ad4 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0xf0>)
    2a0e:	637b      	str	r3, [r7, #52]	; 0x34
    value    = -value;
    2a10:	edd7 7a01 	vldr	s15, [r7, #4]
    2a14:	eef1 7a67 	vneg.f32	s15, s15
    2a18:	edc7 7a01 	vstr	s15, [r7, #4]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION))
    2a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2a22:	2b00      	cmp	r3, #0
    2a24:	d101      	bne.n	2a2a <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0x46>
  {
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
    2a26:	2306      	movs	r3, #6
    2a28:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  precision = std::min(precision, PRINTF_DEFAULT_FLOAT_PRECISION);
    2a2a:	2306      	movs	r3, #6
    2a2c:	61fb      	str	r3, [r7, #28]
    2a2e:	f107 031c 	add.w	r3, r7, #28
    2a32:	4619      	mov	r1, r3
    2a34:	f107 0048 	add.w	r0, r7, #72	; 0x48
    2a38:	f000 fd04 	bl	3444 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
    2a3c:	4603      	mov	r3, r0
    2a3e:	681b      	ldr	r3, [r3, #0]
    2a40:	64bb      	str	r3, [r7, #72]	; 0x48
  value += kRounders[precision];
    2a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2a44:	4a24      	ldr	r2, [pc, #144]	; (2ad8 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0xf4>)
    2a46:	009b      	lsls	r3, r3, #2
    2a48:	4413      	add	r3, r2
    2a4a:	edd3 7a00 	vldr	s15, [r3]
    2a4e:	ed97 7a01 	vldr	s14, [r7, #4]
    2a52:	ee77 7a27 	vadd.f32	s15, s14, s15
    2a56:	edc7 7a01 	vstr	s15, [r7, #4]

  int32_t whole       = static_cast<int32_t>(value);
    2a5a:	edd7 7a01 	vldr	s15, [r7, #4]
    2a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2a62:	ee17 3a90 	vmov	r3, s15
    2a66:	633b      	str	r3, [r7, #48]	; 0x30
  float whole_float   = static_cast<float>(whole);
    2a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a6a:	ee07 3a90 	vmov	s15, r3
    2a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2a72:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  float decimal_float = (value - whole_float) * _PowerOf10(precision);
    2a76:	ed97 7a01 	vldr	s14, [r7, #4]
    2a7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    2a7e:	ee37 8a67 	vsub.f32	s16, s14, s15
    2a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2a84:	4618      	mov	r0, r3
    2a86:	f7ff ff8a 	bl	299e <_PowerOf10(unsigned long)>
    2a8a:	eef0 7a40 	vmov.f32	s15, s0
    2a8e:	ee68 7a27 	vmul.f32	s15, s16, s15
    2a92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  int32_t decimal     = static_cast<int32_t>(decimal_float);
    2a96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    2a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2a9e:	ee17 3a90 	vmov	r3, s15
    2aa2:	627b      	str	r3, [r7, #36]	; 0x24
  int next_position   = snprintf(&buffer[idx], maxlen, "%s%" PRId32 ".%" PRId32,
    2aa4:	693a      	ldr	r2, [r7, #16]
    2aa6:	68fb      	ldr	r3, [r7, #12]
    2aa8:	18d0      	adds	r0, r2, r3
    2aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aac:	9301      	str	r3, [sp, #4]
    2aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2ab0:	9300      	str	r3, [sp, #0]
    2ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2ab4:	4a09      	ldr	r2, [pc, #36]	; (2adc <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)+0xf8>)
    2ab6:	68b9      	ldr	r1, [r7, #8]
    2ab8:	f000 fca8 	bl	340c <snprintf>
    2abc:	6238      	str	r0, [r7, #32]
                               negative, whole, decimal);
  return idx + next_position;
    2abe:	6a3a      	ldr	r2, [r7, #32]
    2ac0:	68fb      	ldr	r3, [r7, #12]
    2ac2:	4413      	add	r3, r2
}
    2ac4:	4618      	mov	r0, r3
    2ac6:	3738      	adds	r7, #56	; 0x38
    2ac8:	46bd      	mov	sp, r7
    2aca:	ecbd 8b02 	vpop	{d8}
    2ace:	bd80      	pop	{r7, pc}
    2ad0:	00007894 	.word	0x00007894
    2ad4:	00007898 	.word	0x00007898
    2ad8:	00007874 	.word	0x00007874
    2adc:	0000789c 	.word	0x0000789c

00002ae0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
  return idx;
}

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2ae0:	b5b0      	push	{r4, r5, r7, lr}
    2ae2:	b0a0      	sub	sp, #128	; 0x80
    2ae4:	af0a      	add	r7, sp, #40	; 0x28
    2ae6:	60f8      	str	r0, [r7, #12]
    2ae8:	60b9      	str	r1, [r7, #8]
    2aea:	607a      	str	r2, [r7, #4]
    2aec:	603b      	str	r3, [r7, #0]
#if defined(SJ2_INCLUDE_VSNPRINTF) && SJ2_INCLUDE_VSNPRINTF == false
  return 0;
#endif
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    2aee:	2300      	movs	r3, #0
    2af0:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    2af2:	68bb      	ldr	r3, [r7, #8]
    2af4:	2b00      	cmp	r3, #0
    2af6:	d101      	bne.n	2afc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    2af8:	4ba2      	ldr	r3, [pc, #648]	; (2d84 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    2afa:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    2afc:	683b      	ldr	r3, [r7, #0]
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	2b00      	cmp	r3, #0
    2b02:	f000 844f 	beq.w	33a4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c4>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    2b06:	683b      	ldr	r3, [r7, #0]
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	2b25      	cmp	r3, #37	; 0x25
    2b0c:	d00d      	beq.n	2b2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    2b0e:	68fc      	ldr	r4, [r7, #12]
    2b10:	683b      	ldr	r3, [r7, #0]
    2b12:	7818      	ldrb	r0, [r3, #0]
    2b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2b16:	1c53      	adds	r3, r2, #1
    2b18:	647b      	str	r3, [r7, #68]	; 0x44
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	68b9      	ldr	r1, [r7, #8]
    2b1e:	47a0      	blx	r4
      format++;
    2b20:	683b      	ldr	r3, [r7, #0]
    2b22:	3301      	adds	r3, #1
    2b24:	603b      	str	r3, [r7, #0]
      continue;
    2b26:	f000 bc3b 	b.w	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    }
    else {
      // yes, evaluate it
      format++;
    2b2a:	683b      	ldr	r3, [r7, #0]
    2b2c:	3301      	adds	r3, #1
    2b2e:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    2b30:	2300      	movs	r3, #0
    2b32:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    2b34:	683b      	ldr	r3, [r7, #0]
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	3b20      	subs	r3, #32
    2b3a:	2b10      	cmp	r3, #16
    2b3c:	d856      	bhi.n	2bec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    2b3e:	a201      	add	r2, pc, #4	; (adr r2, 2b44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    2b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2b44:	00002bc5 	.word	0x00002bc5
    2b48:	00002bed 	.word	0x00002bed
    2b4c:	00002bed 	.word	0x00002bed
    2b50:	00002bd9 	.word	0x00002bd9
    2b54:	00002bed 	.word	0x00002bed
    2b58:	00002bed 	.word	0x00002bed
    2b5c:	00002bed 	.word	0x00002bed
    2b60:	00002bed 	.word	0x00002bed
    2b64:	00002bed 	.word	0x00002bed
    2b68:	00002bed 	.word	0x00002bed
    2b6c:	00002bed 	.word	0x00002bed
    2b70:	00002bb1 	.word	0x00002bb1
    2b74:	00002bed 	.word	0x00002bed
    2b78:	00002b9d 	.word	0x00002b9d
    2b7c:	00002bed 	.word	0x00002bed
    2b80:	00002bed 	.word	0x00002bed
    2b84:	00002b89 	.word	0x00002b89
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2b8a:	f043 0301 	orr.w	r3, r3, #1
    2b8e:	657b      	str	r3, [r7, #84]	; 0x54
    2b90:	683b      	ldr	r3, [r7, #0]
    2b92:	3301      	adds	r3, #1
    2b94:	603b      	str	r3, [r7, #0]
    2b96:	2301      	movs	r3, #1
    2b98:	64bb      	str	r3, [r7, #72]	; 0x48
    2b9a:	e02a      	b.n	2bf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2b9e:	f043 0302 	orr.w	r3, r3, #2
    2ba2:	657b      	str	r3, [r7, #84]	; 0x54
    2ba4:	683b      	ldr	r3, [r7, #0]
    2ba6:	3301      	adds	r3, #1
    2ba8:	603b      	str	r3, [r7, #0]
    2baa:	2301      	movs	r3, #1
    2bac:	64bb      	str	r3, [r7, #72]	; 0x48
    2bae:	e020      	b.n	2bf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2bb2:	f043 0304 	orr.w	r3, r3, #4
    2bb6:	657b      	str	r3, [r7, #84]	; 0x54
    2bb8:	683b      	ldr	r3, [r7, #0]
    2bba:	3301      	adds	r3, #1
    2bbc:	603b      	str	r3, [r7, #0]
    2bbe:	2301      	movs	r3, #1
    2bc0:	64bb      	str	r3, [r7, #72]	; 0x48
    2bc2:	e016      	b.n	2bf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2bc6:	f043 0308 	orr.w	r3, r3, #8
    2bca:	657b      	str	r3, [r7, #84]	; 0x54
    2bcc:	683b      	ldr	r3, [r7, #0]
    2bce:	3301      	adds	r3, #1
    2bd0:	603b      	str	r3, [r7, #0]
    2bd2:	2301      	movs	r3, #1
    2bd4:	64bb      	str	r3, [r7, #72]	; 0x48
    2bd6:	e00c      	b.n	2bf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2bda:	f043 0310 	orr.w	r3, r3, #16
    2bde:	657b      	str	r3, [r7, #84]	; 0x54
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	3301      	adds	r3, #1
    2be4:	603b      	str	r3, [r7, #0]
    2be6:	2301      	movs	r3, #1
    2be8:	64bb      	str	r3, [r7, #72]	; 0x48
    2bea:	e002      	b.n	2bf2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    2bec:	2300      	movs	r3, #0
    2bee:	64bb      	str	r3, [r7, #72]	; 0x48
    2bf0:	bf00      	nop
      }
    } while (n);
    2bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d000      	beq.n	2bfa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    2bf8:	e79c      	b.n	2b34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    2bfa:	2300      	movs	r3, #0
    2bfc:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	781b      	ldrb	r3, [r3, #0]
    2c02:	4618      	mov	r0, r3
    2c04:	f7ff fc90 	bl	2528 <_is_digit(char)>
    2c08:	4603      	mov	r3, r0
    2c0a:	2b00      	cmp	r3, #0
    2c0c:	d005      	beq.n	2c1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    2c0e:	463b      	mov	r3, r7
    2c10:	4618      	mov	r0, r3
    2c12:	f7ff fc9d 	bl	2550 <_atoi(char const**)>
    2c16:	6538      	str	r0, [r7, #80]	; 0x50
    2c18:	e018      	b.n	2c4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    2c1a:	683b      	ldr	r3, [r7, #0]
    2c1c:	781b      	ldrb	r3, [r3, #0]
    2c1e:	2b2a      	cmp	r3, #42	; 0x2a
    2c20:	d114      	bne.n	2c4c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    2c22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2c24:	1d1a      	adds	r2, r3, #4
    2c26:	66ba      	str	r2, [r7, #104]	; 0x68
    2c28:	681b      	ldr	r3, [r3, #0]
    2c2a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    2c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c2e:	2b00      	cmp	r3, #0
    2c30:	da07      	bge.n	2c42 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    2c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c34:	f043 0302 	orr.w	r3, r3, #2
    2c38:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    2c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c3c:	425b      	negs	r3, r3
    2c3e:	653b      	str	r3, [r7, #80]	; 0x50
    2c40:	e001      	b.n	2c46 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    2c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c44:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    2c46:	683b      	ldr	r3, [r7, #0]
    2c48:	3301      	adds	r3, #1
    2c4a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    2c4c:	2300      	movs	r3, #0
    2c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	781b      	ldrb	r3, [r3, #0]
    2c54:	2b2e      	cmp	r3, #46	; 0x2e
    2c56:	d124      	bne.n	2ca2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    2c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2c5e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    2c60:	683b      	ldr	r3, [r7, #0]
    2c62:	3301      	adds	r3, #1
    2c64:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    2c66:	683b      	ldr	r3, [r7, #0]
    2c68:	781b      	ldrb	r3, [r3, #0]
    2c6a:	4618      	mov	r0, r3
    2c6c:	f7ff fc5c 	bl	2528 <_is_digit(char)>
    2c70:	4603      	mov	r3, r0
    2c72:	2b00      	cmp	r3, #0
    2c74:	d005      	beq.n	2c82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    2c76:	463b      	mov	r3, r7
    2c78:	4618      	mov	r0, r3
    2c7a:	f7ff fc69 	bl	2550 <_atoi(char const**)>
    2c7e:	64f8      	str	r0, [r7, #76]	; 0x4c
    2c80:	e00f      	b.n	2ca2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    2c82:	683b      	ldr	r3, [r7, #0]
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	2b2a      	cmp	r3, #42	; 0x2a
    2c88:	d10b      	bne.n	2ca2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    2c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2c8c:	1d1a      	adds	r2, r3, #4
    2c8e:	66ba      	str	r2, [r7, #104]	; 0x68
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	3301      	adds	r3, #1
    2ca0:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    2ca2:	683b      	ldr	r3, [r7, #0]
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	3b68      	subs	r3, #104	; 0x68
    2ca8:	2b12      	cmp	r3, #18
    2caa:	d867      	bhi.n	2d7c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    2cac:	a201      	add	r2, pc, #4	; (adr r2, 2cb4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    2cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cb2:	bf00      	nop
    2cb4:	00002d27 	.word	0x00002d27
    2cb8:	00002d7d 	.word	0x00002d7d
    2cbc:	00002d5d 	.word	0x00002d5d
    2cc0:	00002d7d 	.word	0x00002d7d
    2cc4:	00002d01 	.word	0x00002d01
    2cc8:	00002d7d 	.word	0x00002d7d
    2ccc:	00002d7d 	.word	0x00002d7d
    2cd0:	00002d7d 	.word	0x00002d7d
    2cd4:	00002d7d 	.word	0x00002d7d
    2cd8:	00002d7d 	.word	0x00002d7d
    2cdc:	00002d7d 	.word	0x00002d7d
    2ce0:	00002d7d 	.word	0x00002d7d
    2ce4:	00002d4d 	.word	0x00002d4d
    2ce8:	00002d7d 	.word	0x00002d7d
    2cec:	00002d7d 	.word	0x00002d7d
    2cf0:	00002d7d 	.word	0x00002d7d
    2cf4:	00002d7d 	.word	0x00002d7d
    2cf8:	00002d7d 	.word	0x00002d7d
    2cfc:	00002d6d 	.word	0x00002d6d
      case 'l' :
        flags |= FLAGS_LONG;
    2d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2d06:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2d08:	683b      	ldr	r3, [r7, #0]
    2d0a:	3301      	adds	r3, #1
    2d0c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    2d0e:	683b      	ldr	r3, [r7, #0]
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	2b6c      	cmp	r3, #108	; 0x6c
    2d14:	d134      	bne.n	2d80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    2d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2d1c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    2d1e:	683b      	ldr	r3, [r7, #0]
    2d20:	3301      	adds	r3, #1
    2d22:	603b      	str	r3, [r7, #0]
        }
        break;
    2d24:	e02c      	b.n	2d80 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    2d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2d2c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2d2e:	683b      	ldr	r3, [r7, #0]
    2d30:	3301      	adds	r3, #1
    2d32:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    2d34:	683b      	ldr	r3, [r7, #0]
    2d36:	781b      	ldrb	r3, [r3, #0]
    2d38:	2b68      	cmp	r3, #104	; 0x68
    2d3a:	d125      	bne.n	2d88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    2d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d42:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    2d44:	683b      	ldr	r3, [r7, #0]
    2d46:	3301      	adds	r3, #1
    2d48:	603b      	str	r3, [r7, #0]
        }
        break;
    2d4a:	e01d      	b.n	2d88 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2d52:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2d54:	683b      	ldr	r3, [r7, #0]
    2d56:	3301      	adds	r3, #1
    2d58:	603b      	str	r3, [r7, #0]
        break;
    2d5a:	e016      	b.n	2d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2d62:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2d64:	683b      	ldr	r3, [r7, #0]
    2d66:	3301      	adds	r3, #1
    2d68:	603b      	str	r3, [r7, #0]
        break;
    2d6a:	e00e      	b.n	2d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2d72:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2d74:	683b      	ldr	r3, [r7, #0]
    2d76:	3301      	adds	r3, #1
    2d78:	603b      	str	r3, [r7, #0]
        break;
    2d7a:	e006      	b.n	2d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    2d7c:	bf00      	nop
    2d7e:	e004      	b.n	2d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    2d80:	bf00      	nop
    2d82:	e002      	b.n	2d8a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    2d84:	000024c9 	.word	0x000024c9
        break;
    2d88:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	781b      	ldrb	r3, [r3, #0]
    2d8e:	3b25      	subs	r3, #37	; 0x25
    2d90:	2b53      	cmp	r3, #83	; 0x53
    2d92:	f200 82f8 	bhi.w	3386 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8a6>
    2d96:	a201      	add	r2, pc, #4	; (adr r2, 2d9c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    2d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2d9c:	0000336f 	.word	0x0000336f
    2da0:	00003387 	.word	0x00003387
    2da4:	00003387 	.word	0x00003387
    2da8:	00003387 	.word	0x00003387
    2dac:	00003387 	.word	0x00003387
    2db0:	00003387 	.word	0x00003387
    2db4:	00003387 	.word	0x00003387
    2db8:	00003387 	.word	0x00003387
    2dbc:	00003387 	.word	0x00003387
    2dc0:	00003387 	.word	0x00003387
    2dc4:	00003387 	.word	0x00003387
    2dc8:	00003387 	.word	0x00003387
    2dcc:	00003387 	.word	0x00003387
    2dd0:	00003387 	.word	0x00003387
    2dd4:	00003387 	.word	0x00003387
    2dd8:	00003387 	.word	0x00003387
    2ddc:	00003387 	.word	0x00003387
    2de0:	00003387 	.word	0x00003387
    2de4:	00003387 	.word	0x00003387
    2de8:	00003387 	.word	0x00003387
    2dec:	00003387 	.word	0x00003387
    2df0:	00003387 	.word	0x00003387
    2df4:	00003387 	.word	0x00003387
    2df8:	00003387 	.word	0x00003387
    2dfc:	00003387 	.word	0x00003387
    2e00:	00003387 	.word	0x00003387
    2e04:	00003387 	.word	0x00003387
    2e08:	00003387 	.word	0x00003387
    2e0c:	00003387 	.word	0x00003387
    2e10:	00003387 	.word	0x00003387
    2e14:	00003387 	.word	0x00003387
    2e18:	00003387 	.word	0x00003387
    2e1c:	00003387 	.word	0x00003387
    2e20:	0000317b 	.word	0x0000317b
    2e24:	00003387 	.word	0x00003387
    2e28:	00003387 	.word	0x00003387
    2e2c:	00003387 	.word	0x00003387
    2e30:	00003387 	.word	0x00003387
    2e34:	00003387 	.word	0x00003387
    2e38:	00003387 	.word	0x00003387
    2e3c:	00003387 	.word	0x00003387
    2e40:	00003387 	.word	0x00003387
    2e44:	00003387 	.word	0x00003387
    2e48:	00003387 	.word	0x00003387
    2e4c:	00003387 	.word	0x00003387
    2e50:	00003387 	.word	0x00003387
    2e54:	00003387 	.word	0x00003387
    2e58:	00003387 	.word	0x00003387
    2e5c:	00003387 	.word	0x00003387
    2e60:	00003387 	.word	0x00003387
    2e64:	00003387 	.word	0x00003387
    2e68:	00002eed 	.word	0x00002eed
    2e6c:	00003387 	.word	0x00003387
    2e70:	00003387 	.word	0x00003387
    2e74:	00003387 	.word	0x00003387
    2e78:	00003387 	.word	0x00003387
    2e7c:	00003387 	.word	0x00003387
    2e80:	00003387 	.word	0x00003387
    2e84:	00003387 	.word	0x00003387
    2e88:	00003387 	.word	0x00003387
    2e8c:	00003387 	.word	0x00003387
    2e90:	00002eed 	.word	0x00002eed
    2e94:	000031b9 	.word	0x000031b9
    2e98:	00002eed 	.word	0x00002eed
    2e9c:	00003387 	.word	0x00003387
    2ea0:	0000317b 	.word	0x0000317b
    2ea4:	00003387 	.word	0x00003387
    2ea8:	00003387 	.word	0x00003387
    2eac:	00002eed 	.word	0x00002eed
    2eb0:	00003387 	.word	0x00003387
    2eb4:	00003387 	.word	0x00003387
    2eb8:	00003387 	.word	0x00003387
    2ebc:	00003387 	.word	0x00003387
    2ec0:	00003387 	.word	0x00003387
    2ec4:	00002eed 	.word	0x00002eed
    2ec8:	00003327 	.word	0x00003327
    2ecc:	00003387 	.word	0x00003387
    2ed0:	00003387 	.word	0x00003387
    2ed4:	00003241 	.word	0x00003241
    2ed8:	00003387 	.word	0x00003387
    2edc:	00002eed 	.word	0x00002eed
    2ee0:	00003387 	.word	0x00003387
    2ee4:	00003387 	.word	0x00003387
    2ee8:	00002eed 	.word	0x00002eed
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2eec:	683b      	ldr	r3, [r7, #0]
    2eee:	781b      	ldrb	r3, [r3, #0]
    2ef0:	2b78      	cmp	r3, #120	; 0x78
    2ef2:	d003      	beq.n	2efc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	781b      	ldrb	r3, [r3, #0]
    2ef8:	2b58      	cmp	r3, #88	; 0x58
    2efa:	d102      	bne.n	2f02 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    2efc:	2310      	movs	r3, #16
    2efe:	643b      	str	r3, [r7, #64]	; 0x40
    2f00:	e013      	b.n	2f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    2f02:	683b      	ldr	r3, [r7, #0]
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	2b6f      	cmp	r3, #111	; 0x6f
    2f08:	d102      	bne.n	2f10 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    2f0a:	2308      	movs	r3, #8
    2f0c:	643b      	str	r3, [r7, #64]	; 0x40
    2f0e:	e00c      	b.n	2f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	781b      	ldrb	r3, [r3, #0]
    2f14:	2b62      	cmp	r3, #98	; 0x62
    2f16:	d102      	bne.n	2f1e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    2f18:	2302      	movs	r3, #2
    2f1a:	643b      	str	r3, [r7, #64]	; 0x40
    2f1c:	e005      	b.n	2f2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    2f1e:	230a      	movs	r3, #10
    2f20:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f24:	f023 0310 	bic.w	r3, r3, #16
    2f28:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	781b      	ldrb	r3, [r3, #0]
    2f2e:	2b58      	cmp	r3, #88	; 0x58
    2f30:	d103      	bne.n	2f3a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    2f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f34:	f043 0320 	orr.w	r3, r3, #32
    2f38:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2f3a:	683b      	ldr	r3, [r7, #0]
    2f3c:	781b      	ldrb	r3, [r3, #0]
    2f3e:	2b69      	cmp	r3, #105	; 0x69
    2f40:	d007      	beq.n	2f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    2f42:	683b      	ldr	r3, [r7, #0]
    2f44:	781b      	ldrb	r3, [r3, #0]
    2f46:	2b64      	cmp	r3, #100	; 0x64
    2f48:	d003      	beq.n	2f52 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f4c:	f023 030c 	bic.w	r3, r3, #12
    2f50:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d003      	beq.n	2f64 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    2f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f5e:	f023 0301 	bic.w	r3, r3, #1
    2f62:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2f64:	683b      	ldr	r3, [r7, #0]
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	2b69      	cmp	r3, #105	; 0x69
    2f6a:	d004      	beq.n	2f76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    2f6c:	683b      	ldr	r3, [r7, #0]
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	2b64      	cmp	r3, #100	; 0x64
    2f72:	f040 808e 	bne.w	3092 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b2>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d02f      	beq.n	2fe0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x500>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2f80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2f82:	3307      	adds	r3, #7
    2f84:	f023 0307 	bic.w	r3, r3, #7
    2f88:	f103 0208 	add.w	r2, r3, #8
    2f8c:	66ba      	str	r2, [r7, #104]	; 0x68
    2f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f92:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2f96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    2f9a:	2a00      	cmp	r2, #0
    2f9c:	f173 0100 	sbcs.w	r1, r3, #0
    2fa0:	da02      	bge.n	2fa8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    2fa2:	4252      	negs	r2, r2
    2fa4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2fa8:	4610      	mov	r0, r2
    2faa:	4619      	mov	r1, r3
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	0fdb      	lsrs	r3, r3, #31
    2fb0:	b2dc      	uxtb	r4, r3
    2fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2fb4:	461a      	mov	r2, r3
    2fb6:	f04f 0300 	mov.w	r3, #0
    2fba:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    2fbc:	9508      	str	r5, [sp, #32]
    2fbe:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    2fc0:	9507      	str	r5, [sp, #28]
    2fc2:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    2fc4:	9506      	str	r5, [sp, #24]
    2fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2fca:	9402      	str	r4, [sp, #8]
    2fcc:	e9cd 0100 	strd	r0, r1, [sp]
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2fd4:	68b9      	ldr	r1, [r7, #8]
    2fd6:	68f8      	ldr	r0, [r7, #12]
    2fd8:	f7ff fc72 	bl	28c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2fdc:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    2fde:	e0c8      	b.n	3172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          else if (flags & FLAGS_LONG) {
    2fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d01e      	beq.n	3028 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x548>
            const long value = va_arg(va, long);
    2fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2fec:	1d1a      	adds	r2, r3, #4
    2fee:	66ba      	str	r2, [r7, #104]	; 0x68
    2ff0:	681b      	ldr	r3, [r3, #0]
    2ff2:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2ff4:	69fb      	ldr	r3, [r7, #28]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	bfb8      	it	lt
    2ffa:	425b      	neglt	r3, r3
    2ffc:	4619      	mov	r1, r3
    2ffe:	69fb      	ldr	r3, [r7, #28]
    3000:	0fdb      	lsrs	r3, r3, #31
    3002:	b2db      	uxtb	r3, r3
    3004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3006:	9205      	str	r2, [sp, #20]
    3008:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    300a:	9204      	str	r2, [sp, #16]
    300c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    300e:	9203      	str	r2, [sp, #12]
    3010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3012:	9202      	str	r2, [sp, #8]
    3014:	9301      	str	r3, [sp, #4]
    3016:	9100      	str	r1, [sp, #0]
    3018:	687b      	ldr	r3, [r7, #4]
    301a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    301c:	68b9      	ldr	r1, [r7, #8]
    301e:	68f8      	ldr	r0, [r7, #12]
    3020:	f7ff fbe6 	bl	27f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3024:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3026:	e0a4      	b.n	3172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    302e:	2b00      	cmp	r3, #0
    3030:	d005      	beq.n	303e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55e>
    3032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3034:	1d1a      	adds	r2, r3, #4
    3036:	66ba      	str	r2, [r7, #104]	; 0x68
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	b2db      	uxtb	r3, r3
    303c:	e00e      	b.n	305c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3040:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3044:	2b00      	cmp	r3, #0
    3046:	d005      	beq.n	3054 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x574>
    3048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    304a:	1d1a      	adds	r2, r3, #4
    304c:	66ba      	str	r2, [r7, #104]	; 0x68
    304e:	681b      	ldr	r3, [r3, #0]
    3050:	b21b      	sxth	r3, r3
    3052:	e003      	b.n	305c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57c>
    3054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3056:	1d1a      	adds	r2, r3, #4
    3058:	66ba      	str	r2, [r7, #104]	; 0x68
    305a:	681b      	ldr	r3, [r3, #0]
    305c:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    305e:	6a3b      	ldr	r3, [r7, #32]
    3060:	2b00      	cmp	r3, #0
    3062:	bfb8      	it	lt
    3064:	425b      	neglt	r3, r3
    3066:	4619      	mov	r1, r3
    3068:	6a3b      	ldr	r3, [r7, #32]
    306a:	0fdb      	lsrs	r3, r3, #31
    306c:	b2db      	uxtb	r3, r3
    306e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3070:	9205      	str	r2, [sp, #20]
    3072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3074:	9204      	str	r2, [sp, #16]
    3076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3078:	9203      	str	r2, [sp, #12]
    307a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    307c:	9202      	str	r2, [sp, #8]
    307e:	9301      	str	r3, [sp, #4]
    3080:	9100      	str	r1, [sp, #0]
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3086:	68b9      	ldr	r1, [r7, #8]
    3088:	68f8      	ldr	r0, [r7, #12]
    308a:	f7ff fbb1 	bl	27f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    308e:	6478      	str	r0, [r7, #68]	; 0x44
          }
    3090:	e06f      	b.n	3172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    3092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3094:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3098:	2b00      	cmp	r3, #0
    309a:	d020      	beq.n	30de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    309c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    309e:	3307      	adds	r3, #7
    30a0:	f023 0307 	bic.w	r3, r3, #7
    30a4:	f103 0208 	add.w	r2, r3, #8
    30a8:	66ba      	str	r2, [r7, #104]	; 0x68
    30aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    30ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
    30b0:	4608      	mov	r0, r1
    30b2:	f04f 0100 	mov.w	r1, #0
    30b6:	6d7c      	ldr	r4, [r7, #84]	; 0x54
    30b8:	9408      	str	r4, [sp, #32]
    30ba:	6d3c      	ldr	r4, [r7, #80]	; 0x50
    30bc:	9407      	str	r4, [sp, #28]
    30be:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
    30c0:	9406      	str	r4, [sp, #24]
    30c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    30c6:	2100      	movs	r1, #0
    30c8:	9102      	str	r1, [sp, #8]
    30ca:	e9cd 2300 	strd	r2, r3, [sp]
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    30d2:	68b9      	ldr	r1, [r7, #8]
    30d4:	68f8      	ldr	r0, [r7, #12]
    30d6:	f7ff fbf3 	bl	28c0 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    30da:	6478      	str	r0, [r7, #68]	; 0x44
    30dc:	e049      	b.n	3172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
#endif
          }
          else if (flags & FLAGS_LONG) {
    30de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    30e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    30e4:	2b00      	cmp	r3, #0
    30e6:	d016      	beq.n	3116 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x636>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    30e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    30ea:	1d1a      	adds	r2, r3, #4
    30ec:	66ba      	str	r2, [r7, #104]	; 0x68
    30ee:	681b      	ldr	r3, [r3, #0]
    30f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    30f2:	9205      	str	r2, [sp, #20]
    30f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    30f6:	9204      	str	r2, [sp, #16]
    30f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    30fa:	9203      	str	r2, [sp, #12]
    30fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    30fe:	9202      	str	r2, [sp, #8]
    3100:	2200      	movs	r2, #0
    3102:	9201      	str	r2, [sp, #4]
    3104:	9300      	str	r3, [sp, #0]
    3106:	687b      	ldr	r3, [r7, #4]
    3108:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    310a:	68b9      	ldr	r1, [r7, #8]
    310c:	68f8      	ldr	r0, [r7, #12]
    310e:	f7ff fb6f 	bl	27f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3112:	6478      	str	r0, [r7, #68]	; 0x44
    3114:	e02d      	b.n	3172 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x692>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3118:	f003 0340 	and.w	r3, r3, #64	; 0x40
    311c:	2b00      	cmp	r3, #0
    311e:	d005      	beq.n	312c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64c>
    3120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3122:	1d1a      	adds	r2, r3, #4
    3124:	66ba      	str	r2, [r7, #104]	; 0x68
    3126:	681b      	ldr	r3, [r3, #0]
    3128:	b2db      	uxtb	r3, r3
    312a:	e00e      	b.n	314a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    312c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3132:	2b00      	cmp	r3, #0
    3134:	d005      	beq.n	3142 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x662>
    3136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3138:	1d1a      	adds	r2, r3, #4
    313a:	66ba      	str	r2, [r7, #104]	; 0x68
    313c:	681b      	ldr	r3, [r3, #0]
    313e:	b29b      	uxth	r3, r3
    3140:	e003      	b.n	314a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x66a>
    3142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3144:	1d1a      	adds	r2, r3, #4
    3146:	66ba      	str	r2, [r7, #104]	; 0x68
    3148:	681b      	ldr	r3, [r3, #0]
    314a:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    314c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    314e:	9305      	str	r3, [sp, #20]
    3150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3152:	9304      	str	r3, [sp, #16]
    3154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3156:	9303      	str	r3, [sp, #12]
    3158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    315a:	9302      	str	r3, [sp, #8]
    315c:	2300      	movs	r3, #0
    315e:	9301      	str	r3, [sp, #4]
    3160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3162:	9300      	str	r3, [sp, #0]
    3164:	687b      	ldr	r3, [r7, #4]
    3166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3168:	68b9      	ldr	r1, [r7, #8]
    316a:	68f8      	ldr	r0, [r7, #12]
    316c:	f7ff fb40 	bl	27f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3170:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    3172:	683b      	ldr	r3, [r7, #0]
    3174:	3301      	adds	r3, #1
    3176:	603b      	str	r3, [r7, #0]
        break;
    3178:	e112      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#elif defined(PRINTF_SUPPORT_FLOAT)
      case 'f':
      case 'F':
        idx = _imprecise_ftoa(out, buffer, idx, maxlen,
                              (float)va_arg(va, double), precision, flags);
    317a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    317c:	3307      	adds	r3, #7
    317e:	f023 0307 	bic.w	r3, r3, #7
    3182:	f103 0208 	add.w	r2, r3, #8
    3186:	66ba      	str	r2, [r7, #104]	; 0x68
    3188:	e9d3 2300 	ldrd	r2, r3, [r3]
        idx = _imprecise_ftoa(out, buffer, idx, maxlen,
    318c:	4610      	mov	r0, r2
    318e:	4619      	mov	r1, r3
    3190:	f003 fb9a 	bl	68c8 <__aeabi_d2f>
    3194:	4602      	mov	r2, r0
    3196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3198:	9301      	str	r3, [sp, #4]
    319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    319c:	9300      	str	r3, [sp, #0]
    319e:	ee00 2a10 	vmov	s0, r2
    31a2:	687b      	ldr	r3, [r7, #4]
    31a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    31a6:	68b9      	ldr	r1, [r7, #8]
    31a8:	68f8      	ldr	r0, [r7, #12]
    31aa:	f7ff fc1b 	bl	29e4 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)>
    31ae:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	3301      	adds	r3, #1
    31b4:	603b      	str	r3, [r7, #0]
        break;
    31b6:	e0f3      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
#endif  // PRINTF_SUPPORT_FLOAT

      case 'c' : {
        unsigned int l = 1U;
    31b8:	2301      	movs	r3, #1
    31ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    31bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    31be:	f003 0302 	and.w	r3, r3, #2
    31c2:	2b00      	cmp	r3, #0
    31c4:	d113      	bne.n	31ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70e>
          while (l++ < width) {
    31c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    31c8:	1c5a      	adds	r2, r3, #1
    31ca:	63fa      	str	r2, [r7, #60]	; 0x3c
    31cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    31ce:	429a      	cmp	r2, r3
    31d0:	bf8c      	ite	hi
    31d2:	2301      	movhi	r3, #1
    31d4:	2300      	movls	r3, #0
    31d6:	b2db      	uxtb	r3, r3
    31d8:	2b00      	cmp	r3, #0
    31da:	d008      	beq.n	31ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70e>
            out(' ', buffer, idx++, maxlen);
    31dc:	68fc      	ldr	r4, [r7, #12]
    31de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    31e0:	1c53      	adds	r3, r2, #1
    31e2:	647b      	str	r3, [r7, #68]	; 0x44
    31e4:	687b      	ldr	r3, [r7, #4]
    31e6:	68b9      	ldr	r1, [r7, #8]
    31e8:	2020      	movs	r0, #32
    31ea:	47a0      	blx	r4
          while (l++ < width) {
    31ec:	e7eb      	b.n	31c6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e6>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31ee:	68fc      	ldr	r4, [r7, #12]
    31f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    31f2:	1d1a      	adds	r2, r3, #4
    31f4:	66ba      	str	r2, [r7, #104]	; 0x68
    31f6:	681b      	ldr	r3, [r3, #0]
    31f8:	b2d8      	uxtb	r0, r3
    31fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    31fc:	1c53      	adds	r3, r2, #1
    31fe:	647b      	str	r3, [r7, #68]	; 0x44
    3200:	687b      	ldr	r3, [r7, #4]
    3202:	68b9      	ldr	r1, [r7, #8]
    3204:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    3206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3208:	f003 0302 	and.w	r3, r3, #2
    320c:	2b00      	cmp	r3, #0
    320e:	d013      	beq.n	3238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x758>
          while (l++ < width) {
    3210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3212:	1c5a      	adds	r2, r3, #1
    3214:	63fa      	str	r2, [r7, #60]	; 0x3c
    3216:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3218:	429a      	cmp	r2, r3
    321a:	bf8c      	ite	hi
    321c:	2301      	movhi	r3, #1
    321e:	2300      	movls	r3, #0
    3220:	b2db      	uxtb	r3, r3
    3222:	2b00      	cmp	r3, #0
    3224:	d008      	beq.n	3238 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x758>
            out(' ', buffer, idx++, maxlen);
    3226:	68fc      	ldr	r4, [r7, #12]
    3228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    322a:	1c53      	adds	r3, r2, #1
    322c:	647b      	str	r3, [r7, #68]	; 0x44
    322e:	687b      	ldr	r3, [r7, #4]
    3230:	68b9      	ldr	r1, [r7, #8]
    3232:	2020      	movs	r0, #32
    3234:	47a0      	blx	r4
          while (l++ < width) {
    3236:	e7eb      	b.n	3210 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x730>
          }
        }
        format++;
    3238:	683b      	ldr	r3, [r7, #0]
    323a:	3301      	adds	r3, #1
    323c:	603b      	str	r3, [r7, #0]
        break;
    323e:	e0af      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
    3240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3242:	1d1a      	adds	r2, r3, #4
    3244:	66ba      	str	r2, [r7, #104]	; 0x68
    3246:	681b      	ldr	r3, [r3, #0]
    3248:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    324a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    324c:	2b00      	cmp	r3, #0
    324e:	d001      	beq.n	3254 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x774>
    3250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3252:	e001      	b.n	3258 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x778>
    3254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3258:	4619      	mov	r1, r3
    325a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    325c:	f7ff f942 	bl	24e4 <_strnlen_s(char const*, unsigned int)>
    3260:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    3262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3268:	2b00      	cmp	r3, #0
    326a:	d007      	beq.n	327c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x79c>
          l = (l < precision ? l : precision);
    326c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    326e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3270:	429a      	cmp	r2, r3
    3272:	d201      	bcs.n	3278 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x798>
    3274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3276:	e000      	b.n	327a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x79a>
    3278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    327a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    327c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    327e:	f003 0302 	and.w	r3, r3, #2
    3282:	2b00      	cmp	r3, #0
    3284:	d113      	bne.n	32ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ce>
          while (l++ < width) {
    3286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3288:	1c5a      	adds	r2, r3, #1
    328a:	637a      	str	r2, [r7, #52]	; 0x34
    328c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    328e:	429a      	cmp	r2, r3
    3290:	bf8c      	ite	hi
    3292:	2301      	movhi	r3, #1
    3294:	2300      	movls	r3, #0
    3296:	b2db      	uxtb	r3, r3
    3298:	2b00      	cmp	r3, #0
    329a:	d008      	beq.n	32ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ce>
            out(' ', buffer, idx++, maxlen);
    329c:	68fc      	ldr	r4, [r7, #12]
    329e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    32a0:	1c53      	adds	r3, r2, #1
    32a2:	647b      	str	r3, [r7, #68]	; 0x44
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	68b9      	ldr	r1, [r7, #8]
    32a8:	2020      	movs	r0, #32
    32aa:	47a0      	blx	r4
          while (l++ < width) {
    32ac:	e7eb      	b.n	3286 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7a6>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    32ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32b0:	781b      	ldrb	r3, [r3, #0]
    32b2:	2b00      	cmp	r3, #0
    32b4:	d00b      	beq.n	32ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ee>
    32b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    32bc:	2b00      	cmp	r3, #0
    32be:	d004      	beq.n	32ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ea>
    32c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    32c2:	1e5a      	subs	r2, r3, #1
    32c4:	64fa      	str	r2, [r7, #76]	; 0x4c
    32c6:	2b00      	cmp	r3, #0
    32c8:	d001      	beq.n	32ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ee>
    32ca:	2301      	movs	r3, #1
    32cc:	e000      	b.n	32d0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f0>
    32ce:	2300      	movs	r3, #0
    32d0:	2b00      	cmp	r3, #0
    32d2:	d00b      	beq.n	32ec <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x80c>
          out(*(p++), buffer, idx++, maxlen);
    32d4:	68fc      	ldr	r4, [r7, #12]
    32d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    32d8:	1c5a      	adds	r2, r3, #1
    32da:	63ba      	str	r2, [r7, #56]	; 0x38
    32dc:	7818      	ldrb	r0, [r3, #0]
    32de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    32e0:	1c53      	adds	r3, r2, #1
    32e2:	647b      	str	r3, [r7, #68]	; 0x44
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	68b9      	ldr	r1, [r7, #8]
    32e8:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    32ea:	e7e0      	b.n	32ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ce>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    32ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    32ee:	f003 0302 	and.w	r3, r3, #2
    32f2:	2b00      	cmp	r3, #0
    32f4:	d013      	beq.n	331e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83e>
          while (l++ < width) {
    32f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    32f8:	1c5a      	adds	r2, r3, #1
    32fa:	637a      	str	r2, [r7, #52]	; 0x34
    32fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    32fe:	429a      	cmp	r2, r3
    3300:	bf8c      	ite	hi
    3302:	2301      	movhi	r3, #1
    3304:	2300      	movls	r3, #0
    3306:	b2db      	uxtb	r3, r3
    3308:	2b00      	cmp	r3, #0
    330a:	d008      	beq.n	331e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x83e>
            out(' ', buffer, idx++, maxlen);
    330c:	68fc      	ldr	r4, [r7, #12]
    330e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3310:	1c53      	adds	r3, r2, #1
    3312:	647b      	str	r3, [r7, #68]	; 0x44
    3314:	687b      	ldr	r3, [r7, #4]
    3316:	68b9      	ldr	r1, [r7, #8]
    3318:	2020      	movs	r0, #32
    331a:	47a0      	blx	r4
          while (l++ < width) {
    331c:	e7eb      	b.n	32f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x816>
          }
        }
        format++;
    331e:	683b      	ldr	r3, [r7, #0]
    3320:	3301      	adds	r3, #1
    3322:	603b      	str	r3, [r7, #0]
        break;
    3324:	e03c      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    3326:	2308      	movs	r3, #8
    3328:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    332a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    332c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    3330:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    3332:	2300      	movs	r3, #0
    3334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    333a:	1d1a      	adds	r2, r3, #4
    333c:	66ba      	str	r2, [r7, #104]	; 0x68
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	461a      	mov	r2, r3
    3342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3344:	9305      	str	r3, [sp, #20]
    3346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3348:	9304      	str	r3, [sp, #16]
    334a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    334c:	9303      	str	r3, [sp, #12]
    334e:	2310      	movs	r3, #16
    3350:	9302      	str	r3, [sp, #8]
    3352:	2300      	movs	r3, #0
    3354:	9301      	str	r3, [sp, #4]
    3356:	9200      	str	r2, [sp, #0]
    3358:	687b      	ldr	r3, [r7, #4]
    335a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    335c:	68b9      	ldr	r1, [r7, #8]
    335e:	68f8      	ldr	r0, [r7, #12]
    3360:	f7ff fa46 	bl	27f0 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3364:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3366:	683b      	ldr	r3, [r7, #0]
    3368:	3301      	adds	r3, #1
    336a:	603b      	str	r3, [r7, #0]
        break;
    336c:	e018      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    336e:	68fc      	ldr	r4, [r7, #12]
    3370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3372:	1c53      	adds	r3, r2, #1
    3374:	647b      	str	r3, [r7, #68]	; 0x44
    3376:	687b      	ldr	r3, [r7, #4]
    3378:	68b9      	ldr	r1, [r7, #8]
    337a:	2025      	movs	r0, #37	; 0x25
    337c:	47a0      	blx	r4
        format++;
    337e:	683b      	ldr	r3, [r7, #0]
    3380:	3301      	adds	r3, #1
    3382:	603b      	str	r3, [r7, #0]
        break;
    3384:	e00c      	b.n	33a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>

      default :
        out(*format, buffer, idx++, maxlen);
    3386:	68fc      	ldr	r4, [r7, #12]
    3388:	683b      	ldr	r3, [r7, #0]
    338a:	7818      	ldrb	r0, [r3, #0]
    338c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    338e:	1c53      	adds	r3, r2, #1
    3390:	647b      	str	r3, [r7, #68]	; 0x44
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	68b9      	ldr	r1, [r7, #8]
    3396:	47a0      	blx	r4
        format++;
    3398:	683b      	ldr	r3, [r7, #0]
    339a:	3301      	adds	r3, #1
    339c:	603b      	str	r3, [r7, #0]
        break;
    339e:	bf00      	nop
  while (*format)
    33a0:	f7ff bbac 	b.w	2afc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    33a4:	68fc      	ldr	r4, [r7, #12]
    33a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	429a      	cmp	r2, r3
    33ac:	d302      	bcc.n	33b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d4>
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	1e5a      	subs	r2, r3, #1
    33b2:	e000      	b.n	33b6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8d6>
    33b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    33b6:	687b      	ldr	r3, [r7, #4]
    33b8:	68b9      	ldr	r1, [r7, #8]
    33ba:	2000      	movs	r0, #0
    33bc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    33be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    33c0:	4618      	mov	r0, r3
    33c2:	3758      	adds	r7, #88	; 0x58
    33c4:	46bd      	mov	sp, r7
    33c6:	bdb0      	pop	{r4, r5, r7, pc}

000033c8 <printf>:


///////////////////////////////////////////////////////////////////////////////

int printf(const char* format, ...)
{
    33c8:	b40f      	push	{r0, r1, r2, r3}
    33ca:	b580      	push	{r7, lr}
    33cc:	b0c4      	sub	sp, #272	; 0x110
    33ce:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    33d0:	f507 738a 	add.w	r3, r7, #276	; 0x114
    33d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  char buffer[SJ2_PRINTF_BUFFER_SIZE];
  const int ret = _vsnprintf(_out_chunk, buffer, (size_t)-1, format, va);
    33d8:	4639      	mov	r1, r7
    33da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    33de:	9300      	str	r3, [sp, #0]
    33e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    33e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33e8:	4807      	ldr	r0, [pc, #28]	; (3408 <printf+0x40>)
    33ea:	f7ff fb79 	bl	2ae0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    33ee:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  va_end(va);
  return ret;
    33f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
  // va_start(va, format);
  // char buffer[1];
  // const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  // va_end(va);
  // return ret;
}
    33f6:	4618      	mov	r0, r3
    33f8:	f507 7784 	add.w	r7, r7, #264	; 0x108
    33fc:	46bd      	mov	sp, r7
    33fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    3402:	b004      	add	sp, #16
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	00002429 	.word	0x00002429

0000340c <snprintf>:
  return ret;
}


int snprintf(char* buffer, size_t count, const char* format, ...)
{
    340c:	b40c      	push	{r2, r3}
    340e:	b580      	push	{r7, lr}
    3410:	b086      	sub	sp, #24
    3412:	af02      	add	r7, sp, #8
    3414:	6078      	str	r0, [r7, #4]
    3416:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
    3418:	f107 031c 	add.w	r3, r7, #28
    341c:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    341e:	68bb      	ldr	r3, [r7, #8]
    3420:	9300      	str	r3, [sp, #0]
    3422:	69bb      	ldr	r3, [r7, #24]
    3424:	683a      	ldr	r2, [r7, #0]
    3426:	6879      	ldr	r1, [r7, #4]
    3428:	4805      	ldr	r0, [pc, #20]	; (3440 <snprintf+0x34>)
    342a:	f7ff fb59 	bl	2ae0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    342e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    3430:	68fb      	ldr	r3, [r7, #12]
}
    3432:	4618      	mov	r0, r3
    3434:	3710      	adds	r7, #16
    3436:	46bd      	mov	sp, r7
    3438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    343c:	b002      	add	sp, #8
    343e:	4770      	bx	lr
    3440:	0000249b 	.word	0x0000249b

00003444 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
    min(const _Tp& __a, const _Tp& __b)
    3444:	b480      	push	{r7}
    3446:	b083      	sub	sp, #12
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    344c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
    344e:	683b      	ldr	r3, [r7, #0]
    3450:	681a      	ldr	r2, [r3, #0]
    3452:	687b      	ldr	r3, [r7, #4]
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	429a      	cmp	r2, r3
    3458:	d201      	bcs.n	345e <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x1a>
	return __b;
    345a:	683b      	ldr	r3, [r7, #0]
    345c:	e000      	b.n	3460 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x1c>
      return __a;
    345e:	687b      	ldr	r3, [r7, #4]
    }
    3460:	4618      	mov	r0, r3
    3462:	370c      	adds	r7, #12
    3464:	46bd      	mov	sp, r7
    3466:	f85d 7b04 	ldr.w	r7, [sp], #4
    346a:	4770      	bx	lr

0000346c <trace_initialize>:

// ----------------------------------------------------------------------------

void
trace_initialize(void)
{
    346c:	b480      	push	{r7}
    346e:	af00      	add	r7, sp, #0
  // No initialisations required for ITM / semihosting
}
    3470:	bf00      	nop
    3472:	46bd      	mov	sp, r7
    3474:	f85d 7b04 	ldr.w	r7, [sp], #4
    3478:	4770      	bx	lr

0000347a <trace_write>:
// of the trace_* functions.

ssize_t
trace_write (const char* buf __attribute__((unused)),
	     size_t nbyte __attribute__((unused)))
{
    347a:	b580      	push	{r7, lr}
    347c:	b082      	sub	sp, #8
    347e:	af00      	add	r7, sp, #0
    3480:	6078      	str	r0, [r7, #4]
    3482:	6039      	str	r1, [r7, #0]
#if defined(OS_USE_TRACE_ITM)
  return _trace_write_itm (buf, nbyte);
#elif defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)
  return _trace_write_semihosting_stdout(buf, nbyte);
    3484:	6839      	ldr	r1, [r7, #0]
    3486:	6878      	ldr	r0, [r7, #4]
    3488:	f000 f806 	bl	3498 <_trace_write_semihosting_stdout(char const*, unsigned int)>
    348c:	4603      	mov	r3, r0
    348e:	bf00      	nop
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
    3490:	4618      	mov	r0, r3
    3492:	3708      	adds	r7, #8
    3494:	46bd      	mov	sp, r7
    3496:	bd80      	pop	{r7, pc}

00003498 <_trace_write_semihosting_stdout(char const*, unsigned int)>:

#if defined(OS_USE_TRACE_SEMIHOSTING_STDOUT)

static ssize_t
_trace_write_semihosting_stdout (const char* buf, size_t nbyte)
{
    3498:	b5b0      	push	{r4, r5, r7, lr}
    349a:	b08c      	sub	sp, #48	; 0x30
    349c:	af00      	add	r7, sp, #0
    349e:	6078      	str	r0, [r7, #4]
    34a0:	6039      	str	r1, [r7, #0]
#if (defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)) && !defined(OS_HAS_NO_CORE_DEBUG)
  // Check if the debugger is enabled. CoreDebug is available only on CM3/CM4.
  // [Contributed by SourceForge user diabolo38]
  if ((CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) == 0)
    34a2:	4b2c      	ldr	r3, [pc, #176]	; (3554 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xbc>)
    34a4:	681b      	ldr	r3, [r3, #0]
    34a6:	f003 0301 	and.w	r3, r3, #1
    34aa:	2b00      	cmp	r3, #0
    34ac:	bf0c      	ite	eq
    34ae:	2301      	moveq	r3, #1
    34b0:	2300      	movne	r3, #0
    34b2:	b2db      	uxtb	r3, r3
    34b4:	2b00      	cmp	r3, #0
    34b6:	d001      	beq.n	34bc <_trace_write_semihosting_stdout(char const*, unsigned int)+0x24>
    {
      // If not, pretend we wrote all bytes
      return (ssize_t) (nbyte);
    34b8:	683b      	ldr	r3, [r7, #0]
    34ba:	e047      	b.n	354c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  static int handle;
  void* block[3];
  int ret;

  if (handle == 0)
    34bc:	4b26      	ldr	r3, [pc, #152]	; (3558 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	2b00      	cmp	r3, #0
    34c2:	d11d      	bne.n	3500 <_trace_write_semihosting_stdout(char const*, unsigned int)+0x68>
    {
      // On the first call get the file handle from the host
      block[0] = (void*) ":tt"; // special filename to be used for stdin/out/err
    34c4:	4b25      	ldr	r3, [pc, #148]	; (355c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc4>)
    34c6:	60bb      	str	r3, [r7, #8]
      block[1] = (void*) 4; // mode "w"
    34c8:	2304      	movs	r3, #4
    34ca:	60fb      	str	r3, [r7, #12]
      // length of ":tt", except null terminator
      block[2] = (void*) (sizeof(":tt") - 1);
    34cc:	2303      	movs	r3, #3
    34ce:	613b      	str	r3, [r7, #16]
    34d0:	2301      	movs	r3, #1
    34d2:	62bb      	str	r3, [r7, #40]	; 0x28
    34d4:	f107 0308 	add.w	r3, r7, #8
    34d8:	627b      	str	r3, [r7, #36]	; 0x24

      : [val] "=r" (value) /* Outputs */
      : [rsn] "r" (reason), [arg] "r" (arg), [swi] "i" (AngelSWI) /* Inputs */
      : "r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
      // Clobbers r0 and r1, and lr if in supervisor mode
  );
    34da:	6abc      	ldr	r4, [r7, #40]	; 0x28
    34dc:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    34de:	4620      	mov	r0, r4
    34e0:	4629      	mov	r1, r5
    34e2:	beab      	bkpt	0x00ab
    34e4:	4604      	mov	r4, r0
    34e6:	623c      	str	r4, [r7, #32]
  // Accordingly to page 13-77 of ARM DUI 0040D other registers
  // can also be clobbered. Some memory positions may also be
  // changed by a system call, so they should not be kept in
  // registers. Note: we are assuming the manual is right and
  // Angel is respecting the APCS.
  return value;
    34e8:	6a3b      	ldr	r3, [r7, #32]

      ret = call_host (SEMIHOSTING_SYS_OPEN, (void*) block);
    34ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (ret == -1)
    34ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    34f2:	d102      	bne.n	34fa <_trace_write_semihosting_stdout(char const*, unsigned int)+0x62>
        return -1;
    34f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34f8:	e028      	b.n	354c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

      handle = ret;
    34fa:	4a17      	ldr	r2, [pc, #92]	; (3558 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    34fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34fe:	6013      	str	r3, [r2, #0]
    }

  block[0] = (void*) handle;
    3500:	4b15      	ldr	r3, [pc, #84]	; (3558 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xc0>)
    3502:	681b      	ldr	r3, [r3, #0]
    3504:	60bb      	str	r3, [r7, #8]
  block[1] = (void*) buf;
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	60fb      	str	r3, [r7, #12]
  block[2] = (void*) nbyte;
    350a:	683b      	ldr	r3, [r7, #0]
    350c:	613b      	str	r3, [r7, #16]
    350e:	2305      	movs	r3, #5
    3510:	61fb      	str	r3, [r7, #28]
    3512:	f107 0308 	add.w	r3, r7, #8
    3516:	61bb      	str	r3, [r7, #24]
  );
    3518:	69fc      	ldr	r4, [r7, #28]
    351a:	69bd      	ldr	r5, [r7, #24]
    351c:	4620      	mov	r0, r4
    351e:	4629      	mov	r1, r5
    3520:	beab      	bkpt	0x00ab
    3522:	4604      	mov	r4, r0
    3524:	617c      	str	r4, [r7, #20]
  return value;
    3526:	697b      	ldr	r3, [r7, #20]
  // send character array to host file/device
  ret = call_host (SEMIHOSTING_SYS_WRITE, (void*) block);
    3528:	62fb      	str	r3, [r7, #44]	; 0x2c
  // this call returns the number of bytes NOT written (0 if all ok)

  // -1 is not a legal value, but SEGGER seems to return it
  if (ret == -1)
    352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    352c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3530:	d102      	bne.n	3538 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xa0>
    return -1;
    3532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3536:	e009      	b.n	354c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // The compliant way of returning errors
  if (ret == (int) nbyte)
    3538:	683b      	ldr	r3, [r7, #0]
    353a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    353c:	429a      	cmp	r2, r3
    353e:	d102      	bne.n	3546 <_trace_write_semihosting_stdout(char const*, unsigned int)+0xae>
    return -1;
    3540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3544:	e002      	b.n	354c <_trace_write_semihosting_stdout(char const*, unsigned int)+0xb4>

  // Return the number of bytes written
  return (ssize_t) (nbyte) - (ssize_t) ret;
    3546:	683a      	ldr	r2, [r7, #0]
    3548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    354a:	1ad3      	subs	r3, r2, r3
}
    354c:	4618      	mov	r0, r3
    354e:	3730      	adds	r7, #48	; 0x30
    3550:	46bd      	mov	sp, r7
    3552:	bdb0      	pop	{r4, r5, r7, pc}
    3554:	e000edf0 	.word	0xe000edf0
    3558:	100001ec 	.word	0x100001ec
    355c:	000078c0 	.word	0x000078c0

00003560 <sjsu::cortex::DwtCounter::Initialize()>:
  /// Address of the Cortex M CoreDebug module
  static inline CoreDebug_Type * core = CoreDebug;

  /// Initialize the debug core to enable counting and then being counting on
  /// the DWT.
  void Initialize()
    3560:	b480      	push	{r7}
    3562:	b083      	sub	sp, #12
    3564:	af00      	add	r7, sp, #0
    3566:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    3568:	4b0c      	ldr	r3, [pc, #48]	; (359c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    356a:	681b      	ldr	r3, [r3, #0]
    356c:	68da      	ldr	r2, [r3, #12]
    356e:	4b0b      	ldr	r3, [pc, #44]	; (359c <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3576:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT = 0;
    3578:	4b09      	ldr	r3, [pc, #36]	; (35a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	2200      	movs	r2, #0
    357e:	605a      	str	r2, [r3, #4]
    dwt->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
    3580:	4b07      	ldr	r3, [pc, #28]	; (35a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3582:	681b      	ldr	r3, [r3, #0]
    3584:	681a      	ldr	r2, [r3, #0]
    3586:	4b06      	ldr	r3, [pc, #24]	; (35a0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	f042 0201 	orr.w	r2, r2, #1
    358e:	601a      	str	r2, [r3, #0]
  }
    3590:	bf00      	nop
    3592:	370c      	adds	r7, #12
    3594:	46bd      	mov	sp, r7
    3596:	f85d 7b04 	ldr.w	r7, [sp], #4
    359a:	4770      	bx	lr
    359c:	10000014 	.word	0x10000014
    35a0:	10000010 	.word	0x10000010

000035a4 <sjsu::cortex::DwtCounter::GetCount()>:

  /// Return the current number of ticks. Note that this is typically 2x the
  /// system frequency as it counts on rising and falling edges.
  uint32_t GetCount()
    35a4:	b480      	push	{r7}
    35a6:	b083      	sub	sp, #12
    35a8:	af00      	add	r7, sp, #0
    35aa:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    35ac:	4b04      	ldr	r3, [pc, #16]	; (35c0 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    35ae:	681b      	ldr	r3, [r3, #0]
    35b0:	685b      	ldr	r3, [r3, #4]
  }
    35b2:	4618      	mov	r0, r3
    35b4:	370c      	adds	r7, #12
    35b6:	46bd      	mov	sp, r7
    35b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	10000010 	.word	0x10000010

000035c4 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    35c4:	b480      	push	{r7}
    35c6:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    35c8:	f8df 001c 	ldr.w	r0, [pc, #28]	; 35e8 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    35cc:	6801      	ldr	r1, [r0, #0]
    35ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    35d2:	6001      	str	r1, [r0, #0]
    35d4:	f3bf 8f4f 	dsb	sy
    35d8:	f3bf 8f6f 	isb	sy
  }
}
    35dc:	bf00      	nop
    35de:	46bd      	mov	sp, r7
    35e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35e4:	4770      	bx	lr
    35e6:	0000      	.short	0x0000
    35e8:	e000ed88 	.word	0xe000ed88

000035ec <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>:

  /// Set the controller for the platform
  ///
  /// @param interrupt_controller - a pointer to the current platform's
  ///        interrupt controller.
  static void SetPlatformController(InterruptController * interrupt_controller)
    35ec:	b480      	push	{r7}
    35ee:	b083      	sub	sp, #12
    35f0:	af00      	add	r7, sp, #0
    35f2:	6078      	str	r0, [r7, #4]
  {
    platform_interrupt_controller = interrupt_controller;
    35f4:	4a04      	ldr	r2, [pc, #16]	; (3608 <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)+0x1c>)
    35f6:	687b      	ldr	r3, [r7, #4]
    35f8:	6013      	str	r3, [r2, #0]
  }
    35fa:	bf00      	nop
    35fc:	370c      	adds	r7, #12
    35fe:	46bd      	mov	sp, r7
    3600:	f85d 7b04 	ldr.w	r7, [sp], #4
    3604:	4770      	bx	lr
    3606:	bf00      	nop
    3608:	100001f0 	.word	0x100001f0

0000360c <sjsu::InterruptController::GetPlatformController()>:
  /// Retrieve a reference of the platforms interrupt controller
  static sjsu::InterruptController & GetPlatformController()
    360c:	b480      	push	{r7}
    360e:	af00      	add	r7, sp, #0
  {
    return *platform_interrupt_controller;
    3610:	4b03      	ldr	r3, [pc, #12]	; (3620 <sjsu::InterruptController::GetPlatformController()+0x14>)
    3612:	681b      	ldr	r3, [r3, #0]
  }
    3614:	4618      	mov	r0, r3
    3616:	46bd      	mov	sp, r7
    3618:	f85d 7b04 	ldr.w	r7, [sp], #4
    361c:	4770      	bx	lr
    361e:	bf00      	nop
    3620:	100001f0 	.word	0x100001f0

00003624 <units::literals::operator"" _Hz(unsigned long long)>:
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    3624:	b580      	push	{r7, lr}
    3626:	b084      	sub	sp, #16
    3628:	af00      	add	r7, sp, #0
    362a:	e9c7 0100 	strd	r0, r1, [r7]
    362e:	e9d7 0100 	ldrd	r0, r1, [r7]
    3632:	f003 fa61 	bl	6af8 <__aeabi_ul2f>
    3636:	4602      	mov	r2, r0
    3638:	f107 030c 	add.w	r3, r7, #12
    363c:	ee00 2a10 	vmov	s0, r2
    3640:	4618      	mov	r0, r3
    3642:	f000 f86a 	bl	371a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3646:	68fb      	ldr	r3, [r7, #12]
    3648:	4618      	mov	r0, r3
    364a:	3710      	adds	r7, #16
    364c:	46bd      	mov	sp, r7
    364e:	bd80      	pop	{r7, pc}

00003650 <units::literals::operator"" _MHz(unsigned long long)>:
    3650:	b580      	push	{r7, lr}
    3652:	b084      	sub	sp, #16
    3654:	af00      	add	r7, sp, #0
    3656:	e9c7 0100 	strd	r0, r1, [r7]
    365a:	e9d7 0100 	ldrd	r0, r1, [r7]
    365e:	f003 fa4b 	bl	6af8 <__aeabi_ul2f>
    3662:	4602      	mov	r2, r0
    3664:	f107 030c 	add.w	r3, r7, #12
    3668:	ee00 2a10 	vmov	s0, r2
    366c:	4618      	mov	r0, r3
    366e:	f000 f805 	bl	367c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3672:	68fb      	ldr	r3, [r7, #12]
    3674:	4618      	mov	r0, r3
    3676:	3710      	adds	r7, #16
    3678:	46bd      	mov	sp, r7
    367a:	bd80      	pop	{r7, pc}

0000367c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    367c:	b580      	push	{r7, lr}
    367e:	b082      	sub	sp, #8
    3680:	af00      	add	r7, sp, #0
    3682:	6078      	str	r0, [r7, #4]
    3684:	ed87 0a00 	vstr	s0, [r7]
    3688:	687b      	ldr	r3, [r7, #4]
    368a:	463a      	mov	r2, r7
    368c:	4611      	mov	r1, r2
    368e:	4618      	mov	r0, r3
    3690:	f7fe f9bc 	bl	1a0c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	4618      	mov	r0, r3
    3698:	3708      	adds	r7, #8
    369a:	46bd      	mov	sp, r7
    369c:	bd80      	pop	{r7, pc}

0000369e <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    369e:	b580      	push	{r7, lr}
    36a0:	b086      	sub	sp, #24
    36a2:	af00      	add	r7, sp, #0
    36a4:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    36a6:	6878      	ldr	r0, [r7, #4]
    36a8:	f000 f807 	bl	36ba <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    36ac:	eef0 7a40 	vmov.f32	s15, s0
	}
    36b0:	eeb0 0a67 	vmov.f32	s0, s15
    36b4:	3718      	adds	r7, #24
    36b6:	46bd      	mov	sp, r7
    36b8:	bd80      	pop	{r7, pc}

000036ba <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    36ba:	b480      	push	{r7}
    36bc:	b085      	sub	sp, #20
    36be:	af00      	add	r7, sp, #0
    36c0:	60f8      	str	r0, [r7, #12]
    36c2:	7239      	strb	r1, [r7, #8]
    36c4:	713a      	strb	r2, [r7, #4]
    36c6:	703b      	strb	r3, [r7, #0]
			return value;
    36c8:	68fb      	ldr	r3, [r7, #12]
    36ca:	681b      	ldr	r3, [r3, #0]
    36cc:	ee07 3a90 	vmov	s15, r3
		}
    36d0:	eeb0 0a67 	vmov.f32	s0, s15
    36d4:	3714      	adds	r7, #20
    36d6:	46bd      	mov	sp, r7
    36d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    36dc:	4770      	bx	lr

000036de <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    36de:	b580      	push	{r7, lr}
    36e0:	ed2d 8b02 	vpush	{d8}
    36e4:	b082      	sub	sp, #8
    36e6:	af00      	add	r7, sp, #0
    36e8:	6078      	str	r0, [r7, #4]
    36ea:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	ed93 8a00 	vldr	s16, [r3]
    36f2:	683b      	ldr	r3, [r7, #0]
    36f4:	4618      	mov	r0, r3
    36f6:	f7ff ffd2 	bl	369e <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    36fa:	eef0 7a40 	vmov.f32	s15, s0
    36fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3706:	bf94      	ite	ls
    3708:	2301      	movls	r3, #1
    370a:	2300      	movhi	r3, #0
    370c:	b2db      	uxtb	r3, r3
		}
    370e:	4618      	mov	r0, r3
    3710:	3708      	adds	r7, #8
    3712:	46bd      	mov	sp, r7
    3714:	ecbd 8b02 	vpop	{d8}
    3718:	bd80      	pop	{r7, pc}

0000371a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    371a:	b580      	push	{r7, lr}
    371c:	b082      	sub	sp, #8
    371e:	af00      	add	r7, sp, #0
    3720:	6078      	str	r0, [r7, #4]
    3722:	ed87 0a00 	vstr	s0, [r7]
    3726:	687b      	ldr	r3, [r7, #4]
    3728:	463a      	mov	r2, r7
    372a:	4611      	mov	r1, r2
    372c:	4618      	mov	r0, r3
    372e:	f7fe f96d 	bl	1a0c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	4618      	mov	r0, r3
    3736:	3708      	adds	r7, #8
    3738:	46bd      	mov	sp, r7
    373a:	bd80      	pop	{r7, pc}

0000373c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    373c:	b580      	push	{r7, lr}
    373e:	b086      	sub	sp, #24
    3740:	af00      	add	r7, sp, #0
    3742:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3744:	6878      	ldr	r0, [r7, #4]
    3746:	f000 f807 	bl	3758 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    374a:	eef0 7a40 	vmov.f32	s15, s0
	}
    374e:	eeb0 0a67 	vmov.f32	s0, s15
    3752:	3718      	adds	r7, #24
    3754:	46bd      	mov	sp, r7
    3756:	bd80      	pop	{r7, pc}

00003758 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3758:	b480      	push	{r7}
    375a:	b085      	sub	sp, #20
    375c:	af00      	add	r7, sp, #0
    375e:	60f8      	str	r0, [r7, #12]
    3760:	7239      	strb	r1, [r7, #8]
    3762:	713a      	strb	r2, [r7, #4]
    3764:	703b      	strb	r3, [r7, #0]
			return value;
    3766:	68fb      	ldr	r3, [r7, #12]
    3768:	681b      	ldr	r3, [r3, #0]
    376a:	ee07 3a90 	vmov	s15, r3
		}
    376e:	eeb0 0a67 	vmov.f32	s0, s15
    3772:	3714      	adds	r7, #20
    3774:	46bd      	mov	sp, r7
    3776:	f85d 7b04 	ldr.w	r7, [sp], #4
    377a:	4770      	bx	lr

0000377c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    377c:	b580      	push	{r7, lr}
    377e:	ed2d 8b02 	vpush	{d8}
    3782:	b082      	sub	sp, #8
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
    3788:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	ed93 8a00 	vldr	s16, [r3]
    3790:	683b      	ldr	r3, [r7, #0]
    3792:	4618      	mov	r0, r3
    3794:	f7ff ffd2 	bl	373c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3798:	eef0 7a40 	vmov.f32	s15, s0
    379c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    37a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37a4:	bf94      	ite	ls
    37a6:	2301      	movls	r3, #1
    37a8:	2300      	movhi	r3, #0
    37aa:	b2db      	uxtb	r3, r3
		}
    37ac:	4618      	mov	r0, r3
    37ae:	3708      	adds	r7, #8
    37b0:	46bd      	mov	sp, r7
    37b2:	ecbd 8b02 	vpop	{d8}
    37b6:	bd80      	pop	{r7, pc}

000037b8 <sjsu::operator==(sjsu::Status const&, sjsu::Status const&)>:
{
    37b8:	b480      	push	{r7}
    37ba:	b083      	sub	sp, #12
    37bc:	af00      	add	r7, sp, #0
    37be:	6078      	str	r0, [r7, #4]
    37c0:	6039      	str	r1, [r7, #0]
  return rhs.code == lhs.code;
    37c2:	687b      	ldr	r3, [r7, #4]
    37c4:	681a      	ldr	r2, [r3, #0]
    37c6:	683b      	ldr	r3, [r7, #0]
    37c8:	681b      	ldr	r3, [r3, #0]
    37ca:	429a      	cmp	r2, r3
    37cc:	bf0c      	ite	eq
    37ce:	2301      	moveq	r3, #1
    37d0:	2300      	movne	r3, #0
    37d2:	b2db      	uxtb	r3, r3
}
    37d4:	4618      	mov	r0, r3
    37d6:	370c      	adds	r7, #12
    37d8:	46bd      	mov	sp, r7
    37da:	f85d 7b04 	ldr.w	r7, [sp], #4
    37de:	4770      	bx	lr

000037e0 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>:
{
    37e0:	b580      	push	{r7, lr}
    37e2:	b082      	sub	sp, #8
    37e4:	af00      	add	r7, sp, #0
    37e6:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    37e8:	6879      	ldr	r1, [r7, #4]
    37ea:	4803      	ldr	r0, [pc, #12]	; (37f8 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)+0x18>)
    37ec:	f001 ff0e 	bl	560c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
}
    37f0:	bf00      	nop
    37f2:	3708      	adds	r7, #8
    37f4:	46bd      	mov	sp, r7
    37f6:	bd80      	pop	{r7, pc}
    37f8:	10000148 	.word	0x10000148

000037fc <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>:
  /// user. This can be run by the user if they want to inject their own
  /// system controller into the system to be used by the whole system.
  ///
  /// @param system_controller - a pointer to the current platform's
  ///        system controller.
  static void SetPlatformController(SystemController * system_controller)
    37fc:	b480      	push	{r7}
    37fe:	b083      	sub	sp, #12
    3800:	af00      	add	r7, sp, #0
    3802:	6078      	str	r0, [r7, #4]
  {
    platform_system_controller = system_controller;
    3804:	4a04      	ldr	r2, [pc, #16]	; (3818 <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)+0x1c>)
    3806:	687b      	ldr	r3, [r7, #4]
    3808:	6013      	str	r3, [r2, #0]
  }
    380a:	bf00      	nop
    380c:	370c      	adds	r7, #12
    380e:	46bd      	mov	sp, r7
    3810:	f85d 7b04 	ldr.w	r7, [sp], #4
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	100001f4 	.word	0x100001f4

0000381c <sjsu::SystemController::GetPlatformController()>:
  /// Get the system controller set for this platform.
  /// After main() is called by the startup code, this function will return a
  /// valid system controller. It is required that each platform startup routine
  /// set a system controller using the `void Set(SystemController&)` static
  /// method.
  static SystemController & GetPlatformController()
    381c:	b480      	push	{r7}
    381e:	af00      	add	r7, sp, #0
  {
    return *platform_system_controller;
    3820:	4b03      	ldr	r3, [pc, #12]	; (3830 <sjsu::SystemController::GetPlatformController()+0x14>)
    3822:	681b      	ldr	r3, [r3, #0]
  }
    3824:	4618      	mov	r0, r3
    3826:	46bd      	mov	sp, r7
    3828:	f85d 7b04 	ldr.w	r7, [sp], #4
    382c:	4770      	bx	lr
    382e:	bf00      	nop
    3830:	100001f4 	.word	0x100001f4

00003834 <std::function<void ()>::~function()>:
    class function<_Res(_ArgTypes...)>
    3834:	b580      	push	{r7, lr}
    3836:	b082      	sub	sp, #8
    3838:	af00      	add	r7, sp, #0
    383a:	6078      	str	r0, [r7, #4]
    383c:	687b      	ldr	r3, [r7, #4]
    383e:	4618      	mov	r0, r3
    3840:	f7fc fe4c 	bl	4dc <std::_Function_base::~_Function_base()>
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	4618      	mov	r0, r3
    3848:	3708      	adds	r7, #8
    384a:	46bd      	mov	sp, r7
    384c:	bd80      	pop	{r7, pc}
    384e:	Address 0x000000000000384e is out of bounds.


00003850 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }

  /// System timer interrupt handler.
  static void SystemTimerHandler()
    3850:	b580      	push	{r7, lr}
    3852:	b084      	sub	sp, #16
    3854:	af00      	add	r7, sp, #0
  {
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    millisecond_count += 1ms;
    3856:	f107 0308 	add.w	r3, r7, #8
    385a:	4618      	mov	r0, r3
    385c:	f001 feff 	bl	565e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    3860:	f107 0208 	add.w	r2, r7, #8
    3864:	463b      	mov	r3, r7
    3866:	4611      	mov	r1, r2
    3868:	4618      	mov	r0, r3
    386a:	f7fd fa62 	bl	d32 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    386e:	463b      	mov	r3, r7
    3870:	4619      	mov	r1, r3
    3872:	4808      	ldr	r0, [pc, #32]	; (3894 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    3874:	f7fc ffa8 	bl	7c8 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    if (callback)
    3878:	4807      	ldr	r0, [pc, #28]	; (3898 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    387a:	f001 fefd 	bl	5678 <std::function<void ()>::operator bool() const>
    387e:	4603      	mov	r3, r0
    3880:	2b00      	cmp	r3, #0
    3882:	d002      	beq.n	388a <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x3a>
    {
      callback();
    3884:	4804      	ldr	r0, [pc, #16]	; (3898 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x48>)
    3886:	f001 ff07 	bl	5698 <std::function<void ()>::operator()() const>
    }
  }
    388a:	bf00      	nop
    388c:	3710      	adds	r7, #16
    388e:	46bd      	mov	sp, r7
    3890:	bd80      	pop	{r7, pc}
    3892:	bf00      	nop
    3894:	10000208 	.word	0x10000208
    3898:	100001f8 	.word	0x100001f8

0000389c <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>:
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
    389c:	b580      	push	{r7, lr}
    389e:	b084      	sub	sp, #16
    38a0:	af00      	add	r7, sp, #0
    38a2:	60f8      	str	r0, [r7, #12]
    38a4:	60b9      	str	r1, [r7, #8]
    38a6:	607a      	str	r2, [r7, #4]
      { return __d * __s; }
    38a8:	68fb      	ldr	r3, [r7, #12]
    38aa:	68ba      	ldr	r2, [r7, #8]
    38ac:	6879      	ldr	r1, [r7, #4]
    38ae:	4618      	mov	r0, r3
    38b0:	f000 f805 	bl	38be <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    38b4:	bf00      	nop
    38b6:	68f8      	ldr	r0, [r7, #12]
    38b8:	3710      	adds	r7, #16
    38ba:	46bd      	mov	sp, r7
    38bc:	bd80      	pop	{r7, pc}

000038be <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    38be:	b5b0      	push	{r4, r5, r7, lr}
    38c0:	b088      	sub	sp, #32
    38c2:	af00      	add	r7, sp, #0
    38c4:	60f8      	str	r0, [r7, #12]
    38c6:	60b9      	str	r1, [r7, #8]
    38c8:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() * __s);
    38ca:	68bb      	ldr	r3, [r7, #8]
    38cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    38d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    38d4:	f107 0318 	add.w	r3, r7, #24
    38d8:	4618      	mov	r0, r3
    38da:	f7fc fe23 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    38de:	687b      	ldr	r3, [r7, #4]
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	461a      	mov	r2, r3
    38e4:	f04f 0300 	mov.w	r3, #0
    38e8:	fb02 f501 	mul.w	r5, r2, r1
    38ec:	fb00 f403 	mul.w	r4, r0, r3
    38f0:	442c      	add	r4, r5
    38f2:	fba0 2302 	umull	r2, r3, r0, r2
    38f6:	18e1      	adds	r1, r4, r3
    38f8:	460b      	mov	r3, r1
    38fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    38fe:	f107 0310 	add.w	r3, r7, #16
    3902:	4619      	mov	r1, r3
    3904:	68f8      	ldr	r0, [r7, #12]
    3906:	f7fc fe43 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    390a:	68f8      	ldr	r0, [r7, #12]
    390c:	3720      	adds	r7, #32
    390e:	46bd      	mov	sp, r7
    3910:	bdb0      	pop	{r4, r5, r7, pc}

00003912 <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>:
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
    3912:	b580      	push	{r7, lr}
    3914:	b088      	sub	sp, #32
    3916:	af00      	add	r7, sp, #0
    3918:	60f8      	str	r0, [r7, #12]
    391a:	60b9      	str	r1, [r7, #8]
    391c:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__d).count() / __s);
    391e:	68bb      	ldr	r3, [r7, #8]
    3920:	e9d3 2300 	ldrd	r2, r3, [r3]
    3924:	e9c7 2306 	strd	r2, r3, [r7, #24]
    3928:	f107 0318 	add.w	r3, r7, #24
    392c:	4618      	mov	r0, r3
    392e:	f7fc fdf9 	bl	524 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::count() const>
    3932:	687b      	ldr	r3, [r7, #4]
    3934:	681b      	ldr	r3, [r3, #0]
    3936:	461a      	mov	r2, r3
    3938:	f04f 0300 	mov.w	r3, #0
    393c:	f003 f922 	bl	6b84 <__aeabi_ldivmod>
    3940:	4602      	mov	r2, r0
    3942:	460b      	mov	r3, r1
    3944:	e9c7 2304 	strd	r2, r3, [r7, #16]
    3948:	f107 0310 	add.w	r3, r7, #16
    394c:	4619      	mov	r1, r3
    394e:	68f8      	ldr	r0, [r7, #12]
    3950:	f7fc fe1e 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    3954:	68f8      	ldr	r0, [r7, #12]
    3956:	3720      	adds	r7, #32
    3958:	46bd      	mov	sp, r7
    395a:	bd80      	pop	{r7, pc}

0000395c <sjsu::cortex::SystemTimer::GetCount()>:

  /// @return returns the current system_timer counter value.
  static std::chrono::nanoseconds GetCount()
    395c:	b580      	push	{r7, lr}
    395e:	b08c      	sub	sp, #48	; 0x30
    3960:	af00      	add	r7, sp, #0
    3962:	6078      	str	r0, [r7, #4]
  {
    // Capture all count variables at this instant.
    uint32_t high_speed_ticks = dwt_counter.GetCount();
    3964:	4816      	ldr	r0, [pc, #88]	; (39c0 <sjsu::cortex::SystemTimer::GetCount()+0x64>)
    3966:	f7ff fe1d 	bl	35a4 <sjsu::cortex::DwtCounter::GetCount()>
    396a:	62f8      	str	r0, [r7, #44]	; 0x2c
    auto current_millis_count = millisecond_count;
    396c:	4b15      	ldr	r3, [pc, #84]	; (39c4 <sjsu::cortex::SystemTimer::GetCount()+0x68>)
    396e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3972:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Get rid of the portion of the dwt tick count that is above 1ms.
    // We only want the information about the ticks that is below 1ms, since we
    // get the 1ms count from the SysTick timer interrupt.
    uint32_t sub_millis_ticks = (high_speed_ticks % ticks_per_millisecond);
    3976:	4b14      	ldr	r3, [pc, #80]	; (39c8 <sjsu::cortex::SystemTimer::GetCount()+0x6c>)
    3978:	681a      	ldr	r2, [r3, #0]
    397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    397c:	fbb3 f1f2 	udiv	r1, r3, r2
    3980:	fb02 f201 	mul.w	r2, r2, r1
    3984:	1a9b      	subs	r3, r3, r2
    3986:	61fb      	str	r3, [r7, #28]
    // Perform the conversion from ticks to nanoseconds
    auto nanoseconds_unscaled = (sub_millis_ticks * nanoseconds_per_tick);
    3988:	f107 0310 	add.w	r3, r7, #16
    398c:	f107 011c 	add.w	r1, r7, #28
    3990:	4a0e      	ldr	r2, [pc, #56]	; (39cc <sjsu::cortex::SystemTimer::GetCount()+0x70>)
    3992:	4618      	mov	r0, r3
    3994:	f7ff ff82 	bl	389c <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    // Nanoseconds per tick is actually scaled up by the kFixedPointScaling
    // factor, meaning it needs to be divided by that value to get the correct
    // nanosecond_uptime.
    auto nanoseconds_uptime_scaled = nanoseconds_unscaled / kFixedPointScaling;
    3998:	f107 0308 	add.w	r3, r7, #8
    399c:	f107 0110 	add.w	r1, r7, #16
    39a0:	4a0b      	ldr	r2, [pc, #44]	; (39d0 <sjsu::cortex::SystemTimer::GetCount()+0x74>)
    39a2:	4618      	mov	r0, r3
    39a4:	f7ff ffb5 	bl	3912 <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>

    // Result is simply the uptime milliseconds (represented in nanoseconds) +
    // the added nanoseconds
    return current_millis_count + nanoseconds_uptime_scaled;
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	f107 0208 	add.w	r2, r7, #8
    39ae:	f107 0120 	add.w	r1, r7, #32
    39b2:	4618      	mov	r0, r3
    39b4:	f7fd f900 	bl	bb8 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000000ll>, long long, std::ratio<1ll, 1000000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
  }
    39b8:	6878      	ldr	r0, [r7, #4]
    39ba:	3730      	adds	r7, #48	; 0x30
    39bc:	46bd      	mov	sp, r7
    39be:	bd80      	pop	{r7, pc}
    39c0:	10000210 	.word	0x10000210
    39c4:	10000208 	.word	0x10000208
    39c8:	10000028 	.word	0x10000028
    39cc:	10000020 	.word	0x10000020
    39d0:	00007dcc 	.word	0x00007dcc

000039d4 <sjsu::cortex::SystemTimer::Initialize() const>:
                                 uint8_t priority = -1)
      : id_(id), priority_(priority)
  {
  }

  void Initialize() const override
    39d4:	b590      	push	{r4, r7, lr}
    39d6:	b08b      	sub	sp, #44	; 0x2c
    39d8:	af00      	add	r7, sp, #0
    39da:	60f8      	str	r0, [r7, #12]
  {
    dwt_counter.Initialize();
    39dc:	481d      	ldr	r0, [pc, #116]	; (3a54 <sjsu::cortex::SystemTimer::Initialize() const+0x80>)
    39de:	f7ff fdbf 	bl	3560 <sjsu::cortex::DwtCounter::Initialize()>

    auto system_frequency = SystemController::GetPlatformController()
    39e2:	f7ff ff1b 	bl	381c <sjsu::SystemController::GetPlatformController()>
    39e6:	4603      	mov	r3, r0
                                .GetClockRate(id_)
    39e8:	681a      	ldr	r2, [r3, #0]
    39ea:	3208      	adds	r2, #8
    39ec:	6812      	ldr	r2, [r2, #0]
    39ee:	68f9      	ldr	r1, [r7, #12]
    39f0:	6849      	ldr	r1, [r1, #4]
    39f2:	4618      	mov	r0, r3
    39f4:	4790      	blx	r2
    39f6:	4603      	mov	r3, r0
    39f8:	617b      	str	r3, [r7, #20]
                                .to<uint32_t>();
    39fa:	f107 0314 	add.w	r3, r7, #20
    39fe:	4618      	mov	r0, r3
    3a00:	f001 fe60 	bl	56c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    3a04:	4603      	mov	r3, r0
    3a06:	613b      	str	r3, [r7, #16]

    ticks_per_millisecond = system_frequency / 1000 /* ms/s */;
    3a08:	693b      	ldr	r3, [r7, #16]
    3a0a:	4a13      	ldr	r2, [pc, #76]	; (3a58 <sjsu::cortex::SystemTimer::Initialize() const+0x84>)
    3a0c:	fba2 2303 	umull	r2, r3, r2, r3
    3a10:	099b      	lsrs	r3, r3, #6
    3a12:	4a12      	ldr	r2, [pc, #72]	; (3a5c <sjsu::cortex::SystemTimer::Initialize() const+0x88>)
    3a14:	6013      	str	r3, [r2, #0]
    nanoseconds_per_tick =
        (kFixedPointScaling * 1'000'000'000ns) / system_frequency;
    3a16:	f107 0320 	add.w	r3, r7, #32
    3a1a:	4618      	mov	r0, r3
    3a1c:	f001 fe5e 	bl	56dc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    3a20:	f107 0318 	add.w	r3, r7, #24
    3a24:	f107 0220 	add.w	r2, r7, #32
    3a28:	490d      	ldr	r1, [pc, #52]	; (3a60 <sjsu::cortex::SystemTimer::Initialize() const+0x8c>)
    3a2a:	4618      	mov	r0, r3
    3a2c:	f7ff ff36 	bl	389c <std::chrono::duration<std::enable_if<std::is_convertible<unsigned long const&, std::common_type<long long, unsigned long>::type>::value, std::common_type<long long, unsigned long>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator*<unsigned long, long long, std::ratio<1ll, 1000000000ll> >(unsigned long const&, std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&)>
    3a30:	4c0c      	ldr	r4, [pc, #48]	; (3a64 <sjsu::cortex::SystemTimer::Initialize() const+0x90>)
    3a32:	463b      	mov	r3, r7
    3a34:	f107 0210 	add.w	r2, r7, #16
    3a38:	f107 0118 	add.w	r1, r7, #24
    3a3c:	4618      	mov	r0, r3
    3a3e:	f7ff ff68 	bl	3912 <std::chrono::duration<std::enable_if<std::is_convertible<std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type const&, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::value, std::common_type<long long, std::enable_if<!std::chrono::__is_duration<unsigned long>::value, unsigned long>::type>::type>::type, std::ratio<1ll, 1000000000ll> > std::chrono::operator/<long long, std::ratio<1ll, 1000000000ll>, unsigned long>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > const&, unsigned long const&)>
    3a42:	e9d7 2300 	ldrd	r2, r3, [r7]
    3a46:	e9c4 2300 	strd	r2, r3, [r4]
  }
    3a4a:	bf00      	nop
    3a4c:	372c      	adds	r7, #44	; 0x2c
    3a4e:	46bd      	mov	sp, r7
    3a50:	bd90      	pop	{r4, r7, pc}
    3a52:	bf00      	nop
    3a54:	10000210 	.word	0x10000210
    3a58:	10624dd3 	.word	0x10624dd3
    3a5c:	10000028 	.word	0x10000028
    3a60:	00007dcc 	.word	0x00007dcc
    3a64:	10000020 	.word	0x10000020

00003a68 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const>:

  void SetCallback(InterruptCallback isr) const override
    3a68:	b580      	push	{r7, lr}
    3a6a:	b082      	sub	sp, #8
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	6078      	str	r0, [r7, #4]
    3a70:	6039      	str	r1, [r7, #0]
  {
    callback = isr;
    3a72:	6839      	ldr	r1, [r7, #0]
    3a74:	4803      	ldr	r0, [pc, #12]	; (3a84 <sjsu::cortex::SystemTimer::SetCallback(std::function<void ()>) const+0x1c>)
    3a76:	f001 fe3e 	bl	56f6 <std::function<void ()>::operator=(std::function<void ()> const&)>
  }
    3a7a:	bf00      	nop
    3a7c:	3708      	adds	r7, #8
    3a7e:	46bd      	mov	sp, r7
    3a80:	bd80      	pop	{r7, pc}
    3a82:	bf00      	nop
    3a84:	100001f8 	.word	0x100001f8

00003a88 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>:
  struct RegistrationInfo_t
    3a88:	b580      	push	{r7, lr}
    3a8a:	b082      	sub	sp, #8
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	6078      	str	r0, [r7, #4]
    3a90:	687b      	ldr	r3, [r7, #4]
    3a92:	3304      	adds	r3, #4
    3a94:	4618      	mov	r0, r3
    3a96:	f7ff fecd 	bl	3834 <std::function<void ()>::~function()>
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	4618      	mov	r0, r3
    3a9e:	3708      	adds	r7, #8
    3aa0:	46bd      	mov	sp, r7
    3aa2:	bd80      	pop	{r7, pc}

00003aa4 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    3aa4:	b5b0      	push	{r4, r5, r7, lr}
    3aa6:	b08c      	sub	sp, #48	; 0x30
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
    3aac:	6039      	str	r1, [r7, #0]
  {
    Status status = Status::kInvalidSettings;
    3aae:	4922      	ldr	r1, [pc, #136]	; (3b38 <sjsu::cortex::SystemTimer::StartTimer() const+0x94>)
    3ab0:	6878      	ldr	r0, [r7, #4]
    3ab2:	f7fc fe31 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>

    if (sys_tick->LOAD != 0)
    3ab6:	4b21      	ldr	r3, [pc, #132]	; (3b3c <sjsu::cortex::SystemTimer::StartTimer() const+0x98>)
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	685b      	ldr	r3, [r3, #4]
    3abc:	2b00      	cmp	r3, #0
    3abe:	bf14      	ite	ne
    3ac0:	2301      	movne	r3, #1
    3ac2:	2300      	moveq	r3, #0
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d031      	beq.n	3b2e <sjsu::cortex::SystemTimer::StartTimer() const+0x8a>
    {
      // The interrupt handler must be registered before you starting the timer
      // by setting the Enable counter flag in the CTRL register.
      // Otherwise, the handler may not be set by the time the first tick
      // interrupt occurs.
      sjsu::InterruptController::GetPlatformController().Enable({
    3aca:	f7ff fd9f 	bl	360c <sjsu::InterruptController::GetPlatformController()>
    3ace:	4604      	mov	r4, r0
          .interrupt_request_number = cortex::SysTick_IRQn,
          .interrupt_handler        = SystemTimerHandler,
          .priority                 = priority_,
      });
    3ad0:	6823      	ldr	r3, [r4, #0]
    3ad2:	3304      	adds	r3, #4
    3ad4:	681d      	ldr	r5, [r3, #0]
      sjsu::InterruptController::GetPlatformController().Enable({
    3ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ada:	60bb      	str	r3, [r7, #8]
    3adc:	f107 0308 	add.w	r3, r7, #8
    3ae0:	3304      	adds	r3, #4
    3ae2:	4917      	ldr	r1, [pc, #92]	; (3b40 <sjsu::cortex::SystemTimer::StartTimer() const+0x9c>)
    3ae4:	4618      	mov	r0, r3
    3ae6:	f001 fe21 	bl	572c <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
          .priority                 = priority_,
    3aea:	683b      	ldr	r3, [r7, #0]
    3aec:	7a1b      	ldrb	r3, [r3, #8]
      sjsu::InterruptController::GetPlatformController().Enable({
    3aee:	61fb      	str	r3, [r7, #28]
    3af0:	f107 0308 	add.w	r3, r7, #8
    3af4:	4619      	mov	r1, r3
    3af6:	4620      	mov	r0, r4
    3af8:	47a8      	blx	r5
      });
    3afa:	f107 0308 	add.w	r3, r7, #8
    3afe:	4618      	mov	r0, r3
    3b00:	f7ff ffc2 	bl	3a88 <sjsu::InterruptController::RegistrationInfo_t::~RegistrationInfo_t()>
      // Set all flags required to enable the counter
      uint32_t ctrl_mask = (1 << ControlBitMap::kTickInterupt) |
    3b04:	2307      	movs	r3, #7
    3b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                           (1 << ControlBitMap::kEnableCounter) |
                           (1 << ControlBitMap::kClkSource);
      // Set the system tick counter to start immediately
      sys_tick->VAL = 0;
    3b08:	4b0c      	ldr	r3, [pc, #48]	; (3b3c <sjsu::cortex::SystemTimer::StartTimer() const+0x98>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2200      	movs	r2, #0
    3b0e:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= ctrl_mask;
    3b10:	4b0a      	ldr	r3, [pc, #40]	; (3b3c <sjsu::cortex::SystemTimer::StartTimer() const+0x98>)
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	6819      	ldr	r1, [r3, #0]
    3b16:	4b09      	ldr	r3, [pc, #36]	; (3b3c <sjsu::cortex::SystemTimer::StartTimer() const+0x98>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b1c:	430a      	orrs	r2, r1
    3b1e:	601a      	str	r2, [r3, #0]

      status = Status::kSuccess;
    3b20:	f107 0320 	add.w	r3, r7, #32
    3b24:	4a07      	ldr	r2, [pc, #28]	; (3b44 <sjsu::cortex::SystemTimer::StartTimer() const+0xa0>)
    3b26:	6879      	ldr	r1, [r7, #4]
    3b28:	4618      	mov	r0, r3
    3b2a:	f7fc fe0f 	bl	74c <sjsu::Status::operator=(sjsu::Status_t const&)>
    }

    return status;
    3b2e:	bf00      	nop
  }
    3b30:	6878      	ldr	r0, [r7, #4]
    3b32:	3730      	adds	r7, #48	; 0x30
    3b34:	46bd      	mov	sp, r7
    3b36:	bdb0      	pop	{r4, r5, r7, pc}
    3b38:	00007734 	.word	0x00007734
    3b3c:	10000018 	.word	0x10000018
    3b40:	00003851 	.word	0x00003851
    3b44:	00007134 	.word	0x00007134

00003b48 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    3b48:	b580      	push	{r7, lr}
    3b4a:	b082      	sub	sp, #8
    3b4c:	af00      	add	r7, sp, #0
    3b4e:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    3b50:	6878      	ldr	r0, [r7, #4]
    3b52:	f001 fe15 	bl	5780 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3b56:	4603      	mov	r3, r0
	}
    3b58:	4618      	mov	r0, r3
    3b5a:	3708      	adds	r7, #8
    3b5c:	46bd      	mov	sp, r7
    3b5e:	bd80      	pop	{r7, pc}

00003b60 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    3b60:	b580      	push	{r7, lr}
    3b62:	b084      	sub	sp, #16
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
    3b68:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    3b6a:	687b      	ldr	r3, [r7, #4]
    3b6c:	4618      	mov	r0, r3
    3b6e:	f7fe f951 	bl	1e14 <units::linear_scale<float>::operator()() const>
    3b72:	eeb0 7a40 	vmov.f32	s14, s0
    3b76:	683b      	ldr	r3, [r7, #0]
    3b78:	ee07 3a90 	vmov	s15, r3
    3b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b80:	ee77 7a67 	vsub.f32	s15, s14, s15
    3b84:	f107 030c 	add.w	r3, r7, #12
    3b88:	eeb0 0a67 	vmov.f32	s0, s15
    3b8c:	4618      	mov	r0, r3
    3b8e:	f000 f831 	bl	3bf4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3b92:	68fb      	ldr	r3, [r7, #12]
	}
    3b94:	4618      	mov	r0, r3
    3b96:	3710      	adds	r7, #16
    3b98:	46bd      	mov	sp, r7
    3b9a:	bd80      	pop	{r7, pc}

00003b9c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    3b9c:	b580      	push	{r7, lr}
    3b9e:	ed2d 8b02 	vpush	{d8}
    3ba2:	b084      	sub	sp, #16
    3ba4:	af00      	add	r7, sp, #0
    3ba6:	6078      	str	r0, [r7, #4]
    3ba8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    3baa:	687b      	ldr	r3, [r7, #4]
    3bac:	4618      	mov	r0, r3
    3bae:	f7fe f931 	bl	1e14 <units::linear_scale<float>::operator()() const>
    3bb2:	eeb0 8a40 	vmov.f32	s16, s0
    3bb6:	683b      	ldr	r3, [r7, #0]
    3bb8:	4618      	mov	r0, r3
    3bba:	f7fe f92b 	bl	1e14 <units::linear_scale<float>::operator()() const>
    3bbe:	eef0 7a40 	vmov.f32	s15, s0
    3bc2:	edc7 7a03 	vstr	s15, [r7, #12]
    3bc6:	f107 030c 	add.w	r3, r7, #12
    3bca:	4618      	mov	r0, r3
    3bcc:	f7ff fdb6 	bl	373c <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3bd0:	eeb0 7a40 	vmov.f32	s14, s0
    3bd4:	eec8 7a07 	vdiv.f32	s15, s16, s14
    3bd8:	f107 0308 	add.w	r3, r7, #8
    3bdc:	eeb0 0a67 	vmov.f32	s0, s15
    3be0:	4618      	mov	r0, r3
    3be2:	f000 f807 	bl	3bf4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3be6:	68bb      	ldr	r3, [r7, #8]
	}
    3be8:	4618      	mov	r0, r3
    3bea:	3710      	adds	r7, #16
    3bec:	46bd      	mov	sp, r7
    3bee:	ecbd 8b02 	vpop	{d8}
    3bf2:	bd80      	pop	{r7, pc}

00003bf4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b082      	sub	sp, #8
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	6078      	str	r0, [r7, #4]
    3bfc:	ed87 0a00 	vstr	s0, [r7]
    3c00:	687b      	ldr	r3, [r7, #4]
    3c02:	463a      	mov	r2, r7
    3c04:	4611      	mov	r1, r2
    3c06:	4618      	mov	r0, r3
    3c08:	f7fd ff00 	bl	1a0c <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    3c0c:	687b      	ldr	r3, [r7, #4]
    3c0e:	4618      	mov	r0, r3
    3c10:	3708      	adds	r7, #8
    3c12:	46bd      	mov	sp, r7
    3c14:	bd80      	pop	{r7, pc}

00003c16 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    3c16:	b580      	push	{r7, lr}
    3c18:	b082      	sub	sp, #8
    3c1a:	af00      	add	r7, sp, #0
    3c1c:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    3c1e:	6878      	ldr	r0, [r7, #4]
    3c20:	f000 f805 	bl	3c2e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3c24:	4603      	mov	r3, r0
	}
    3c26:	4618      	mov	r0, r3
    3c28:	3708      	adds	r7, #8
    3c2a:	46bd      	mov	sp, r7
    3c2c:	bd80      	pop	{r7, pc}

00003c2e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3c2e:	b580      	push	{r7, lr}
    3c30:	b082      	sub	sp, #8
    3c32:	af00      	add	r7, sp, #0
    3c34:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    3c36:	687b      	ldr	r3, [r7, #4]
    3c38:	4618      	mov	r0, r3
    3c3a:	f7fe f8eb 	bl	1e14 <units::linear_scale<float>::operator()() const>
    3c3e:	eef0 7a40 	vmov.f32	s15, s0
    3c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3c46:	ee17 3a90 	vmov	r3, s15
		}
    3c4a:	4618      	mov	r0, r3
    3c4c:	3708      	adds	r7, #8
    3c4e:	46bd      	mov	sp, r7
    3c50:	bd80      	pop	{r7, pc}
    3c52:	Address 0x0000000000003c52 is out of bounds.


00003c54 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    3c54:	b590      	push	{r4, r7, lr}
    3c56:	b089      	sub	sp, #36	; 0x24
    3c58:	af00      	add	r7, sp, #0
    3c5a:	6078      	str	r0, [r7, #4]
    3c5c:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    3c5e:	f04f 0001 	mov.w	r0, #1
    3c62:	f04f 0100 	mov.w	r1, #0
    3c66:	f7ff fcdd 	bl	3624 <units::literals::operator"" _Hz(unsigned long long)>
    3c6a:	4603      	mov	r3, r0
    3c6c:	60fb      	str	r3, [r7, #12]
    3c6e:	f107 020c 	add.w	r2, r7, #12
    3c72:	463b      	mov	r3, r7
    3c74:	4611      	mov	r1, r2
    3c76:	4618      	mov	r0, r3
    3c78:	f7ff fd80 	bl	377c <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3c7c:	4603      	mov	r3, r0
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d002      	beq.n	3c88 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    3c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c86:	e042      	b.n	3d0e <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    }

    units::frequency::hertz_t system_frequency =
        sjsu::SystemController::GetPlatformController().GetClockRate(id_);
    3c88:	f7ff fdc8 	bl	381c <sjsu::SystemController::GetPlatformController()>
    3c8c:	4603      	mov	r3, r0
    3c8e:	681a      	ldr	r2, [r3, #0]
    3c90:	3208      	adds	r2, #8
    3c92:	6812      	ldr	r2, [r2, #0]
    3c94:	6879      	ldr	r1, [r7, #4]
    3c96:	6849      	ldr	r1, [r1, #4]
    3c98:	4618      	mov	r0, r3
    3c9a:	4790      	blx	r2
    3c9c:	4603      	mov	r3, r0
    3c9e:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    3ca0:	463a      	mov	r2, r7
    3ca2:	f107 0308 	add.w	r3, r7, #8
    3ca6:	4611      	mov	r1, r2
    3ca8:	4618      	mov	r0, r3
    3caa:	f7ff ff77 	bl	3b9c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3cae:	4603      	mov	r3, r0
    3cb0:	617b      	str	r3, [r7, #20]
    3cb2:	f107 0314 	add.w	r3, r7, #20
    3cb6:	2101      	movs	r1, #1
    3cb8:	4618      	mov	r0, r3
    3cba:	f7ff ff51 	bl	3b60 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3cbe:	4603      	mov	r3, r0
    3cc0:	613b      	str	r3, [r7, #16]
    3cc2:	f107 0310 	add.w	r3, r7, #16
    3cc6:	4618      	mov	r0, r3
    3cc8:	f7ff ff3e 	bl	3b48 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3ccc:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    3cce:	f107 0308 	add.w	r3, r7, #8
    3cd2:	4618      	mov	r0, r3
    3cd4:	f7ff ff9f 	bl	3c16 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3cd8:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    3cda:	463b      	mov	r3, r7
    3cdc:	4618      	mov	r0, r3
    3cde:	f7ff ff9a 	bl	3c16 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3ce2:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    3ce4:	fbb4 f2f3 	udiv	r2, r4, r3
    3ce8:	fb03 f302 	mul.w	r3, r3, r2
    3cec:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    3cee:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    3cf0:	69fb      	ldr	r3, [r7, #28]
    3cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3cf6:	d305      	bcc.n	3d04 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb0>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    3cf8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    3cfc:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    3cfe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    3d02:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    3d04:	4b04      	ldr	r3, [pc, #16]	; (3d18 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d06:	681b      	ldr	r3, [r3, #0]
    3d08:	69fa      	ldr	r2, [r7, #28]
    3d0a:	605a      	str	r2, [r3, #4]
    return remainder;
    3d0c:	69bb      	ldr	r3, [r7, #24]
  }
    3d0e:	4618      	mov	r0, r3
    3d10:	3724      	adds	r7, #36	; 0x24
    3d12:	46bd      	mov	sp, r7
    3d14:	bd90      	pop	{r4, r7, pc}
    3d16:	bf00      	nop
    3d18:	10000018 	.word	0x10000018

00003d1c <sjsu::bit::MaskFromRange(unsigned long)>:
}

/// @param bit_position - bit field composed of a single bit with bit width 1.
/// @return a bit mask with of width 1 and position = bit_position.
constexpr Mask MaskFromRange(uint32_t bit_position)
{
    3d1c:	b480      	push	{r7}
    3d1e:	b083      	sub	sp, #12
    3d20:	af00      	add	r7, sp, #0
    3d22:	6078      	str	r0, [r7, #4]
    3d24:	6039      	str	r1, [r7, #0]
  return Mask({
      .position = bit_position,
      .width    = 1,
  });
    3d26:	687b      	ldr	r3, [r7, #4]
    3d28:	683a      	ldr	r2, [r7, #0]
    3d2a:	601a      	str	r2, [r3, #0]
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	2201      	movs	r2, #1
    3d30:	605a      	str	r2, [r3, #4]
}
    3d32:	6878      	ldr	r0, [r7, #4]
    3d34:	370c      	adds	r7, #12
    3d36:	46bd      	mov	sp, r7
    3d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3c:	4770      	bx	lr
    3d3e:	Address 0x0000000000003d3e is out of bounds.


00003d40 <sjsu::lpc40xx::SystemController::OscillatorRegister::Register()>:
  {
    /// @see Table 33. System Controls and Status register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=45
    ///
    /// @returns The SCS bit register.
    static bit::Register<uint32_t> Register()
    3d40:	b580      	push	{r7, lr}
    3d42:	b082      	sub	sp, #8
    3d44:	af00      	add	r7, sp, #0
    3d46:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->SCS);
    3d48:	4b05      	ldr	r3, [pc, #20]	; (3d60 <sjsu::lpc40xx::SystemController::OscillatorRegister::Register()+0x20>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
    3d50:	4619      	mov	r1, r3
    3d52:	6878      	ldr	r0, [r7, #4]
    3d54:	f001 fd2f 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3d58:	6878      	ldr	r0, [r7, #4]
    3d5a:	3708      	adds	r7, #8
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bd80      	pop	{r7, pc}
    3d60:	10000214 	.word	0x10000214

00003d64 <sjsu::lpc40xx::SystemController::CpuClockRegister::Register()>:
  {
    /// @see Table 20. CPU Clock Selection register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=33
    ///
    /// @returns The CCLKSEL bit register.
    static bit::Register<uint32_t> Register()
    3d64:	b580      	push	{r7, lr}
    3d66:	b082      	sub	sp, #8
    3d68:	af00      	add	r7, sp, #0
    3d6a:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->CCLKSEL);
    3d6c:	4b05      	ldr	r3, [pc, #20]	; (3d84 <sjsu::lpc40xx::SystemController::CpuClockRegister::Register()+0x20>)
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3d74:	4619      	mov	r1, r3
    3d76:	6878      	ldr	r0, [r7, #4]
    3d78:	f001 fd1d 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3d7c:	6878      	ldr	r0, [r7, #4]
    3d7e:	3708      	adds	r7, #8
    3d80:	46bd      	mov	sp, r7
    3d82:	bd80      	pop	{r7, pc}
    3d84:	10000214 	.word	0x10000214

00003d88 <sjsu::lpc40xx::SystemController::PeripheralClockRegister::Register()>:
  {
    /// @see Table 23. Peripheral Clock Selection register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=34
    ///
    /// @returns The PCLKSEL bit register.
    static bit::Register<uint32_t> Register()
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
    3d8e:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->PCLKSEL);
    3d90:	4b05      	ldr	r3, [pc, #20]	; (3da8 <sjsu::lpc40xx::SystemController::PeripheralClockRegister::Register()+0x20>)
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
    3d98:	4619      	mov	r1, r3
    3d9a:	6878      	ldr	r0, [r7, #4]
    3d9c:	f001 fd0b 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3da0:	6878      	ldr	r0, [r7, #4]
    3da2:	3708      	adds	r7, #8
    3da4:	46bd      	mov	sp, r7
    3da6:	bd80      	pop	{r7, pc}
    3da8:	10000214 	.word	0x10000214

00003dac <sjsu::lpc40xx::SystemController::EmcClockRegister::Register()>:
  {
    /// @see Table 19. EMC Clock Selection register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=32
    ///
    /// @returns The EMCCLKSEL bit register.
    static bit::Register<uint32_t> Register()
    3dac:	b580      	push	{r7, lr}
    3dae:	b082      	sub	sp, #8
    3db0:	af00      	add	r7, sp, #0
    3db2:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->EMCCLKSEL);
    3db4:	4b05      	ldr	r3, [pc, #20]	; (3dcc <sjsu::lpc40xx::SystemController::EmcClockRegister::Register()+0x20>)
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3dbc:	4619      	mov	r1, r3
    3dbe:	6878      	ldr	r0, [r7, #4]
    3dc0:	f001 fcf9 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3dc4:	6878      	ldr	r0, [r7, #4]
    3dc6:	3708      	adds	r7, #8
    3dc8:	46bd      	mov	sp, r7
    3dca:	bd80      	pop	{r7, pc}
    3dcc:	10000214 	.word	0x10000214

00003dd0 <sjsu::lpc40xx::SystemController::UsbClockRegister::Register()>:
  {
    /// @see Table 21. USB Clock Selection register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=33
    ///
    /// @returns The USBCLKSEL bit register.
    static bit::Register<uint32_t> Register()
    3dd0:	b580      	push	{r7, lr}
    3dd2:	b082      	sub	sp, #8
    3dd4:	af00      	add	r7, sp, #0
    3dd6:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->USBCLKSEL);
    3dd8:	4b05      	ldr	r3, [pc, #20]	; (3df0 <sjsu::lpc40xx::SystemController::UsbClockRegister::Register()+0x20>)
    3dda:	681b      	ldr	r3, [r3, #0]
    3ddc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    3de0:	4619      	mov	r1, r3
    3de2:	6878      	ldr	r0, [r7, #4]
    3de4:	f001 fce7 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3de8:	6878      	ldr	r0, [r7, #4]
    3dea:	3708      	adds	r7, #8
    3dec:	46bd      	mov	sp, r7
    3dee:	bd80      	pop	{r7, pc}
    3df0:	10000214 	.word	0x10000214

00003df4 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()>:
  {
    /// @see SPIFI Clock Selection register
    ///      https://www.nxp.com/docs/en/user-guide/UM10562.pdf#page=35
    ///
    /// @returns The SPIFISEL bit register.
    static bit::Register<uint32_t> Register()
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    {
      return bit::Register(&system_controller->SPIFISEL);
    3dfc:	4b05      	ldr	r3, [pc, #20]	; (3e14 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()+0x20>)
    3dfe:	681b      	ldr	r3, [r3, #0]
    3e00:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
    3e04:	4619      	mov	r1, r3
    3e06:	6878      	ldr	r0, [r7, #4]
    3e08:	f001 fcd5 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
    }
    3e0c:	6878      	ldr	r0, [r7, #4]
    3e0e:	3708      	adds	r7, #8
    3e10:	46bd      	mov	sp, r7
    3e12:	bd80      	pop	{r7, pc}
    3e14:	10000214 	.word	0x10000214

00003e18 <sjsu::lpc40xx::SystemController::GetClockConfiguration()>:
  explicit constexpr SystemController(ClockConfiguration & clock_configuration)
      : clock_configuration_(clock_configuration)
  {
  }

  void * GetClockConfiguration() override
    3e18:	b480      	push	{r7}
    3e1a:	b083      	sub	sp, #12
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
  {
    return &clock_configuration_;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	685b      	ldr	r3, [r3, #4]
  }
    3e24:	4618      	mov	r0, r3
    3e26:	370c      	adds	r7, #12
    3e28:	46bd      	mov	sp, r7
    3e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2e:	4770      	bx	lr

00003e30 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::ResourceID) const>:

  bool IsPeripheralPoweredUp(ResourceID peripheral_select) const override
    3e30:	b580      	push	{r7, lr}
    3e32:	b086      	sub	sp, #24
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
    3e38:	6039      	str	r1, [r7, #0]
  {
    return bit::Register(&system_controller->PCONP)
    3e3a:	4b0f      	ldr	r3, [pc, #60]	; (3e78 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::ResourceID) const+0x48>)
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    3e42:	f107 0308 	add.w	r3, r7, #8
    3e46:	4611      	mov	r1, r2
    3e48:	4618      	mov	r0, r3
    3e4a:	f001 fcb4 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
        .Read(bit::MaskFromRange(peripheral_select.device_id));
    3e4e:	683a      	ldr	r2, [r7, #0]
    3e50:	f107 0310 	add.w	r3, r7, #16
    3e54:	4611      	mov	r1, r2
    3e56:	4618      	mov	r0, r3
    3e58:	f7ff ff60 	bl	3d1c <sjsu::bit::MaskFromRange(unsigned long)>
    3e5c:	f107 0008 	add.w	r0, r7, #8
    3e60:	f107 0310 	add.w	r3, r7, #16
    3e64:	e893 0006 	ldmia.w	r3, {r1, r2}
    3e68:	f000 fdc2 	bl	49f0 <sjsu::bit::Register<unsigned long>::Read(sjsu::bit::Mask)>
    3e6c:	4603      	mov	r3, r0
  }
    3e6e:	4618      	mov	r0, r3
    3e70:	3718      	adds	r7, #24
    3e72:	46bd      	mov	sp, r7
    3e74:	bd80      	pop	{r7, pc}
    3e76:	bf00      	nop
    3e78:	10000214 	.word	0x10000214

00003e7c <sjsu::bit::Register<unsigned long>::Save()>:

  /// Save the value into the register
  ///
  /// @return constexpr Value& - return reference to itself to allow for method
  ///                            chaining.
  constexpr Register & Save()
    3e7c:	b480      	push	{r7}
    3e7e:	b083      	sub	sp, #12
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
  {
    *reg_ = value_;
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	681b      	ldr	r3, [r3, #0]
    3e88:	687a      	ldr	r2, [r7, #4]
    3e8a:	6852      	ldr	r2, [r2, #4]
    3e8c:	601a      	str	r2, [r3, #0]
    return *this;
    3e8e:	687b      	ldr	r3, [r7, #4]
  }
    3e90:	4618      	mov	r0, r3
    3e92:	370c      	adds	r7, #12
    3e94:	46bd      	mov	sp, r7
    3e96:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e9a:	4770      	bx	lr

00003e9c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::ResourceID) const>:

  void PowerUpPeripheral(ResourceID peripheral_select) const override
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b086      	sub	sp, #24
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
    3ea4:	6039      	str	r1, [r7, #0]
  {
    bit::Register(&system_controller->PCONP)
    3ea6:	4b10      	ldr	r3, [pc, #64]	; (3ee8 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::ResourceID) const+0x4c>)
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    3eae:	f107 0308 	add.w	r3, r7, #8
    3eb2:	4611      	mov	r1, r2
    3eb4:	4618      	mov	r0, r3
    3eb6:	f001 fc7e 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
        .Set(bit::MaskFromRange(peripheral_select.device_id))
    3eba:	683a      	ldr	r2, [r7, #0]
    3ebc:	f107 0310 	add.w	r3, r7, #16
    3ec0:	4611      	mov	r1, r2
    3ec2:	4618      	mov	r0, r3
    3ec4:	f7ff ff2a 	bl	3d1c <sjsu::bit::MaskFromRange(unsigned long)>
    3ec8:	f107 0008 	add.w	r0, r7, #8
    3ecc:	f107 0310 	add.w	r3, r7, #16
    3ed0:	e893 0006 	ldmia.w	r3, {r1, r2}
    3ed4:	f000 fd76 	bl	49c4 <sjsu::bit::Register<unsigned long>::Set(sjsu::bit::Mask)>
    3ed8:	4603      	mov	r3, r0
        .Save();
    3eda:	4618      	mov	r0, r3
    3edc:	f7ff ffce 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
  }
    3ee0:	bf00      	nop
    3ee2:	3718      	adds	r7, #24
    3ee4:	46bd      	mov	sp, r7
    3ee6:	bd80      	pop	{r7, pc}
    3ee8:	10000214 	.word	0x10000214

00003eec <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::ResourceID) const>:

  void PowerDownPeripheral(ResourceID peripheral_select) const override
    3eec:	b580      	push	{r7, lr}
    3eee:	b086      	sub	sp, #24
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
    3ef4:	6039      	str	r1, [r7, #0]
  {
    bit::Register(&system_controller->PCONP)
    3ef6:	4b10      	ldr	r3, [pc, #64]	; (3f38 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::ResourceID) const+0x4c>)
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
    3efe:	f107 0308 	add.w	r3, r7, #8
    3f02:	4611      	mov	r1, r2
    3f04:	4618      	mov	r0, r3
    3f06:	f001 fc56 	bl	57b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>
        .Clear(bit::MaskFromRange(peripheral_select.device_id))
    3f0a:	683a      	ldr	r2, [r7, #0]
    3f0c:	f107 0310 	add.w	r3, r7, #16
    3f10:	4611      	mov	r1, r2
    3f12:	4618      	mov	r0, r3
    3f14:	f7ff ff02 	bl	3d1c <sjsu::bit::MaskFromRange(unsigned long)>
    3f18:	f107 0008 	add.w	r0, r7, #8
    3f1c:	f107 0310 	add.w	r3, r7, #16
    3f20:	e893 0006 	ldmia.w	r3, {r1, r2}
    3f24:	f000 fd38 	bl	4998 <sjsu::bit::Register<unsigned long>::Clear(sjsu::bit::Mask)>
    3f28:	4603      	mov	r3, r0
        .Save();
    3f2a:	4618      	mov	r0, r3
    3f2c:	f7ff ffa6 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
  }
    3f30:	bf00      	nop
    3f32:	3718      	adds	r7, #24
    3f34:	46bd      	mov	sp, r7
    3f36:	bd80      	pop	{r7, pc}
    3f38:	10000214 	.word	0x10000214

00003f3c <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const>:

  units::frequency::hertz_t GetClockRate(ResourceID peripheral) const override
    3f3c:	b480      	push	{r7}
    3f3e:	b083      	sub	sp, #12
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
    3f44:	6039      	str	r1, [r7, #0]
  {
    switch (peripheral.device_id)
    3f46:	683b      	ldr	r3, [r7, #0]
    3f48:	3b0b      	subs	r3, #11
    3f4a:	2b16      	cmp	r3, #22
    3f4c:	d83c      	bhi.n	3fc8 <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x8c>
    3f4e:	a201      	add	r2, pc, #4	; (adr r2, 3f54 <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x18>)
    3f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f54:	00003fbd 	.word	0x00003fbd
    3f58:	00003fc9 	.word	0x00003fc9
    3f5c:	00003fc9 	.word	0x00003fc9
    3f60:	00003fc9 	.word	0x00003fc9
    3f64:	00003fc9 	.word	0x00003fc9
    3f68:	00003fb7 	.word	0x00003fb7
    3f6c:	00003fc9 	.word	0x00003fc9
    3f70:	00003fc9 	.word	0x00003fc9
    3f74:	00003fc9 	.word	0x00003fc9
    3f78:	00003fc9 	.word	0x00003fc9
    3f7c:	00003fc9 	.word	0x00003fc9
    3f80:	00003fc9 	.word	0x00003fc9
    3f84:	00003fc9 	.word	0x00003fc9
    3f88:	00003fc9 	.word	0x00003fc9
    3f8c:	00003fc9 	.word	0x00003fc9
    3f90:	00003fc9 	.word	0x00003fc9
    3f94:	00003fc9 	.word	0x00003fc9
    3f98:	00003fc9 	.word	0x00003fc9
    3f9c:	00003fc9 	.word	0x00003fc9
    3fa0:	00003fc9 	.word	0x00003fc9
    3fa4:	00003fb1 	.word	0x00003fb1
    3fa8:	00003fc9 	.word	0x00003fc9
    3fac:	00003fc3 	.word	0x00003fc3
    {
      case Peripherals::kUsb.device_id:
      {
        return usb_clock_rate_;
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	695b      	ldr	r3, [r3, #20]
    3fb4:	e00a      	b.n	3fcc <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x90>
      }
      case Peripherals::kSpifi.device_id:
      {
        return spifi_clock_rate_;
    3fb6:	687b      	ldr	r3, [r7, #4]
    3fb8:	699b      	ldr	r3, [r3, #24]
    3fba:	e007      	b.n	3fcc <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x90>
      }
      case Peripherals::kEmc.device_id:
      {
        return emc_clock_rate_;
    3fbc:	687b      	ldr	r3, [r7, #4]
    3fbe:	691b      	ldr	r3, [r3, #16]
    3fc0:	e004      	b.n	3fcc <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x90>
      }
      case Peripherals::kCpu.device_id:
      {
        return cpu_clock_rate_;
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	689b      	ldr	r3, [r3, #8]
    3fc6:	e001      	b.n	3fcc <sjsu::lpc40xx::SystemController::GetClockRate(sjsu::SystemController::ResourceID) const+0x90>
      }
      default:  // All other peripherals
      {
        return peripheral_clock_rate_;
    3fc8:	687b      	ldr	r3, [r7, #4]
    3fca:	68db      	ldr	r3, [r3, #12]
      }
    }
  }
    3fcc:	4618      	mov	r0, r3
    3fce:	370c      	adds	r7, #12
    3fd0:	46bd      	mov	sp, r7
    3fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd6:	4770      	bx	lr

00003fd8 <auto sjsu::Value<sjsu::lpc40xx::SystemController::CpuClockSelect>(sjsu::lpc40xx::SystemController::CpuClockSelect)>:
/// @param enum_type_value variable you would like to get the value of.
/// @return the numeric value of the enum class type variable of with the
///         underlying type of the enum class. This should be used in place of
///         static_cast<some_numeric_type>(some_variable).
template <typename Enum>
constexpr auto Value(Enum enum_type_value)
    3fd8:	b480      	push	{r7}
    3fda:	b083      	sub	sp, #12
    3fdc:	af00      	add	r7, sp, #0
    3fde:	4603      	mov	r3, r0
    3fe0:	80fb      	strh	r3, [r7, #6]
{
  using EnumType = std::underlying_type_t<Enum>;
  return static_cast<EnumType>(enum_type_value);
    3fe2:	88fb      	ldrh	r3, [r7, #6]
}
    3fe4:	4618      	mov	r0, r3
    3fe6:	370c      	adds	r7, #12
    3fe8:	46bd      	mov	sp, r7
    3fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fee:	4770      	bx	lr

00003ff0 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbClockSelect>(sjsu::lpc40xx::SystemController::UsbClockSelect)>:
constexpr auto Value(Enum enum_type_value)
    3ff0:	b480      	push	{r7}
    3ff2:	b083      	sub	sp, #12
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	4603      	mov	r3, r0
    3ff8:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    3ffa:	79fb      	ldrb	r3, [r7, #7]
}
    3ffc:	4618      	mov	r0, r3
    3ffe:	370c      	adds	r7, #12
    4000:	46bd      	mov	sp, r7
    4002:	f85d 7b04 	ldr.w	r7, [sp], #4
    4006:	4770      	bx	lr

00004008 <auto sjsu::Value<sjsu::lpc40xx::SystemController::SpifiClockSelect>(sjsu::lpc40xx::SystemController::SpifiClockSelect)>:
constexpr auto Value(Enum enum_type_value)
    4008:	b480      	push	{r7}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
    400e:	4603      	mov	r3, r0
    4010:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    4012:	79fb      	ldrb	r3, [r7, #7]
}
    4014:	4618      	mov	r0, r3
    4016:	370c      	adds	r7, #12
    4018:	46bd      	mov	sp, r7
    401a:	f85d 7b04 	ldr.w	r7, [sp], #4
    401e:	4770      	bx	lr

00004020 <auto sjsu::Value<sjsu::lpc40xx::SystemController::OscillatorSource>(sjsu::lpc40xx::SystemController::OscillatorSource)>:
constexpr auto Value(Enum enum_type_value)
    4020:	b480      	push	{r7}
    4022:	b083      	sub	sp, #12
    4024:	af00      	add	r7, sp, #0
    4026:	4603      	mov	r3, r0
    4028:	80fb      	strh	r3, [r7, #6]
  return static_cast<EnumType>(enum_type_value);
    402a:	88fb      	ldrh	r3, [r7, #6]
}
    402c:	4618      	mov	r0, r3
    402e:	370c      	adds	r7, #12
    4030:	46bd      	mov	sp, r7
    4032:	f85d 7b04 	ldr.w	r7, [sp], #4
    4036:	4770      	bx	lr

00004038 <auto sjsu::Value<sjsu::lpc40xx::SystemController::EmcDivider>(sjsu::lpc40xx::SystemController::EmcDivider)>:
constexpr auto Value(Enum enum_type_value)
    4038:	b480      	push	{r7}
    403a:	b083      	sub	sp, #12
    403c:	af00      	add	r7, sp, #0
    403e:	4603      	mov	r3, r0
    4040:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    4042:	79fb      	ldrb	r3, [r7, #7]
}
    4044:	4618      	mov	r0, r3
    4046:	370c      	adds	r7, #12
    4048:	46bd      	mov	sp, r7
    404a:	f85d 7b04 	ldr.w	r7, [sp], #4
    404e:	4770      	bx	lr

00004050 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbDivider>(sjsu::lpc40xx::SystemController::UsbDivider)>:
constexpr auto Value(Enum enum_type_value)
    4050:	b480      	push	{r7}
    4052:	b083      	sub	sp, #12
    4054:	af00      	add	r7, sp, #0
    4056:	4603      	mov	r3, r0
    4058:	71fb      	strb	r3, [r7, #7]
  return static_cast<EnumType>(enum_type_value);
    405a:	79fb      	ldrb	r3, [r7, #7]
}
    405c:	4618      	mov	r0, r3
    405e:	370c      	adds	r7, #12
    4060:	46bd      	mov	sp, r7
    4062:	f85d 7b04 	ldr.w	r7, [sp], #4
    4066:	4770      	bx	lr

00004068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>:
constexpr auto Value(Enum enum_type_value)
    4068:	b480      	push	{r7}
    406a:	b083      	sub	sp, #12
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
  return static_cast<EnumType>(enum_type_value);
    4070:	687b      	ldr	r3, [r7, #4]
}
    4072:	4618      	mov	r0, r3
    4074:	370c      	adds	r7, #12
    4076:	46bd      	mov	sp, r7
    4078:	f85d 7b04 	ldr.w	r7, [sp], #4
    407c:	4770      	bx	lr
    407e:	Address 0x000000000000407e is out of bounds.


00004080 <sjsu::lpc40xx::SystemController::Initialize()>:
  ///            the valid clock configuration values that can/should be used.
  ///            The Initialize() method is only responsible for configuring the
  ///            clock system based on configurations in the ClockConfiguration.
  ///            Incorrect configurations may result in a hard fault or cause
  ///            the clock system(s) to supply incorrect clock rate(s).
  void Initialize() override
    4080:	b5b0      	push	{r4, r5, r7, lr}
    4082:	b0b2      	sub	sp, #200	; 0xc8
    4084:	af02      	add	r7, sp, #8
    4086:	6078      	str	r0, [r7, #4]
  {
    LPC_SC_TypeDef * sys = system_controller;
    4088:	4bb5      	ldr	r3, [pc, #724]	; (4360 <sjsu::lpc40xx::SystemController::Initialize()+0x2e0>)
    408a:	681b      	ldr	r3, [r3, #0]
    408c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    auto config          = clock_configuration_;
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	685b      	ldr	r3, [r3, #4]
    4094:	f107 0420 	add.w	r4, r7, #32
    4098:	461d      	mov	r5, r3
    409a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    409c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    409e:	682b      	ldr	r3, [r5, #0]
    40a0:	6023      	str	r3, [r4, #0]

    units::frequency::hertz_t system_clock = 0_Hz;
    40a2:	f04f 0300 	mov.w	r3, #0
    40a6:	61fb      	str	r3, [r7, #28]
    units::frequency::hertz_t pll0         = 0_Hz;
    40a8:	f04f 0300 	mov.w	r3, #0
    40ac:	61bb      	str	r3, [r7, #24]
    units::frequency::hertz_t pll1         = 0_Hz;
    40ae:	f04f 0300 	mov.w	r3, #0
    40b2:	617b      	str	r3, [r7, #20]

    // Reset all of the cached clock frequency values
    units::frequency::hertz_t cpu   = 0_Hz;
    40b4:	f04f 0300 	mov.w	r3, #0
    40b8:	613b      	str	r3, [r7, #16]
    units::frequency::hertz_t usb   = 0_Hz;
    40ba:	f04f 0300 	mov.w	r3, #0
    40be:	60fb      	str	r3, [r7, #12]
    units::frequency::hertz_t spifi = 0_Hz;
    40c0:	f04f 0300 	mov.w	r3, #0
    40c4:	60bb      	str	r3, [r7, #8]
    // =========================================================================
    // Step 1. Select IRC as clock source for everything.
    //         Make sure PLLs are not clock sources for everything.
    // =========================================================================
    // Set CPU clock to system clock
    CpuClockRegister::Register()
    40c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
    40ca:	4618      	mov	r0, r3
    40cc:	f7ff fe4a 	bl	3d64 <sjsu::lpc40xx::SystemController::CpuClockRegister::Register()>
        .Insert(Value(CpuClockSelect::kSystemClock), CpuClockRegister::kSelect)
    40d0:	2000      	movs	r0, #0
    40d2:	f7ff ff81 	bl	3fd8 <auto sjsu::Value<sjsu::lpc40xx::SystemController::CpuClockSelect>(sjsu::lpc40xx::SystemController::CpuClockSelect)>
    40d6:	4603      	mov	r3, r0
    40d8:	4619      	mov	r1, r3
    40da:	4ba2      	ldr	r3, [pc, #648]	; (4364 <sjsu::lpc40xx::SystemController::Initialize()+0x2e4>)
    40dc:	f107 0034 	add.w	r0, r7, #52	; 0x34
    40e0:	cb0c      	ldmia	r3, {r2, r3}
    40e2:	f001 fb7b 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    40e6:	4603      	mov	r3, r0
        .Save();
    40e8:	4618      	mov	r0, r3
    40ea:	f7ff fec7 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set USB clock to system clock
    UsbClockRegister::Register()
    40ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    40f2:	4618      	mov	r0, r3
    40f4:	f7ff fe6c 	bl	3dd0 <sjsu::lpc40xx::SystemController::UsbClockRegister::Register()>
        .Insert(Value(UsbClockSelect::kSystemClock), UsbClockRegister::kSelect)
    40f8:	2000      	movs	r0, #0
    40fa:	f7ff ff79 	bl	3ff0 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbClockSelect>(sjsu::lpc40xx::SystemController::UsbClockSelect)>
    40fe:	4603      	mov	r3, r0
    4100:	4619      	mov	r1, r3
    4102:	4b99      	ldr	r3, [pc, #612]	; (4368 <sjsu::lpc40xx::SystemController::Initialize()+0x2e8>)
    4104:	f107 003c 	add.w	r0, r7, #60	; 0x3c
    4108:	cb0c      	ldmia	r3, {r2, r3}
    410a:	f001 fb67 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    410e:	4603      	mov	r3, r0
        .Save();
    4110:	4618      	mov	r0, r3
    4112:	f7ff feb3 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set SPIFI clock to system clock
    SpiFiClockRegister::Register()
    4116:	f107 0344 	add.w	r3, r7, #68	; 0x44
    411a:	4618      	mov	r0, r3
    411c:	f7ff fe6a 	bl	3df4 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()>
        .Insert(Value(SpifiClockSelect::kSystemClock),
    4120:	2000      	movs	r0, #0
    4122:	f7ff ff71 	bl	4008 <auto sjsu::Value<sjsu::lpc40xx::SystemController::SpifiClockSelect>(sjsu::lpc40xx::SystemController::SpifiClockSelect)>
    4126:	4603      	mov	r3, r0
                SpiFiClockRegister::kSelect)
    4128:	4619      	mov	r1, r3
    412a:	4b90      	ldr	r3, [pc, #576]	; (436c <sjsu::lpc40xx::SystemController::Initialize()+0x2ec>)
    412c:	f107 0044 	add.w	r0, r7, #68	; 0x44
    4130:	cb0c      	ldmia	r3, {r2, r3}
    4132:	f001 fb53 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    4136:	4603      	mov	r3, r0
        .Save();
    4138:	4618      	mov	r0, r3
    413a:	f7ff fe9f 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>

    // Set the clock source to IRC and not external oscillator. The next phase
    // disables that clock source, which will stop the system if this is not
    // switched.
    sys->CLKSRCSEL = Value(OscillatorSource::kIrc);
    413e:	2000      	movs	r0, #0
    4140:	f7ff ff6e 	bl	4020 <auto sjsu::Value<sjsu::lpc40xx::SystemController::OscillatorSource>(sjsu::lpc40xx::SystemController::OscillatorSource)>
    4144:	4603      	mov	r3, r0
    4146:	461a      	mov	r2, r3
    4148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    414c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    // =========================================================================
    // Step 2. Disable PLLs
    // =========================================================================
    // NOTE: The only bit in this register that is used is bit 0 which indicates
    // enabled or disabled status, thus a single assignment is needed.
    sys->PLL0CON = 0;
    4150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4154:	2200      	movs	r2, #0
    4156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    sys->PLL1CON = 0;
    415a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    415e:	2200      	movs	r2, #0
    4160:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    // Disabling external oscillator if it is not going to be used
    OscillatorRegister::Register()
    4164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    4168:	4618      	mov	r0, r3
    416a:	f7ff fde9 	bl	3d40 <sjsu::lpc40xx::SystemController::OscillatorRegister::Register()>
        .Clear(OscillatorRegister::kExternalEnable)
    416e:	4a80      	ldr	r2, [pc, #512]	; (4370 <sjsu::lpc40xx::SystemController::Initialize()+0x2f0>)
    4170:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    4174:	ca06      	ldmia	r2, {r1, r2}
    4176:	4618      	mov	r0, r3
    4178:	f000 fc0e 	bl	4998 <sjsu::bit::Register<unsigned long>::Clear(sjsu::bit::Mask)>
    417c:	4603      	mov	r3, r0
        .Save();
    417e:	4618      	mov	r0, r3
    4180:	f7ff fe7c 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Step 3. Select oscillator source for System Clock and Main PLL
    // =========================================================================
    // Enable the external oscillator if we are using it, which would be the
    // case if the alternative PLL is enabled or external oscillator is
    // selected.
    if (config.system_oscillator == OscillatorSource::kExternal ||
    4184:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    4186:	2b01      	cmp	r3, #1
    4188:	d003      	beq.n	4192 <sjsu::lpc40xx::SystemController::Initialize()+0x112>
        config.pll[1].enabled)
    418a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    if (config.system_oscillator == OscillatorSource::kExternal ||
    418e:	2b00      	cmp	r3, #0
    4190:	d002      	beq.n	4198 <sjsu::lpc40xx::SystemController::Initialize()+0x118>
    {
      EnableExternalOscillator();
    4192:	6878      	ldr	r0, [r7, #4]
    4194:	f000 fc40 	bl	4a18 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const>
    }

    sys->CLKSRCSEL = Value(config.system_oscillator);
    4198:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    419a:	4618      	mov	r0, r3
    419c:	f7ff ff40 	bl	4020 <auto sjsu::Value<sjsu::lpc40xx::SystemController::OscillatorSource>(sjsu::lpc40xx::SystemController::OscillatorSource)>
    41a0:	4603      	mov	r3, r0
    41a2:	461a      	mov	r2, r3
    41a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    41a8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    switch (config.system_oscillator)
    41ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    41ae:	2b00      	cmp	r3, #0
    41b0:	d002      	beq.n	41b8 <sjsu::lpc40xx::SystemController::Initialize()+0x138>
    41b2:	2b01      	cmp	r3, #1
    41b4:	d007      	beq.n	41c6 <sjsu::lpc40xx::SystemController::Initialize()+0x146>
    41b6:	e00f      	b.n	41d8 <sjsu::lpc40xx::SystemController::Initialize()+0x158>
    {
      case OscillatorSource::kIrc: system_clock = kDefaultIRCFrequency; break;
    41b8:	f107 031c 	add.w	r3, r7, #28
    41bc:	496d      	ldr	r1, [pc, #436]	; (4374 <sjsu::lpc40xx::SystemController::Initialize()+0x2f4>)
    41be:	4618      	mov	r0, r3
    41c0:	f001 fb23 	bl	580a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    41c4:	e008      	b.n	41d8 <sjsu::lpc40xx::SystemController::Initialize()+0x158>
      case OscillatorSource::kExternal:
        system_clock = config.external_oscillator_frequency;
    41c6:	f107 0220 	add.w	r2, r7, #32
    41ca:	f107 031c 	add.w	r3, r7, #28
    41ce:	4611      	mov	r1, r2
    41d0:	4618      	mov	r0, r3
    41d2:	f001 fb1a 	bl	580a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
        break;
    41d6:	bf00      	nop

    // =========================================================================
    // Step 4. Configure PLLs
    // =========================================================================
    pll0 = SetupPll(&sys->PLL0CON, &sys->PLL0CFG, &sys->PLL0FEED,
                    &sys->PLL0STAT, 0);
    41d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    41dc:	f103 0180 	add.w	r1, r3, #128	; 0x80
    41e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    41e4:	f103 0284 	add.w	r2, r3, #132	; 0x84
    41e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    41ec:	f103 008c 	add.w	r0, r3, #140	; 0x8c
    41f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    41f4:	3388      	adds	r3, #136	; 0x88
    41f6:	2400      	movs	r4, #0
    41f8:	9401      	str	r4, [sp, #4]
    41fa:	9300      	str	r3, [sp, #0]
    41fc:	4603      	mov	r3, r0
    41fe:	6878      	ldr	r0, [r7, #4]
    4200:	f000 fad6 	bl	47b0 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const>
    4204:	4603      	mov	r3, r0
    4206:	61bb      	str	r3, [r7, #24]

    pll1 = SetupPll(&sys->PLL1CON, &sys->PLL1CFG, &sys->PLL1FEED,
                    &sys->PLL1STAT, 1);
    4208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    420c:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
    4210:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4214:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
    4218:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    421c:	f103 00ac 	add.w	r0, r3, #172	; 0xac
    4220:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4224:	33a8      	adds	r3, #168	; 0xa8
    4226:	2401      	movs	r4, #1
    4228:	9401      	str	r4, [sp, #4]
    422a:	9300      	str	r3, [sp, #0]
    422c:	4603      	mov	r3, r0
    422e:	6878      	ldr	r0, [r7, #4]
    4230:	f000 fabe 	bl	47b0 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const>
    4234:	4603      	mov	r3, r0
    4236:	617b      	str	r3, [r7, #20]

    // =========================================================================
    // Step 5. Set clock dividers for each clock source
    // =========================================================================
    // Set CPU clock divider
    CpuClockRegister::Register()
    4238:	f107 0354 	add.w	r3, r7, #84	; 0x54
    423c:	4618      	mov	r0, r3
    423e:	f7ff fd91 	bl	3d64 <sjsu::lpc40xx::SystemController::CpuClockRegister::Register()>
        .Insert(config.cpu.divider, CpuClockRegister::kDivider)
    4242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    4246:	4619      	mov	r1, r3
    4248:	4b4b      	ldr	r3, [pc, #300]	; (4378 <sjsu::lpc40xx::SystemController::Initialize()+0x2f8>)
    424a:	f107 0054 	add.w	r0, r7, #84	; 0x54
    424e:	cb0c      	ldmia	r3, {r2, r3}
    4250:	f001 fac4 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    4254:	4603      	mov	r3, r0
        .Save();
    4256:	4618      	mov	r0, r3
    4258:	f7ff fe10 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set EMC clock divider
    EmcClockRegister::Register()
    425c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    4260:	4618      	mov	r0, r3
    4262:	f7ff fda3 	bl	3dac <sjsu::lpc40xx::SystemController::EmcClockRegister::Register()>
        .Insert(Value(config.emc_divider), EmcClockRegister::kDivider)
    4266:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    426a:	4618      	mov	r0, r3
    426c:	f7ff fee4 	bl	4038 <auto sjsu::Value<sjsu::lpc40xx::SystemController::EmcDivider>(sjsu::lpc40xx::SystemController::EmcDivider)>
    4270:	4603      	mov	r3, r0
    4272:	4619      	mov	r1, r3
    4274:	4b41      	ldr	r3, [pc, #260]	; (437c <sjsu::lpc40xx::SystemController::Initialize()+0x2fc>)
    4276:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    427a:	cb0c      	ldmia	r3, {r2, r3}
    427c:	f001 faae 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    4280:	4603      	mov	r3, r0
        .Save();
    4282:	4618      	mov	r0, r3
    4284:	f7ff fdfa 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set Peripheral clock divider
    PeripheralClockRegister::Register()
    4288:	f107 0364 	add.w	r3, r7, #100	; 0x64
    428c:	4618      	mov	r0, r3
    428e:	f7ff fd7b 	bl	3d88 <sjsu::lpc40xx::SystemController::PeripheralClockRegister::Register()>
        .Insert(config.peripheral_divider, PeripheralClockRegister::kDivider)
    4292:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    4296:	4619      	mov	r1, r3
    4298:	4b39      	ldr	r3, [pc, #228]	; (4380 <sjsu::lpc40xx::SystemController::Initialize()+0x300>)
    429a:	f107 0064 	add.w	r0, r7, #100	; 0x64
    429e:	cb0c      	ldmia	r3, {r2, r3}
    42a0:	f001 fa9c 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    42a4:	4603      	mov	r3, r0
        .Save();
    42a6:	4618      	mov	r0, r3
    42a8:	f7ff fde8 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set USB clock divider
    UsbClockRegister::Register()
    42ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
    42b0:	4618      	mov	r0, r3
    42b2:	f7ff fd8d 	bl	3dd0 <sjsu::lpc40xx::SystemController::UsbClockRegister::Register()>
        .Insert(Value(config.usb.divider), UsbClockRegister::kDivider)
    42b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    42ba:	4618      	mov	r0, r3
    42bc:	f7ff fec8 	bl	4050 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbDivider>(sjsu::lpc40xx::SystemController::UsbDivider)>
    42c0:	4603      	mov	r3, r0
    42c2:	4619      	mov	r1, r3
    42c4:	4b2f      	ldr	r3, [pc, #188]	; (4384 <sjsu::lpc40xx::SystemController::Initialize()+0x304>)
    42c6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
    42ca:	cb0c      	ldmia	r3, {r2, r3}
    42cc:	f001 fa86 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    42d0:	4603      	mov	r3, r0
        .Save();
    42d2:	4618      	mov	r0, r3
    42d4:	f7ff fdd2 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
    // Set SPIFI clock divider
    SpiFiClockRegister::Register()
    42d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
    42dc:	4618      	mov	r0, r3
    42de:	f7ff fd89 	bl	3df4 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()>
        .Insert(config.spifi.divider, SpiFiClockRegister::kDivider)
    42e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    42e6:	4619      	mov	r1, r3
    42e8:	4b27      	ldr	r3, [pc, #156]	; (4388 <sjsu::lpc40xx::SystemController::Initialize()+0x308>)
    42ea:	f107 0074 	add.w	r0, r7, #116	; 0x74
    42ee:	cb0c      	ldmia	r3, {r2, r3}
    42f0:	f001 fa74 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    42f4:	4603      	mov	r3, r0
        .Save();
    42f6:	4618      	mov	r0, r3
    42f8:	f7ff fdc0 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>

    switch (config.cpu.clock)
    42fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    42fe:	2b00      	cmp	r3, #0
    4300:	d002      	beq.n	4308 <sjsu::lpc40xx::SystemController::Initialize()+0x288>
    4302:	2b01      	cmp	r3, #1
    4304:	d003      	beq.n	430e <sjsu::lpc40xx::SystemController::Initialize()+0x28e>
    4306:	e005      	b.n	4314 <sjsu::lpc40xx::SystemController::Initialize()+0x294>
    {
      case CpuClockSelect::kSystemClock: cpu = system_clock; break;
    4308:	69fb      	ldr	r3, [r7, #28]
    430a:	613b      	str	r3, [r7, #16]
    430c:	e002      	b.n	4314 <sjsu::lpc40xx::SystemController::Initialize()+0x294>
      case CpuClockSelect::kPll0: cpu = pll0; break;
    430e:	69bb      	ldr	r3, [r7, #24]
    4310:	613b      	str	r3, [r7, #16]
    4312:	bf00      	nop
    }

    switch (config.usb.clock)
    4314:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    4318:	2b02      	cmp	r3, #2
    431a:	d00c      	beq.n	4336 <sjsu::lpc40xx::SystemController::Initialize()+0x2b6>
    431c:	2b02      	cmp	r3, #2
    431e:	d80d      	bhi.n	433c <sjsu::lpc40xx::SystemController::Initialize()+0x2bc>
    4320:	2b00      	cmp	r3, #0
    4322:	d002      	beq.n	432a <sjsu::lpc40xx::SystemController::Initialize()+0x2aa>
    4324:	2b01      	cmp	r3, #1
    4326:	d003      	beq.n	4330 <sjsu::lpc40xx::SystemController::Initialize()+0x2b0>
    4328:	e008      	b.n	433c <sjsu::lpc40xx::SystemController::Initialize()+0x2bc>
    {
      case UsbClockSelect::kSystemClock: usb = system_clock; break;
    432a:	69fb      	ldr	r3, [r7, #28]
    432c:	60fb      	str	r3, [r7, #12]
    432e:	e005      	b.n	433c <sjsu::lpc40xx::SystemController::Initialize()+0x2bc>
      case UsbClockSelect::kPll0: usb = pll0; break;
    4330:	69bb      	ldr	r3, [r7, #24]
    4332:	60fb      	str	r3, [r7, #12]
    4334:	e002      	b.n	433c <sjsu::lpc40xx::SystemController::Initialize()+0x2bc>
      case UsbClockSelect::kPll1: usb = pll1; break;
    4336:	697b      	ldr	r3, [r7, #20]
    4338:	60fb      	str	r3, [r7, #12]
    433a:	bf00      	nop
    }

    switch (config.spifi.clock)
    433c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    4340:	2b02      	cmp	r3, #2
    4342:	d023      	beq.n	438c <sjsu::lpc40xx::SystemController::Initialize()+0x30c>
    4344:	2b02      	cmp	r3, #2
    4346:	d824      	bhi.n	4392 <sjsu::lpc40xx::SystemController::Initialize()+0x312>
    4348:	2b00      	cmp	r3, #0
    434a:	d002      	beq.n	4352 <sjsu::lpc40xx::SystemController::Initialize()+0x2d2>
    434c:	2b01      	cmp	r3, #1
    434e:	d003      	beq.n	4358 <sjsu::lpc40xx::SystemController::Initialize()+0x2d8>
    4350:	e01f      	b.n	4392 <sjsu::lpc40xx::SystemController::Initialize()+0x312>
    {
      case SpifiClockSelect::kSystemClock: spifi = system_clock; break;
    4352:	69fb      	ldr	r3, [r7, #28]
    4354:	60bb      	str	r3, [r7, #8]
    4356:	e01c      	b.n	4392 <sjsu::lpc40xx::SystemController::Initialize()+0x312>
      case SpifiClockSelect::kPll0: spifi = pll0; break;
    4358:	69bb      	ldr	r3, [r7, #24]
    435a:	60bb      	str	r3, [r7, #8]
    435c:	e019      	b.n	4392 <sjsu::lpc40xx::SystemController::Initialize()+0x312>
    435e:	bf00      	nop
    4360:	10000214 	.word	0x10000214
    4364:	00007e0c 	.word	0x00007e0c
    4368:	00007e2c 	.word	0x00007e2c
    436c:	00007e3c 	.word	0x00007e3c
    4370:	00007df4 	.word	0x00007df4
    4374:	00007dd0 	.word	0x00007dd0
    4378:	00007e04 	.word	0x00007e04
    437c:	00007e1c 	.word	0x00007e1c
    4380:	00007e14 	.word	0x00007e14
    4384:	00007e24 	.word	0x00007e24
    4388:	00007e34 	.word	0x00007e34
      case SpifiClockSelect::kPll1: spifi = pll1; break;
    438c:	697b      	ldr	r3, [r7, #20]
    438e:	60bb      	str	r3, [r7, #8]
    4390:	bf00      	nop
    }

    cpu_clock_rate_        = cpu / config.cpu.divider;
    4392:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    4396:	687c      	ldr	r4, [r7, #4]
    4398:	f107 0310 	add.w	r3, r7, #16
    439c:	4611      	mov	r1, r2
    439e:	4618      	mov	r0, r3
    43a0:	f001 fa46 	bl	5830 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    43a4:	60a0      	str	r0, [r4, #8]
    peripheral_clock_rate_ = cpu / config.peripheral_divider;
    43a6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
    43aa:	687c      	ldr	r4, [r7, #4]
    43ac:	f107 0310 	add.w	r3, r7, #16
    43b0:	4611      	mov	r1, r2
    43b2:	4618      	mov	r0, r3
    43b4:	f001 fa3c 	bl	5830 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    43b8:	60e0      	str	r0, [r4, #12]
    emc_clock_rate_        = cpu / (Value(config.emc_divider) + 1);
    43ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    43be:	4618      	mov	r0, r3
    43c0:	f7ff fe3a 	bl	4038 <auto sjsu::Value<sjsu::lpc40xx::SystemController::EmcDivider>(sjsu::lpc40xx::SystemController::EmcDivider)>
    43c4:	4603      	mov	r3, r0
    43c6:	1c5a      	adds	r2, r3, #1
    43c8:	687c      	ldr	r4, [r7, #4]
    43ca:	f107 0310 	add.w	r3, r7, #16
    43ce:	4611      	mov	r1, r2
    43d0:	4618      	mov	r0, r3
    43d2:	f001 fa4c 	bl	586e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    43d6:	6120      	str	r0, [r4, #16]
    usb_clock_rate_        = usb / Value(config.usb.divider);
    43d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    43dc:	4618      	mov	r0, r3
    43de:	f7ff fe37 	bl	4050 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbDivider>(sjsu::lpc40xx::SystemController::UsbDivider)>
    43e2:	4603      	mov	r3, r0
    43e4:	461a      	mov	r2, r3
    43e6:	687c      	ldr	r4, [r7, #4]
    43e8:	f107 030c 	add.w	r3, r7, #12
    43ec:	4611      	mov	r1, r2
    43ee:	4618      	mov	r0, r3
    43f0:	f001 fa1e 	bl	5830 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    43f4:	6160      	str	r0, [r4, #20]
    spifi_clock_rate_      = spifi / config.spifi.divider;
    43f6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
    43fa:	687c      	ldr	r4, [r7, #4]
    43fc:	f107 0308 	add.w	r3, r7, #8
    4400:	4611      	mov	r1, r2
    4402:	4618      	mov	r0, r3
    4404:	f001 fa14 	bl	5830 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    4408:	61a0      	str	r0, [r4, #24]

    // =========================================================================
    // Step 6. Configure flash cycles per load
    // =========================================================================
    sys->PBOOST = 0b00;
    440a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    440e:	2200      	movs	r2, #0
    4410:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    if (cpu_clock_rate_ < 20_MHz)
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	f103 0408 	add.w	r4, r3, #8
    441a:	f04f 0014 	mov.w	r0, #20
    441e:	f04f 0100 	mov.w	r1, #0
    4422:	f7ff f915 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4426:	4603      	mov	r3, r0
    4428:	67fb      	str	r3, [r7, #124]	; 0x7c
    442a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
    442e:	4619      	mov	r1, r3
    4430:	4620      	mov	r0, r4
    4432:	f001 fa3a 	bl	58aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4436:	4603      	mov	r3, r0
    4438:	2b00      	cmp	r3, #0
    443a:	d007      	beq.n	444c <sjsu::lpc40xx::SystemController::Initialize()+0x3cc>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock1);
    443c:	2000      	movs	r0, #0
    443e:	f7ff fe13 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    4442:	4602      	mov	r2, r0
    4444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4448:	601a      	str	r2, [r3, #0]
    444a:	e101      	b.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    }
    else if (20_MHz <= cpu_clock_rate_ && cpu_clock_rate_ < 40_MHz)
    444c:	f04f 0014 	mov.w	r0, #20
    4450:	f04f 0100 	mov.w	r1, #0
    4454:	f7ff f8fc 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4458:	4603      	mov	r3, r0
    445a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	f103 0208 	add.w	r2, r3, #8
    4464:	f107 0380 	add.w	r3, r7, #128	; 0x80
    4468:	4611      	mov	r1, r2
    446a:	4618      	mov	r0, r3
    446c:	f000 f95a 	bl	4724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4470:	4603      	mov	r3, r0
    4472:	2b00      	cmp	r3, #0
    4474:	d016      	beq.n	44a4 <sjsu::lpc40xx::SystemController::Initialize()+0x424>
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	f103 0408 	add.w	r4, r3, #8
    447c:	f04f 0028 	mov.w	r0, #40	; 0x28
    4480:	f04f 0100 	mov.w	r1, #0
    4484:	f7ff f8e4 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4488:	4603      	mov	r3, r0
    448a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    448e:	f107 0384 	add.w	r3, r7, #132	; 0x84
    4492:	4619      	mov	r1, r3
    4494:	4620      	mov	r0, r4
    4496:	f001 fa08 	bl	58aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    449a:	4603      	mov	r3, r0
    449c:	2b00      	cmp	r3, #0
    449e:	d001      	beq.n	44a4 <sjsu::lpc40xx::SystemController::Initialize()+0x424>
    44a0:	2301      	movs	r3, #1
    44a2:	e000      	b.n	44a6 <sjsu::lpc40xx::SystemController::Initialize()+0x426>
    44a4:	2300      	movs	r3, #0
    44a6:	2b00      	cmp	r3, #0
    44a8:	d008      	beq.n	44bc <sjsu::lpc40xx::SystemController::Initialize()+0x43c>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock2);
    44aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    44ae:	f7ff fddb 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    44b2:	4602      	mov	r2, r0
    44b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    44b8:	601a      	str	r2, [r3, #0]
    44ba:	e0c9      	b.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    }
    else if (40_MHz <= cpu_clock_rate_ && cpu_clock_rate_ < 60_MHz)
    44bc:	f04f 0028 	mov.w	r0, #40	; 0x28
    44c0:	f04f 0100 	mov.w	r1, #0
    44c4:	f7ff f8c4 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    44c8:	4603      	mov	r3, r0
    44ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    44ce:	687b      	ldr	r3, [r7, #4]
    44d0:	f103 0208 	add.w	r2, r3, #8
    44d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
    44d8:	4611      	mov	r1, r2
    44da:	4618      	mov	r0, r3
    44dc:	f000 f922 	bl	4724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    44e0:	4603      	mov	r3, r0
    44e2:	2b00      	cmp	r3, #0
    44e4:	d016      	beq.n	4514 <sjsu::lpc40xx::SystemController::Initialize()+0x494>
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	f103 0408 	add.w	r4, r3, #8
    44ec:	f04f 003c 	mov.w	r0, #60	; 0x3c
    44f0:	f04f 0100 	mov.w	r1, #0
    44f4:	f7ff f8ac 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    44f8:	4603      	mov	r3, r0
    44fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    44fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
    4502:	4619      	mov	r1, r3
    4504:	4620      	mov	r0, r4
    4506:	f001 f9d0 	bl	58aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    450a:	4603      	mov	r3, r0
    450c:	2b00      	cmp	r3, #0
    450e:	d001      	beq.n	4514 <sjsu::lpc40xx::SystemController::Initialize()+0x494>
    4510:	2301      	movs	r3, #1
    4512:	e000      	b.n	4516 <sjsu::lpc40xx::SystemController::Initialize()+0x496>
    4514:	2300      	movs	r3, #0
    4516:	2b00      	cmp	r3, #0
    4518:	d008      	beq.n	452c <sjsu::lpc40xx::SystemController::Initialize()+0x4ac>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock3);
    451a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    451e:	f7ff fda3 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    4522:	4602      	mov	r2, r0
    4524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4528:	601a      	str	r2, [r3, #0]
    452a:	e091      	b.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    }
    else if (60_MHz <= cpu_clock_rate_ && cpu_clock_rate_ < 80_MHz)
    452c:	f04f 003c 	mov.w	r0, #60	; 0x3c
    4530:	f04f 0100 	mov.w	r1, #0
    4534:	f7ff f88c 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4538:	4603      	mov	r3, r0
    453a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	f103 0208 	add.w	r2, r3, #8
    4544:	f107 0390 	add.w	r3, r7, #144	; 0x90
    4548:	4611      	mov	r1, r2
    454a:	4618      	mov	r0, r3
    454c:	f000 f8ea 	bl	4724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4550:	4603      	mov	r3, r0
    4552:	2b00      	cmp	r3, #0
    4554:	d016      	beq.n	4584 <sjsu::lpc40xx::SystemController::Initialize()+0x504>
    4556:	687b      	ldr	r3, [r7, #4]
    4558:	f103 0408 	add.w	r4, r3, #8
    455c:	f04f 0050 	mov.w	r0, #80	; 0x50
    4560:	f04f 0100 	mov.w	r1, #0
    4564:	f7ff f874 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4568:	4603      	mov	r3, r0
    456a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    456e:	f107 0394 	add.w	r3, r7, #148	; 0x94
    4572:	4619      	mov	r1, r3
    4574:	4620      	mov	r0, r4
    4576:	f001 f998 	bl	58aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    457a:	4603      	mov	r3, r0
    457c:	2b00      	cmp	r3, #0
    457e:	d001      	beq.n	4584 <sjsu::lpc40xx::SystemController::Initialize()+0x504>
    4580:	2301      	movs	r3, #1
    4582:	e000      	b.n	4586 <sjsu::lpc40xx::SystemController::Initialize()+0x506>
    4584:	2300      	movs	r3, #0
    4586:	2b00      	cmp	r3, #0
    4588:	d008      	beq.n	459c <sjsu::lpc40xx::SystemController::Initialize()+0x51c>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock4);
    458a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
    458e:	f7ff fd6b 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    4592:	4602      	mov	r2, r0
    4594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4598:	601a      	str	r2, [r3, #0]
    459a:	e059      	b.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    }
    else if (80_MHz <= cpu_clock_rate_ && cpu_clock_rate_ < 100_MHz)
    459c:	f04f 0050 	mov.w	r0, #80	; 0x50
    45a0:	f04f 0100 	mov.w	r1, #0
    45a4:	f7ff f854 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    45a8:	4603      	mov	r3, r0
    45aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	f103 0208 	add.w	r2, r3, #8
    45b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
    45b8:	4611      	mov	r1, r2
    45ba:	4618      	mov	r0, r3
    45bc:	f000 f8b2 	bl	4724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    45c0:	4603      	mov	r3, r0
    45c2:	2b00      	cmp	r3, #0
    45c4:	d016      	beq.n	45f4 <sjsu::lpc40xx::SystemController::Initialize()+0x574>
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	f103 0408 	add.w	r4, r3, #8
    45cc:	f04f 0064 	mov.w	r0, #100	; 0x64
    45d0:	f04f 0100 	mov.w	r1, #0
    45d4:	f7ff f83c 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    45d8:	4603      	mov	r3, r0
    45da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    45de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    45e2:	4619      	mov	r1, r3
    45e4:	4620      	mov	r0, r4
    45e6:	f001 f960 	bl	58aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    45ea:	4603      	mov	r3, r0
    45ec:	2b00      	cmp	r3, #0
    45ee:	d001      	beq.n	45f4 <sjsu::lpc40xx::SystemController::Initialize()+0x574>
    45f0:	2301      	movs	r3, #1
    45f2:	e000      	b.n	45f6 <sjsu::lpc40xx::SystemController::Initialize()+0x576>
    45f4:	2300      	movs	r3, #0
    45f6:	2b00      	cmp	r3, #0
    45f8:	d008      	beq.n	460c <sjsu::lpc40xx::SystemController::Initialize()+0x58c>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock5);
    45fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    45fe:	f7ff fd33 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    4602:	4602      	mov	r2, r0
    4604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4608:	601a      	str	r2, [r3, #0]
    460a:	e021      	b.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    }
    else if (cpu_clock_rate_ >= 100_MHz)
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	f103 0408 	add.w	r4, r3, #8
    4612:	f04f 0064 	mov.w	r0, #100	; 0x64
    4616:	f04f 0100 	mov.w	r1, #0
    461a:	f7ff f819 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    461e:	4603      	mov	r3, r0
    4620:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    4624:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
    4628:	4619      	mov	r1, r3
    462a:	4620      	mov	r0, r4
    462c:	f001 f95b 	bl	58e6 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator>=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4630:	4603      	mov	r3, r0
    4632:	2b00      	cmp	r3, #0
    4634:	d00c      	beq.n	4650 <sjsu::lpc40xx::SystemController::Initialize()+0x5d0>
    {
      sys->FLASHCFG = Value(FlashConfiguration::kClock5);
    4636:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    463a:	f7ff fd15 	bl	4068 <auto sjsu::Value<sjsu::lpc40xx::SystemController::FlashConfiguration>(sjsu::lpc40xx::SystemController::FlashConfiguration)>
    463e:	4602      	mov	r2, r0
    4640:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    4644:	601a      	str	r2, [r3, #0]
      sys->PBOOST   = 0b11;
    4646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    464a:	2203      	movs	r2, #3
    464c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

    // =========================================================================
    // Step 7. Finally select the sources for each clock
    // =========================================================================
    // Set CPU clock the source defined in the configuration
    CpuClockRegister::Register()
    4650:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
    4654:	4618      	mov	r0, r3
    4656:	f7ff fb85 	bl	3d64 <sjsu::lpc40xx::SystemController::CpuClockRegister::Register()>
        .Insert(Value(config.cpu.clock), CpuClockRegister::kSelect)
    465a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    465c:	4618      	mov	r0, r3
    465e:	f7ff fcbb 	bl	3fd8 <auto sjsu::Value<sjsu::lpc40xx::SystemController::CpuClockSelect>(sjsu::lpc40xx::SystemController::CpuClockSelect)>
    4662:	4603      	mov	r3, r0
    4664:	4619      	mov	r1, r3
    4666:	4b1d      	ldr	r3, [pc, #116]	; (46dc <sjsu::lpc40xx::SystemController::Initialize()+0x65c>)
    4668:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
    466c:	cb0c      	ldmia	r3, {r2, r3}
    466e:	f001 f8b5 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    4672:	4603      	mov	r3, r0
        .Save();
    4674:	4618      	mov	r0, r3
    4676:	f7ff fc01 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>

    // Set USB clock the source defined in the configuration
    UsbClockRegister::Register()
    467a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
    467e:	4618      	mov	r0, r3
    4680:	f7ff fba6 	bl	3dd0 <sjsu::lpc40xx::SystemController::UsbClockRegister::Register()>
        .Insert(Value(config.usb.clock), UsbClockRegister::kSelect)
    4684:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    4688:	4618      	mov	r0, r3
    468a:	f7ff fcb1 	bl	3ff0 <auto sjsu::Value<sjsu::lpc40xx::SystemController::UsbClockSelect>(sjsu::lpc40xx::SystemController::UsbClockSelect)>
    468e:	4603      	mov	r3, r0
    4690:	4619      	mov	r1, r3
    4692:	4b13      	ldr	r3, [pc, #76]	; (46e0 <sjsu::lpc40xx::SystemController::Initialize()+0x660>)
    4694:	f107 00ac 	add.w	r0, r7, #172	; 0xac
    4698:	cb0c      	ldmia	r3, {r2, r3}
    469a:	f001 f89f 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    469e:	4603      	mov	r3, r0
        .Save();
    46a0:	4618      	mov	r0, r3
    46a2:	f7ff fbeb 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>

    // Set SPIFI clock the source defined in the configuration
    SpiFiClockRegister::Register()
    46a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
    46aa:	4618      	mov	r0, r3
    46ac:	f7ff fba2 	bl	3df4 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::Register()>
        .Insert(Value(config.spifi.clock), SpiFiClockRegister::kSelect)
    46b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    46b4:	4618      	mov	r0, r3
    46b6:	f7ff fca7 	bl	4008 <auto sjsu::Value<sjsu::lpc40xx::SystemController::SpifiClockSelect>(sjsu::lpc40xx::SystemController::SpifiClockSelect)>
    46ba:	4603      	mov	r3, r0
    46bc:	4619      	mov	r1, r3
    46be:	4b09      	ldr	r3, [pc, #36]	; (46e4 <sjsu::lpc40xx::SystemController::Initialize()+0x664>)
    46c0:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
    46c4:	cb0c      	ldmia	r3, {r2, r3}
    46c6:	f001 f889 	bl	57dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>
    46ca:	4603      	mov	r3, r0
        .Save();
    46cc:	4618      	mov	r0, r3
    46ce:	f7ff fbd5 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>
  }
    46d2:	bf00      	nop
    46d4:	37c0      	adds	r7, #192	; 0xc0
    46d6:	46bd      	mov	sp, r7
    46d8:	bdb0      	pop	{r4, r5, r7, pc}
    46da:	bf00      	nop
    46dc:	00007e0c 	.word	0x00007e0c
    46e0:	00007e2c 	.word	0x00007e2c
    46e4:	00007e3c 	.word	0x00007e3c

000046e8 <std::initializer_list<int>::begin() const>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    46e8:	b480      	push	{r7}
    46ea:	b083      	sub	sp, #12
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	4618      	mov	r0, r3
    46f6:	370c      	adds	r7, #12
    46f8:	46bd      	mov	sp, r7
    46fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    46fe:	4770      	bx	lr

00004700 <std::initializer_list<int>::end() const>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    4700:	b590      	push	{r4, r7, lr}
    4702:	b083      	sub	sp, #12
    4704:	af00      	add	r7, sp, #0
    4706:	6078      	str	r0, [r7, #4]
    4708:	6878      	ldr	r0, [r7, #4]
    470a:	f7ff ffed 	bl	46e8 <std::initializer_list<int>::begin() const>
    470e:	4604      	mov	r4, r0
    4710:	6878      	ldr	r0, [r7, #4]
    4712:	f001 f938 	bl	5986 <std::initializer_list<int>::size() const>
    4716:	4603      	mov	r3, r0
    4718:	009b      	lsls	r3, r3, #2
    471a:	4423      	add	r3, r4
    471c:	4618      	mov	r0, r3
    471e:	370c      	adds	r7, #12
    4720:	46bd      	mov	sp, r7
    4722:	bd90      	pop	{r4, r7, pc}

00004724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    4724:	b580      	push	{r7, lr}
    4726:	ed2d 8b02 	vpush	{d8}
    472a:	b082      	sub	sp, #8
    472c:	af00      	add	r7, sp, #0
    472e:	6078      	str	r0, [r7, #4]
    4730:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	ed93 8a00 	vldr	s16, [r3]
    4738:	683b      	ldr	r3, [r7, #0]
    473a:	4618      	mov	r0, r3
    473c:	f000 f810 	bl	4760 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    4740:	eef0 7a40 	vmov.f32	s15, s0
    4744:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    474c:	bf94      	ite	ls
    474e:	2301      	movls	r3, #1
    4750:	2300      	movhi	r3, #0
    4752:	b2db      	uxtb	r3, r3
		}
    4754:	4618      	mov	r0, r3
    4756:	3708      	adds	r7, #8
    4758:	46bd      	mov	sp, r7
    475a:	ecbd 8b02 	vpop	{d8}
    475e:	bd80      	pop	{r7, pc}

00004760 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4760:	b580      	push	{r7, lr}
    4762:	b086      	sub	sp, #24
    4764:	af00      	add	r7, sp, #0
    4766:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4768:	6878      	ldr	r0, [r7, #4]
    476a:	f000 f807 	bl	477c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    476e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4772:	eeb0 0a67 	vmov.f32	s0, s15
    4776:	3718      	adds	r7, #24
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}

0000477c <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    477c:	b480      	push	{r7}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	60f8      	str	r0, [r7, #12]
    4784:	7239      	strb	r1, [r7, #8]
    4786:	713a      	strb	r2, [r7, #4]
    4788:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    478a:	68fb      	ldr	r3, [r7, #12]
    478c:	edd3 7a00 	vldr	s15, [r3]
    4790:	ed9f 7a06 	vldr	s14, [pc, #24]	; 47ac <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1000000ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x30>
    4794:	eec7 6a87 	vdiv.f32	s13, s15, s14
    4798:	eef0 7a66 	vmov.f32	s15, s13
		}
    479c:	eeb0 0a67 	vmov.f32	s0, s15
    47a0:	3714      	adds	r7, #20
    47a2:	46bd      	mov	sp, r7
    47a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    47a8:	4770      	bx	lr
    47aa:	bf00      	nop
    47ac:	49742400 	.word	0x49742400

000047b0 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const>:

 private:
  units::frequency::hertz_t SetupPll(volatile uint32_t * control,
    47b0:	b580      	push	{r7, lr}
    47b2:	b09a      	sub	sp, #104	; 0x68
    47b4:	af02      	add	r7, sp, #8
    47b6:	60f8      	str	r0, [r7, #12]
    47b8:	60b9      	str	r1, [r7, #8]
    47ba:	607a      	str	r2, [r7, #4]
    47bc:	603b      	str	r3, [r7, #0]
                                     volatile uint32_t * config,
                                     volatile uint32_t * feed,
                                     volatile uint32_t * stat,
                                     int pll_index) const
  {
    const auto & pll_config = clock_configuration_.pll[pll_index];
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	685a      	ldr	r2, [r3, #4]
    47c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    47c4:	005b      	lsls	r3, r3, #1
    47c6:	4413      	add	r3, r2
    47c8:	3306      	adds	r3, #6
    47ca:	657b      	str	r3, [r7, #84]	; 0x54
    units::frequency::hertz_t fcco;

    if (pll_config.enabled)
    47cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47ce:	781b      	ldrb	r3, [r3, #0]
    47d0:	2b00      	cmp	r3, #0
    47d2:	f000 80cb 	beq.w	496c <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1bc>
    {
      *config = bit::Insert(*config, pll_config.multiply - 1,
    47d6:	687b      	ldr	r3, [r7, #4]
    47d8:	6818      	ldr	r0, [r3, #0]
    47da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    47dc:	785b      	ldrb	r3, [r3, #1]
    47de:	1e59      	subs	r1, r3, #1
    47e0:	4b65      	ldr	r3, [pc, #404]	; (4978 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1c8>)
    47e2:	cb0c      	ldmia	r3, {r2, r3}
    47e4:	f001 f89d 	bl	5922 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>
    47e8:	4602      	mov	r2, r0
    47ea:	687b      	ldr	r3, [r7, #4]
    47ec:	601a      	str	r2, [r3, #0]
                            PllRegister::kMultiplier);

      if (clock_configuration_.system_oscillator == OscillatorSource::kIrc &&
    47ee:	68fb      	ldr	r3, [r7, #12]
    47f0:	685b      	ldr	r3, [r3, #4]
    47f2:	889b      	ldrh	r3, [r3, #4]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d113      	bne.n	4820 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x70>
    47f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    47fa:	2b00      	cmp	r3, #0
    47fc:	d110      	bne.n	4820 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x70>
          pll_index == 0)
      {
        fcco = kDefaultIRCFrequency * pll_config.multiply;
    47fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4800:	785b      	ldrb	r3, [r3, #1]
    4802:	4619      	mov	r1, r3
    4804:	485d      	ldr	r0, [pc, #372]	; (497c <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1cc>)
    4806:	f001 f89f 	bl	5948 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    480a:	4603      	mov	r3, r0
    480c:	627b      	str	r3, [r7, #36]	; 0x24
    480e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    4812:	f107 0320 	add.w	r3, r7, #32
    4816:	4611      	mov	r1, r2
    4818:	4618      	mov	r0, r3
    481a:	f000 fff6 	bl	580a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    481e:	e012      	b.n	4846 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x96>
      }
      else
      {
        fcco = clock_configuration_.external_oscillator_frequency *
    4820:	68fb      	ldr	r3, [r7, #12]
    4822:	685b      	ldr	r3, [r3, #4]
    4824:	461a      	mov	r2, r3
               pll_config.multiply;
    4826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4828:	785b      	ldrb	r3, [r3, #1]
    482a:	4619      	mov	r1, r3
    482c:	4610      	mov	r0, r2
    482e:	f001 f88b 	bl	5948 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>
    4832:	4603      	mov	r3, r0
    4834:	62bb      	str	r3, [r7, #40]	; 0x28
    4836:	f107 0228 	add.w	r2, r7, #40	; 0x28
    483a:	f107 0320 	add.w	r3, r7, #32
    483e:	4611      	mov	r1, r2
    4840:	4618      	mov	r0, r3
    4842:	f000 ffe2 	bl	580a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>

      // In the datasheet this is the divider, but it acts to multiply the
      // frequency higher to a point where the fcco is stable.
      //
      // fcco must be between 156 MHz to 320 MHz.
      uint32_t fcco_divide = 0;
    4846:	2300      	movs	r3, #0
    4848:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (int divide_codes : { 0, 1, 2, 3 })
    484a:	f107 0318 	add.w	r3, r7, #24
    484e:	2200      	movs	r2, #0
    4850:	601a      	str	r2, [r3, #0]
    4852:	605a      	str	r2, [r3, #4]
    4854:	2304      	movs	r3, #4
    4856:	61fb      	str	r3, [r7, #28]
    4858:	4b49      	ldr	r3, [pc, #292]	; (4980 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1d0>)
    485a:	61bb      	str	r3, [r7, #24]
    485c:	f107 0318 	add.w	r3, r7, #24
    4860:	653b      	str	r3, [r7, #80]	; 0x50
    4862:	6d38      	ldr	r0, [r7, #80]	; 0x50
    4864:	f7ff ff40 	bl	46e8 <std::initializer_list<int>::begin() const>
    4868:	65b8      	str	r0, [r7, #88]	; 0x58
    486a:	6d38      	ldr	r0, [r7, #80]	; 0x50
    486c:	f7ff ff48 	bl	4700 <std::initializer_list<int>::end() const>
    4870:	64f8      	str	r0, [r7, #76]	; 0x4c
    4872:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4876:	429a      	cmp	r2, r3
    4878:	d03f      	beq.n	48fa <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x14a>
    487a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    487c:	681b      	ldr	r3, [r3, #0]
    487e:	64bb      	str	r3, [r7, #72]	; 0x48
      {
        // Multiply the fcco by 2^divide_code
        units::frequency::hertz_t final_fcco = fcco * (1 << divide_codes);
    4880:	2201      	movs	r2, #1
    4882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4884:	409a      	lsls	r2, r3
    4886:	f107 0320 	add.w	r3, r7, #32
    488a:	4611      	mov	r1, r2
    488c:	4618      	mov	r0, r3
    488e:	f001 f886 	bl	599e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    4892:	4603      	mov	r3, r0
    4894:	617b      	str	r3, [r7, #20]
        if (156_MHz <= final_fcco && final_fcco <= 320_MHz)
    4896:	f04f 009c 	mov.w	r0, #156	; 0x9c
    489a:	f04f 0100 	mov.w	r1, #0
    489e:	f7fe fed7 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    48a2:	4603      	mov	r3, r0
    48a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    48a6:	f107 0214 	add.w	r2, r7, #20
    48aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    48ae:	4611      	mov	r1, r2
    48b0:	4618      	mov	r0, r3
    48b2:	f7ff ff37 	bl	4724 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    48b6:	4603      	mov	r3, r0
    48b8:	2b00      	cmp	r3, #0
    48ba:	d014      	beq.n	48e6 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x136>
    48bc:	f44f 70a0 	mov.w	r0, #320	; 0x140
    48c0:	f04f 0100 	mov.w	r1, #0
    48c4:	f7fe fec4 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    48c8:	4603      	mov	r3, r0
    48ca:	633b      	str	r3, [r7, #48]	; 0x30
    48cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
    48d0:	f107 0314 	add.w	r3, r7, #20
    48d4:	4611      	mov	r1, r2
    48d6:	4618      	mov	r0, r3
    48d8:	f001 f87f 	bl	59da <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    48dc:	4603      	mov	r3, r0
    48de:	2b00      	cmp	r3, #0
    48e0:	d001      	beq.n	48e6 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x136>
    48e2:	2301      	movs	r3, #1
    48e4:	e000      	b.n	48e8 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x138>
    48e6:	2300      	movs	r3, #0
    48e8:	2b00      	cmp	r3, #0
    48ea:	d002      	beq.n	48f2 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x142>
        {
          fcco_divide = divide_codes;
    48ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    48ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    48f0:	e003      	b.n	48fa <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x14a>
      for (int divide_codes : { 0, 1, 2, 3 })
    48f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    48f4:	3304      	adds	r3, #4
    48f6:	65bb      	str	r3, [r7, #88]	; 0x58
    48f8:	e7bb      	b.n	4872 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0xc2>
          break;
        }
      }

      SJ2_ASSERT_FATAL(
    48fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    48fc:	2b00      	cmp	r3, #0
    48fe:	d113      	bne.n	4928 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x178>
    4900:	f107 0038 	add.w	r0, r7, #56	; 0x38
    4904:	2300      	movs	r3, #0
    4906:	9300      	str	r3, [sp, #0]
    4908:	f240 2397 	movw	r3, #663	; 0x297
    490c:	4a1d      	ldr	r2, [pc, #116]	; (4984 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1d4>)
    490e:	491e      	ldr	r1, [pc, #120]	; (4988 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1d8>)
    4910:	f7fb fd2e 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
    4914:	f107 0238 	add.w	r2, r7, #56	; 0x38
    4918:	f107 0334 	add.w	r3, r7, #52	; 0x34
    491c:	491b      	ldr	r1, [pc, #108]	; (498c <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1dc>)
    491e:	4618      	mov	r0, r3
    4920:	f7fd f814 	bl	194c <sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)>
    4924:	f7fd f80e 	bl	1944 <sjsu::Halt()>
          fcco_divide != 0,
          "The provided multiply value and oscillator choices results in "
          "FCCO frequency outside of 156 MHz and 320 MHz. See page 65 "
          "UM10562 LPC408x/407x User manual for more details.");

      *config = bit::Insert(*config, fcco_divide, PllRegister::kDivider);
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	6818      	ldr	r0, [r3, #0]
    492c:	4b18      	ldr	r3, [pc, #96]	; (4990 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1e0>)
    492e:	cb0c      	ldmia	r3, {r2, r3}
    4930:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    4932:	f001 f870 	bl	5a16 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    4936:	4602      	mov	r2, r0
    4938:	687b      	ldr	r3, [r7, #4]
    493a:	601a      	str	r2, [r3, #0]
      // Enable PLL
      *control = 1;
    493c:	68bb      	ldr	r3, [r7, #8]
    493e:	2201      	movs	r2, #1
    4940:	601a      	str	r2, [r3, #0]
      // Feed PLL in order to start the locking process
      *feed = 0xAA;
    4942:	683b      	ldr	r3, [r7, #0]
    4944:	22aa      	movs	r2, #170	; 0xaa
    4946:	601a      	str	r2, [r3, #0]
      *feed = 0x55;
    4948:	683b      	ldr	r3, [r7, #0]
    494a:	2255      	movs	r2, #85	; 0x55
    494c:	601a      	str	r2, [r3, #0]

      while (!bit::Read(*stat, PllRegister::kPllLockStatus))
    494e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	4a10      	ldr	r2, [pc, #64]	; (4994 <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1e4>)
    4954:	ca06      	ldmia	r2, {r1, r2}
    4956:	4618      	mov	r0, r3
    4958:	f001 f870 	bl	5a3c <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    495c:	4603      	mov	r3, r0
    495e:	f083 0301 	eor.w	r3, r3, #1
    4962:	b2db      	uxtb	r3, r3
    4964:	2b00      	cmp	r3, #0
    4966:	d001      	beq.n	496c <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x1bc>
      {
        continue;
    4968:	bf00      	nop
      while (!bit::Read(*stat, PllRegister::kPllLockStatus))
    496a:	e7f0      	b.n	494e <sjsu::lpc40xx::SystemController::SetupPll(unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, unsigned long volatile*, int) const+0x19e>
      }
    }

    return fcco;
    496c:	6a3b      	ldr	r3, [r7, #32]
  }
    496e:	4618      	mov	r0, r3
    4970:	3760      	adds	r7, #96	; 0x60
    4972:	46bd      	mov	sp, r7
    4974:	bd80      	pop	{r7, pc}
    4976:	bf00      	nop
    4978:	00007dd4 	.word	0x00007dd4
    497c:	00007dd0 	.word	0x00007dd0
    4980:	00007f40 	.word	0x00007f40
    4984:	00007940 	.word	0x00007940
    4988:	0000794c 	.word	0x0000794c
    498c:	000079a0 	.word	0x000079a0
    4990:	00007ddc 	.word	0x00007ddc
    4994:	00007de4 	.word	0x00007de4

00004998 <sjsu::bit::Register<unsigned long>::Clear(sjsu::bit::Mask)>:
  constexpr Register & Clear(Mask mask)
    4998:	b580      	push	{r7, lr}
    499a:	b084      	sub	sp, #16
    499c:	af00      	add	r7, sp, #0
    499e:	60f8      	str	r0, [r7, #12]
    49a0:	1d3b      	adds	r3, r7, #4
    49a2:	e883 0006 	stmia.w	r3, {r1, r2}
    value_ = sjsu::bit::Clear(value_, mask);
    49a6:	68fb      	ldr	r3, [r7, #12]
    49a8:	6858      	ldr	r0, [r3, #4]
    49aa:	1d3b      	adds	r3, r7, #4
    49ac:	e893 0006 	ldmia.w	r3, {r1, r2}
    49b0:	f001 f855 	bl	5a5e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>
    49b4:	4602      	mov	r2, r0
    49b6:	68fb      	ldr	r3, [r7, #12]
    49b8:	605a      	str	r2, [r3, #4]
    return *this;
    49ba:	68fb      	ldr	r3, [r7, #12]
  }
    49bc:	4618      	mov	r0, r3
    49be:	3710      	adds	r7, #16
    49c0:	46bd      	mov	sp, r7
    49c2:	bd80      	pop	{r7, pc}

000049c4 <sjsu::bit::Register<unsigned long>::Set(sjsu::bit::Mask)>:
  constexpr Register & Set(Mask mask)
    49c4:	b580      	push	{r7, lr}
    49c6:	b084      	sub	sp, #16
    49c8:	af00      	add	r7, sp, #0
    49ca:	60f8      	str	r0, [r7, #12]
    49cc:	1d3b      	adds	r3, r7, #4
    49ce:	e883 0006 	stmia.w	r3, {r1, r2}
    value_ = sjsu::bit::Set(value_, mask);
    49d2:	68fb      	ldr	r3, [r7, #12]
    49d4:	6858      	ldr	r0, [r3, #4]
    49d6:	1d3b      	adds	r3, r7, #4
    49d8:	e893 0006 	ldmia.w	r3, {r1, r2}
    49dc:	f001 f850 	bl	5a80 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>
    49e0:	4602      	mov	r2, r0
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	605a      	str	r2, [r3, #4]
    return *this;
    49e6:	68fb      	ldr	r3, [r7, #12]
  }
    49e8:	4618      	mov	r0, r3
    49ea:	3710      	adds	r7, #16
    49ec:	46bd      	mov	sp, r7
    49ee:	bd80      	pop	{r7, pc}

000049f0 <sjsu::bit::Register<unsigned long>::Read(sjsu::bit::Mask)>:

  /// Read a bit from the target value at the position specifed.
  ///
  /// @param mask - location in the register to read from.
  /// @return true - if the starting position of the mask is set high.
  constexpr bool Read(Mask mask)
    49f0:	b580      	push	{r7, lr}
    49f2:	b084      	sub	sp, #16
    49f4:	af00      	add	r7, sp, #0
    49f6:	60f8      	str	r0, [r7, #12]
    49f8:	1d3b      	adds	r3, r7, #4
    49fa:	e883 0006 	stmia.w	r3, {r1, r2}
  {
    return sjsu::bit::Read(*reg_, mask);
    49fe:	68fb      	ldr	r3, [r7, #12]
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	6818      	ldr	r0, [r3, #0]
    4a04:	1d3b      	adds	r3, r7, #4
    4a06:	e893 0006 	ldmia.w	r3, {r1, r2}
    4a0a:	f001 f817 	bl	5a3c <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>
    4a0e:	4603      	mov	r3, r0
  }
    4a10:	4618      	mov	r0, r3
    4a12:	3710      	adds	r7, #16
    4a14:	46bd      	mov	sp, r7
    4a16:	bd80      	pop	{r7, pc}

00004a18 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const>:

  void EnableExternalOscillator() const
    4a18:	b580      	push	{r7, lr}
    4a1a:	b090      	sub	sp, #64	; 0x40
    4a1c:	af02      	add	r7, sp, #8
    4a1e:	6078      	str	r0, [r7, #4]
  {
    auto scs_register = OscillatorRegister::Register();
    4a20:	f107 030c 	add.w	r3, r7, #12
    4a24:	4618      	mov	r0, r3
    4a26:	f7ff f98b 	bl	3d40 <sjsu::lpc40xx::SystemController::OscillatorRegister::Register()>
    auto frequency    = clock_configuration_.external_oscillator_frequency;
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	685b      	ldr	r3, [r3, #4]
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	60bb      	str	r3, [r7, #8]
    if (1_MHz <= frequency && frequency <= 20_MHz)
    4a32:	f04f 0001 	mov.w	r0, #1
    4a36:	f04f 0100 	mov.w	r1, #0
    4a3a:	f7fe fe09 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4a3e:	4603      	mov	r3, r0
    4a40:	617b      	str	r3, [r7, #20]
    4a42:	f107 0208 	add.w	r2, r7, #8
    4a46:	f107 0314 	add.w	r3, r7, #20
    4a4a:	4611      	mov	r1, r2
    4a4c:	4618      	mov	r0, r3
    4a4e:	f7fe fe46 	bl	36de <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4a52:	4603      	mov	r3, r0
    4a54:	2b00      	cmp	r3, #0
    4a56:	d014      	beq.n	4a82 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x6a>
    4a58:	f04f 0014 	mov.w	r0, #20
    4a5c:	f04f 0100 	mov.w	r1, #0
    4a60:	f7fe fdf6 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4a64:	4603      	mov	r3, r0
    4a66:	61bb      	str	r3, [r7, #24]
    4a68:	f107 0218 	add.w	r2, r7, #24
    4a6c:	f107 0308 	add.w	r3, r7, #8
    4a70:	4611      	mov	r1, r2
    4a72:	4618      	mov	r0, r3
    4a74:	f7fe fe33 	bl	36de <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4a78:	4603      	mov	r3, r0
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d001      	beq.n	4a82 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x6a>
    4a7e:	2301      	movs	r3, #1
    4a80:	e000      	b.n	4a84 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x6c>
    4a82:	2300      	movs	r3, #0
    4a84:	2b00      	cmp	r3, #0
    4a86:	d007      	beq.n	4a98 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x80>
    {
      scs_register.Clear(OscillatorRegister::kRangeSelect);
    4a88:	4a36      	ldr	r2, [pc, #216]	; (4b64 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x14c>)
    4a8a:	f107 030c 	add.w	r3, r7, #12
    4a8e:	ca06      	ldmia	r2, {r1, r2}
    4a90:	4618      	mov	r0, r3
    4a92:	f7ff ff81 	bl	4998 <sjsu::bit::Register<unsigned long>::Clear(sjsu::bit::Mask)>
    4a96:	e046      	b.n	4b26 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x10e>
    }
    else if (20_MHz <= frequency && frequency <= 25_MHz)
    4a98:	f04f 0014 	mov.w	r0, #20
    4a9c:	f04f 0100 	mov.w	r1, #0
    4aa0:	f7fe fdd6 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4aa4:	4603      	mov	r3, r0
    4aa6:	61fb      	str	r3, [r7, #28]
    4aa8:	f107 0208 	add.w	r2, r7, #8
    4aac:	f107 031c 	add.w	r3, r7, #28
    4ab0:	4611      	mov	r1, r2
    4ab2:	4618      	mov	r0, r3
    4ab4:	f7fe fe13 	bl	36de <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4ab8:	4603      	mov	r3, r0
    4aba:	2b00      	cmp	r3, #0
    4abc:	d014      	beq.n	4ae8 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0xd0>
    4abe:	f04f 0019 	mov.w	r0, #25
    4ac2:	f04f 0100 	mov.w	r1, #0
    4ac6:	f7fe fdc3 	bl	3650 <units::literals::operator"" _MHz(unsigned long long)>
    4aca:	4603      	mov	r3, r0
    4acc:	623b      	str	r3, [r7, #32]
    4ace:	f107 0220 	add.w	r2, r7, #32
    4ad2:	f107 0308 	add.w	r3, r7, #8
    4ad6:	4611      	mov	r1, r2
    4ad8:	4618      	mov	r0, r3
    4ada:	f7fe fe00 	bl	36de <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    4ade:	4603      	mov	r3, r0
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d001      	beq.n	4ae8 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0xd0>
    4ae4:	2301      	movs	r3, #1
    4ae6:	e000      	b.n	4aea <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0xd2>
    4ae8:	2300      	movs	r3, #0
    4aea:	2b00      	cmp	r3, #0
    4aec:	d007      	beq.n	4afe <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0xe6>
    {
      scs_register.Set(OscillatorRegister::kRangeSelect);
    4aee:	4a1d      	ldr	r2, [pc, #116]	; (4b64 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x14c>)
    4af0:	f107 030c 	add.w	r3, r7, #12
    4af4:	ca06      	ldmia	r2, {r1, r2}
    4af6:	4618      	mov	r0, r3
    4af8:	f7ff ff64 	bl	49c4 <sjsu::bit::Register<unsigned long>::Set(sjsu::bit::Mask)>
    4afc:	e013      	b.n	4b26 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x10e>
    }
    else
    {
      SJ2_ASSERT_FATAL(
    4afe:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4b02:	2300      	movs	r3, #0
    4b04:	9300      	str	r3, [sp, #0]
    4b06:	f240 23bb 	movw	r3, #699	; 0x2bb
    4b0a:	4a17      	ldr	r2, [pc, #92]	; (4b68 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x150>)
    4b0c:	4917      	ldr	r1, [pc, #92]	; (4b6c <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x154>)
    4b0e:	f7fb fc2f 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
    4b12:	f107 0228 	add.w	r2, r7, #40	; 0x28
    4b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
    4b1a:	4915      	ldr	r1, [pc, #84]	; (4b70 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x158>)
    4b1c:	4618      	mov	r0, r3
    4b1e:	f7fc ff15 	bl	194c <sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)>
    4b22:	f7fc ff0f 	bl	1944 <sjsu::Halt()>
          false,
          "External Oscillator Frequency is outside of the the acceptable 1 "
          "MHz <--> 25 MHz.");
    }

    scs_register.Set(OscillatorRegister::kExternalEnable).Save();
    4b26:	4a13      	ldr	r2, [pc, #76]	; (4b74 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x15c>)
    4b28:	f107 030c 	add.w	r3, r7, #12
    4b2c:	ca06      	ldmia	r2, {r1, r2}
    4b2e:	4618      	mov	r0, r3
    4b30:	f7ff ff48 	bl	49c4 <sjsu::bit::Register<unsigned long>::Set(sjsu::bit::Mask)>
    4b34:	4603      	mov	r3, r0
    4b36:	4618      	mov	r0, r3
    4b38:	f7ff f9a0 	bl	3e7c <sjsu::bit::Register<unsigned long>::Save()>

    while (!scs_register.Read(OscillatorRegister::kExternalReady))
    4b3c:	4a0e      	ldr	r2, [pc, #56]	; (4b78 <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x160>)
    4b3e:	f107 030c 	add.w	r3, r7, #12
    4b42:	ca06      	ldmia	r2, {r1, r2}
    4b44:	4618      	mov	r0, r3
    4b46:	f7ff ff53 	bl	49f0 <sjsu::bit::Register<unsigned long>::Read(sjsu::bit::Mask)>
    4b4a:	4603      	mov	r3, r0
    4b4c:	f083 0301 	eor.w	r3, r3, #1
    4b50:	b2db      	uxtb	r3, r3
    4b52:	2b00      	cmp	r3, #0
    4b54:	d001      	beq.n	4b5a <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x142>
    {
      continue;
    4b56:	bf00      	nop
    while (!scs_register.Read(OscillatorRegister::kExternalReady))
    4b58:	e7f0      	b.n	4b3c <sjsu::lpc40xx::SystemController::EnableExternalOscillator() const+0x124>
    }
  }
    4b5a:	bf00      	nop
    4b5c:	3738      	adds	r7, #56	; 0x38
    4b5e:	46bd      	mov	sp, r7
    4b60:	bd80      	pop	{r7, pc}
    4b62:	bf00      	nop
    4b64:	00007dec 	.word	0x00007dec
    4b68:	00007a94 	.word	0x00007a94
    4b6c:	0000794c 	.word	0x0000794c
    4b70:	00007ab0 	.word	0x00007ab0
    4b74:	00007df4 	.word	0x00007df4
    4b78:	00007dfc 	.word	0x00007dfc

00004b7c <sjsu::Pin::PullUp() const>:
  // ===========================================================================
  // Utility Methods
  // ===========================================================================

  /// Attach internal pull up resistor to pin
  void PullUp() const
    4b7c:	b580      	push	{r7, lr}
    4b7e:	b08c      	sub	sp, #48	; 0x30
    4b80:	af00      	add	r7, sp, #0
    4b82:	6078      	str	r0, [r7, #4]
  {
    SetPull(Resistor::kPullUp);
    4b84:	687b      	ldr	r3, [r7, #4]
    4b86:	681b      	ldr	r3, [r3, #0]
    4b88:	3308      	adds	r3, #8
    4b8a:	681b      	ldr	r3, [r3, #0]
    4b8c:	f107 0008 	add.w	r0, r7, #8
    4b90:	2202      	movs	r2, #2
    4b92:	6879      	ldr	r1, [r7, #4]
    4b94:	4798      	blx	r3
  }
    4b96:	bf00      	nop
    4b98:	3730      	adds	r7, #48	; 0x30
    4b9a:	46bd      	mov	sp, r7
    4b9c:	bd80      	pop	{r7, pc}

00004b9e <sjsu::Pin::GetPort() const>:
  }

  /// Getter method for the pin's port.
  ///
  /// @returns The pin's port.
  uint8_t GetPort() const
    4b9e:	b480      	push	{r7}
    4ba0:	b083      	sub	sp, #12
    4ba2:	af00      	add	r7, sp, #0
    4ba4:	6078      	str	r0, [r7, #4]
  {
    return port_;
    4ba6:	687b      	ldr	r3, [r7, #4]
    4ba8:	791b      	ldrb	r3, [r3, #4]
  }
    4baa:	4618      	mov	r0, r3
    4bac:	370c      	adds	r7, #12
    4bae:	46bd      	mov	sp, r7
    4bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bb4:	4770      	bx	lr

00004bb6 <sjsu::Pin::GetPin() const>:

  /// Getter method for the pin's pin.
  ///
  /// @returns The pin's pin.
  uint8_t GetPin() const
    4bb6:	b480      	push	{r7}
    4bb8:	b083      	sub	sp, #12
    4bba:	af00      	add	r7, sp, #0
    4bbc:	6078      	str	r0, [r7, #4]
  {
    return pin_;
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	795b      	ldrb	r3, [r3, #5]
  }
    4bc2:	4618      	mov	r0, r3
    4bc4:	370c      	adds	r7, #12
    4bc6:	46bd      	mov	sp, r7
    4bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4bcc:	4770      	bx	lr

00004bce <sjsu::lpc40xx::Pin::Initialize() const>:
  /// @param port - port number for the pin you want to construct.
  /// @param pin - pin number for the pin you want to construct.
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  /// NOTE: GPIO hardare is enabled and ready by default on reset.
  Returns<void> Initialize() const override
    4bce:	b580      	push	{r7, lr}
    4bd0:	b082      	sub	sp, #8
    4bd2:	af00      	add	r7, sp, #0
    4bd4:	6078      	str	r0, [r7, #4]
    4bd6:	6039      	str	r1, [r7, #0]
  {
    return {};
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	4618      	mov	r0, r3
    4bdc:	2328      	movs	r3, #40	; 0x28
    4bde:	461a      	mov	r2, r3
    4be0:	2100      	movs	r1, #0
    4be2:	f002 f9ef 	bl	6fc4 <memset>
    4be6:	6878      	ldr	r0, [r7, #4]
    4be8:	f7fc ffe6 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
  }
    4bec:	6878      	ldr	r0, [r7, #4]
    4bee:	3708      	adds	r7, #8
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bd80      	pop	{r7, pc}

00004bf4 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:

  Returns<void> SetPinFunction(uint8_t function) const override
    4bf4:	b590      	push	{r4, r7, lr}
    4bf6:	b09b      	sub	sp, #108	; 0x6c
    4bf8:	af04      	add	r7, sp, #16
    4bfa:	60f8      	str	r0, [r7, #12]
    4bfc:	60b9      	str	r1, [r7, #8]
    4bfe:	4613      	mov	r3, r2
    4c00:	71fb      	strb	r3, [r7, #7]
  {
    if (function > 0b111)
    4c02:	79fb      	ldrb	r3, [r7, #7]
    4c04:	2b07      	cmp	r3, #7
    4c06:	d92d      	bls.n	4c64 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x70>
    {
      return Error(
          Status::kInvalidParameters,
          "The function code must be a 3-bit value between 0b000 and 0b111.");
    4c08:	f107 0334 	add.w	r3, r7, #52	; 0x34
    4c0c:	491f      	ldr	r1, [pc, #124]	; (4c8c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x98>)
    4c0e:	4618      	mov	r0, r3
    4c10:	f7fb fd82 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>
    4c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
    4c18:	491d      	ldr	r1, [pc, #116]	; (4c90 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x9c>)
    4c1a:	4618      	mov	r0, r3
    4c1c:	f7fb fd1f 	bl	65e <std::basic_string_view<char, std::char_traits<char> >::basic_string_view(char const*)>
    4c20:	f107 0048 	add.w	r0, r7, #72	; 0x48
    4c24:	2300      	movs	r3, #0
    4c26:	9300      	str	r3, [sp, #0]
    4c28:	236d      	movs	r3, #109	; 0x6d
    4c2a:	4a1a      	ldr	r2, [pc, #104]	; (4c94 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0xa0>)
    4c2c:	491a      	ldr	r1, [pc, #104]	; (4c98 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0xa4>)
    4c2e:	f7fb fb9f 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
    4c32:	f107 0410 	add.w	r4, r7, #16
    4c36:	f107 0348 	add.w	r3, r7, #72	; 0x48
    4c3a:	9302      	str	r3, [sp, #8]
    4c3c:	466a      	mov	r2, sp
    4c3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
    4c42:	e893 0003 	ldmia.w	r3, {r0, r1}
    4c46:	e882 0003 	stmia.w	r2, {r0, r1}
    4c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    4c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
    4c50:	4620      	mov	r0, r4
    4c52:	f7fc ff4f 	bl	1af4 <sjsu::Error(sjsu::Status, std::basic_string_view<char, std::char_traits<char> >, std::experimental::fundamentals_v2::source_location const&)>
    4c56:	f107 0310 	add.w	r3, r7, #16
    4c5a:	4619      	mov	r1, r3
    4c5c:	68f8      	ldr	r0, [r7, #12]
    4c5e:	f7fd f94c 	bl	1efa <tl::expected<void, sjsu::Error_t>::expected<sjsu::Error_t, (void*)0, (void*)0>(tl::unexpected<sjsu::Error_t>&&)>
    4c62:	e00f      	b.n	4c84 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x90>
    }
    SetPinRegister(function, kFunction);
    4c64:	4b0d      	ldr	r3, [pc, #52]	; (4c9c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0xa8>)
    4c66:	79f9      	ldrb	r1, [r7, #7]
    4c68:	cb0c      	ldmia	r3, {r2, r3}
    4c6a:	68b8      	ldr	r0, [r7, #8]
    4c6c:	f000 f876 	bl	4d5c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
    return {};
    4c70:	68fb      	ldr	r3, [r7, #12]
    4c72:	4618      	mov	r0, r3
    4c74:	2328      	movs	r3, #40	; 0x28
    4c76:	461a      	mov	r2, r3
    4c78:	2100      	movs	r1, #0
    4c7a:	f002 f9a3 	bl	6fc4 <memset>
    4c7e:	68f8      	ldr	r0, [r7, #12]
    4c80:	f7fc ff9a 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
  }
    4c84:	68f8      	ldr	r0, [r7, #12]
    4c86:	375c      	adds	r7, #92	; 0x5c
    4c88:	46bd      	mov	sp, r7
    4c8a:	bd90      	pop	{r4, r7, pc}
    4c8c:	00007dc0 	.word	0x00007dc0
    4c90:	00007b40 	.word	0x00007b40
    4c94:	00007b84 	.word	0x00007b84
    4c98:	00007b94 	.word	0x00007b94
    4c9c:	00007e44 	.word	0x00007e44

00004ca0 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:

  Returns<void> SetPull(Resistor resistor) const override
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	60f8      	str	r0, [r7, #12]
    4ca8:	60b9      	str	r1, [r7, #8]
    4caa:	4613      	mov	r3, r2
    4cac:	71fb      	strb	r3, [r7, #7]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
    4cae:	4b0a      	ldr	r3, [pc, #40]	; (4cd8 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x38>)
    4cb0:	79f9      	ldrb	r1, [r7, #7]
    4cb2:	cb0c      	ldmia	r3, {r2, r3}
    4cb4:	68b8      	ldr	r0, [r7, #8]
    4cb6:	f000 f851 	bl	4d5c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
    return {};
    4cba:	68fb      	ldr	r3, [r7, #12]
    4cbc:	4618      	mov	r0, r3
    4cbe:	2328      	movs	r3, #40	; 0x28
    4cc0:	461a      	mov	r2, r3
    4cc2:	2100      	movs	r1, #0
    4cc4:	f002 f97e 	bl	6fc4 <memset>
    4cc8:	68f8      	ldr	r0, [r7, #12]
    4cca:	f7fc ff75 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
  }
    4cce:	68f8      	ldr	r0, [r7, #12]
    4cd0:	3710      	adds	r7, #16
    4cd2:	46bd      	mov	sp, r7
    4cd4:	bd80      	pop	{r7, pc}
    4cd6:	bf00      	nop
    4cd8:	00007e4c 	.word	0x00007e4c

00004cdc <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:

  Returns<void> SetAsAnalogMode(bool set_as_analog = true) const override
    4cdc:	b580      	push	{r7, lr}
    4cde:	b084      	sub	sp, #16
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	60b9      	str	r1, [r7, #8]
    4ce6:	4613      	mov	r3, r2
    4ce8:	71fb      	strb	r3, [r7, #7]
  {
    // Invert the bool because the bit must be set to 0 to enable analog mode.
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
    4cea:	79fb      	ldrb	r3, [r7, #7]
    4cec:	f083 0301 	eor.w	r3, r3, #1
    4cf0:	b2db      	uxtb	r3, r3
    4cf2:	4619      	mov	r1, r3
    4cf4:	4b09      	ldr	r3, [pc, #36]	; (4d1c <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x40>)
    4cf6:	cb0c      	ldmia	r3, {r2, r3}
    4cf8:	68b8      	ldr	r0, [r7, #8]
    4cfa:	f000 f82f 	bl	4d5c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
    return {};
    4cfe:	68fb      	ldr	r3, [r7, #12]
    4d00:	4618      	mov	r0, r3
    4d02:	2328      	movs	r3, #40	; 0x28
    4d04:	461a      	mov	r2, r3
    4d06:	2100      	movs	r1, #0
    4d08:	f002 f95c 	bl	6fc4 <memset>
    4d0c:	68f8      	ldr	r0, [r7, #12]
    4d0e:	f7fc ff53 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
  }
    4d12:	68f8      	ldr	r0, [r7, #12]
    4d14:	3710      	adds	r7, #16
    4d16:	46bd      	mov	sp, r7
    4d18:	bd80      	pop	{r7, pc}
    4d1a:	bf00      	nop
    4d1c:	00007e54 	.word	0x00007e54

00004d20 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:

  Returns<void> SetAsOpenDrain(bool set_as_open_drain = true) const override
    4d20:	b580      	push	{r7, lr}
    4d22:	b084      	sub	sp, #16
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	60b9      	str	r1, [r7, #8]
    4d2a:	4613      	mov	r3, r2
    4d2c:	71fb      	strb	r3, [r7, #7]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
    4d2e:	79f9      	ldrb	r1, [r7, #7]
    4d30:	4b09      	ldr	r3, [pc, #36]	; (4d58 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x38>)
    4d32:	cb0c      	ldmia	r3, {r2, r3}
    4d34:	68b8      	ldr	r0, [r7, #8]
    4d36:	f000 f811 	bl	4d5c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
    return {};
    4d3a:	68fb      	ldr	r3, [r7, #12]
    4d3c:	4618      	mov	r0, r3
    4d3e:	2328      	movs	r3, #40	; 0x28
    4d40:	461a      	mov	r2, r3
    4d42:	2100      	movs	r1, #0
    4d44:	f002 f93e 	bl	6fc4 <memset>
    4d48:	68f8      	ldr	r0, [r7, #12]
    4d4a:	f7fc ff35 	bl	1bb8 <tl::expected<void, sjsu::Error_t>::expected()>
  }
    4d4e:	68f8      	ldr	r0, [r7, #12]
    4d50:	3710      	adds	r7, #16
    4d52:	46bd      	mov	sp, r7
    4d54:	bd80      	pop	{r7, pc}
    4d56:	bf00      	nop
    4d58:	00007e5c 	.word	0x00007e5c

00004d5c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
 protected:
  /// Does the work of changing the contents of the pin register.
  ///
  /// @param data - the contents to load into the register
  /// @param mask - indicates which bits to set to data
  void SetPinRegister(uint8_t data, bit::Mask mask) const
    4d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d5e:	b087      	sub	sp, #28
    4d60:	af00      	add	r7, sp, #0
    4d62:	60f8      	str	r0, [r7, #12]
    4d64:	4608      	mov	r0, r1
    4d66:	4639      	mov	r1, r7
    4d68:	e881 000c 	stmia.w	r1, {r2, r3}
    4d6c:	4603      	mov	r3, r0
    4d6e:	72fb      	strb	r3, [r7, #11]
    4d70:	68fb      	ldr	r3, [r7, #12]
    4d72:	613b      	str	r3, [r7, #16]
  }

  /// @returns A pointer to the pin's registor in the pin_map matrix.
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->register_matrix[GetPort()][GetPin()];
    4d74:	4b18      	ldr	r3, [pc, #96]	; (4dd8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x7c>)
    4d76:	681c      	ldr	r4, [r3, #0]
    4d78:	693b      	ldr	r3, [r7, #16]
    4d7a:	4618      	mov	r0, r3
    4d7c:	f7ff ff0f 	bl	4b9e <sjsu::Pin::GetPort() const>
    4d80:	4603      	mov	r3, r0
    4d82:	461d      	mov	r5, r3
    4d84:	693b      	ldr	r3, [r7, #16]
    4d86:	4618      	mov	r0, r3
    4d88:	f7ff ff15 	bl	4bb6 <sjsu::Pin::GetPin() const>
    4d8c:	4603      	mov	r3, r0
    4d8e:	461a      	mov	r2, r3
    4d90:	016b      	lsls	r3, r5, #5
    4d92:	4413      	add	r3, r2
    4d94:	009b      	lsls	r3, r3, #2
    4d96:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    4d98:	6818      	ldr	r0, [r3, #0]
    4d9a:	7af9      	ldrb	r1, [r7, #11]
    4d9c:	463b      	mov	r3, r7
    4d9e:	cb0c      	ldmia	r3, {r2, r3}
    4da0:	f000 fe7f 	bl	5aa2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    4da4:	4605      	mov	r5, r0
    4da6:	68fb      	ldr	r3, [r7, #12]
    4da8:	617b      	str	r3, [r7, #20]
    return &pin_map->register_matrix[GetPort()][GetPin()];
    4daa:	4b0b      	ldr	r3, [pc, #44]	; (4dd8 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x7c>)
    4dac:	681c      	ldr	r4, [r3, #0]
    4dae:	697b      	ldr	r3, [r7, #20]
    4db0:	4618      	mov	r0, r3
    4db2:	f7ff fef4 	bl	4b9e <sjsu::Pin::GetPort() const>
    4db6:	4603      	mov	r3, r0
    4db8:	461e      	mov	r6, r3
    4dba:	697b      	ldr	r3, [r7, #20]
    4dbc:	4618      	mov	r0, r3
    4dbe:	f7ff fefa 	bl	4bb6 <sjsu::Pin::GetPin() const>
    4dc2:	4603      	mov	r3, r0
    4dc4:	461a      	mov	r2, r3
    4dc6:	0173      	lsls	r3, r6, #5
    4dc8:	4413      	add	r3, r2
    4dca:	009b      	lsls	r3, r3, #2
    4dcc:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
    4dce:	601d      	str	r5, [r3, #0]
  }
    4dd0:	bf00      	nop
    4dd2:	371c      	adds	r7, #28
    4dd4:	46bd      	mov	sp, r7
    4dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dd8:	1000015c 	.word	0x1000015c

00004ddc <sjsu::Uart::Flush() const>:
  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// The default implementation reads out all of the bytes by checking
  /// HasData() repeatedly and use Read() to read each. Some implementations may
  /// have more efficient methods of clearing their buffers.
  virtual void Flush() const
    4ddc:	b580      	push	{r7, lr}
    4dde:	b082      	sub	sp, #8
    4de0:	af00      	add	r7, sp, #0
    4de2:	6078      	str	r0, [r7, #4]
  {
    PollingFlush();
    4de4:	6878      	ldr	r0, [r7, #4]
    4de6:	f000 f820 	bl	4e2a <sjsu::Uart::PollingFlush() const>
  }
    4dea:	bf00      	nop
    4dec:	3708      	adds	r7, #8
    4dee:	46bd      	mov	sp, r7
    4df0:	bd80      	pop	{r7, pc}

00004df2 <sjsu::Uart::Read() const>:
  }

  /// @return Retrieves a single byte from UART RX line. Users must ensure that
  /// HasData() is true before reading using this method. Otherwise contents of
  /// read data will not be correct and the returned byte will be 0xFF.
  uint8_t Read() const
    4df2:	b580      	push	{r7, lr}
    4df4:	b084      	sub	sp, #16
    4df6:	af00      	add	r7, sp, #0
    4df8:	6078      	str	r0, [r7, #4]
  {
    uint8_t byte;
    if (Read(&byte, sizeof(byte)) == 0)
    4dfa:	687b      	ldr	r3, [r7, #4]
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	330c      	adds	r3, #12
    4e00:	681b      	ldr	r3, [r3, #0]
    4e02:	f107 010f 	add.w	r1, r7, #15
    4e06:	2201      	movs	r2, #1
    4e08:	6878      	ldr	r0, [r7, #4]
    4e0a:	4798      	blx	r3
    4e0c:	4603      	mov	r3, r0
    4e0e:	2b00      	cmp	r3, #0
    4e10:	bf0c      	ite	eq
    4e12:	2301      	moveq	r3, #1
    4e14:	2300      	movne	r3, #0
    4e16:	b2db      	uxtb	r3, r3
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d001      	beq.n	4e20 <sjsu::Uart::Read() const+0x2e>
    {
      byte = 0xFF;
    4e1c:	23ff      	movs	r3, #255	; 0xff
    4e1e:	73fb      	strb	r3, [r7, #15]
    }
    return byte;
    4e20:	7bfb      	ldrb	r3, [r7, #15]
  }
    4e22:	4618      	mov	r0, r3
    4e24:	3710      	adds	r7, #16
    4e26:	46bd      	mov	sp, r7
    4e28:	bd80      	pop	{r7, pc}

00004e2a <sjsu::Uart::PollingFlush() const>:

  /// Will flush all bytes currently head with the UART peripherals buffers.
  ///
  /// by checking HasData() repeatedly and use Read() to read each. Some
  /// implementations may have more efficient methods of clearing their buffers.
  void PollingFlush() const
    4e2a:	b580      	push	{r7, lr}
    4e2c:	b082      	sub	sp, #8
    4e2e:	af00      	add	r7, sp, #0
    4e30:	6078      	str	r0, [r7, #4]
  {
    while (HasData())
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	681b      	ldr	r3, [r3, #0]
    4e36:	3310      	adds	r3, #16
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	6878      	ldr	r0, [r7, #4]
    4e3c:	4798      	blx	r3
    4e3e:	4603      	mov	r3, r0
    4e40:	2b00      	cmp	r3, #0
    4e42:	d003      	beq.n	4e4c <sjsu::Uart::PollingFlush() const+0x22>
    {
      Read();
    4e44:	6878      	ldr	r0, [r7, #4]
    4e46:	f7ff ffd4 	bl	4df2 <sjsu::Uart::Read() const>
    while (HasData())
    4e4a:	e7f2      	b.n	4e32 <sjsu::Uart::PollingFlush() const+0x8>
    }
  }
    4e4c:	bf00      	nop
    4e4e:	3708      	adds	r7, #8
    4e50:	46bd      	mov	sp, r7
    4e52:	bd80      	pop	{r7, pc}

00004e54 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
};
/// @param decimal - the number to approximate.
/// @return Will generate a UartCalibration_t that attempts to find a fractional
/// value that closely matches the input decimal number as much as possible.
constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    4e54:	b480      	push	{r7}
    4e56:	b089      	sub	sp, #36	; 0x24
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
    4e5c:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2200      	movs	r2, #0
    4e64:	601a      	str	r2, [r3, #0]
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	2200      	movs	r2, #0
    4e6a:	605a      	str	r2, [r3, #4]
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	2201      	movs	r2, #1
    4e70:	609a      	str	r2, [r3, #8]
  bool finished = false;
    4e72:	2300      	movs	r3, #0
    4e74:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    4e76:	2300      	movs	r3, #0
    4e78:	61bb      	str	r3, [r7, #24]
    4e7a:	69bb      	ldr	r3, [r7, #24]
    4e7c:	2b0e      	cmp	r3, #14
    4e7e:	dc4f      	bgt.n	4f20 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    4e80:	7ffb      	ldrb	r3, [r7, #31]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d14c      	bne.n	4f20 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    4e86:	69bb      	ldr	r3, [r7, #24]
    4e88:	3301      	adds	r3, #1
    4e8a:	617b      	str	r3, [r7, #20]
    4e8c:	697b      	ldr	r3, [r7, #20]
    4e8e:	2b0e      	cmp	r3, #14
    4e90:	dc42      	bgt.n	4f18 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    4e92:	7ffb      	ldrb	r3, [r7, #31]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d13f      	bne.n	4f18 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    4e98:	69bb      	ldr	r3, [r7, #24]
    4e9a:	ee07 3a90 	vmov	s15, r3
    4e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4ea2:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    4ea6:	697b      	ldr	r3, [r7, #20]
    4ea8:	ee07 3a90 	vmov	s15, r3
    4eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4eb0:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    4eb4:	edd7 6a04 	vldr	s13, [r7, #16]
    4eb8:	ed97 7a03 	vldr	s14, [r7, #12]
    4ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    4ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    4ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
    4ec8:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    4ecc:	edd7 7a02 	vldr	s15, [r7, #8]
    4ed0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 4f30 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    4ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
    4ed8:	ed97 7a00 	vldr	s14, [r7]
    4edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ee4:	d814      	bhi.n	4f10 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    4ee6:	edd7 7a02 	vldr	s15, [r7, #8]
    4eea:	ed9f 7a11 	vldr	s14, [pc, #68]	; 4f30 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    4eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    4ef2:	ed97 7a00 	vldr	s14, [r7]
    4ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4efe:	db07      	blt.n	4f10 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    4f00:	69ba      	ldr	r2, [r7, #24]
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    4f06:	697a      	ldr	r2, [r7, #20]
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	609a      	str	r2, [r3, #8]
        finished          = true;
    4f0c:	2301      	movs	r3, #1
    4f0e:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    4f10:	697b      	ldr	r3, [r7, #20]
    4f12:	3301      	adds	r3, #1
    4f14:	617b      	str	r3, [r7, #20]
    4f16:	e7b9      	b.n	4e8c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    4f18:	69bb      	ldr	r3, [r7, #24]
    4f1a:	3301      	adds	r3, #1
    4f1c:	61bb      	str	r3, [r7, #24]
    4f1e:	e7ac      	b.n	4e7a <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    4f20:	bf00      	nop
}
    4f22:	6878      	ldr	r0, [r7, #4]
    4f24:	3724      	adds	r7, #36	; 0x24
    4f26:	46bd      	mov	sp, r7
    4f28:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f2c:	4770      	bx	lr
    4f2e:	bf00      	nop
    4f30:	3c23d70a 	.word	0x3c23d70a

00004f34 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:
/// @param peripheral_frequency - input source frequency.
/// @return an estimate for the baud rate divider
constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    4f34:	b480      	push	{r7}
    4f36:	b087      	sub	sp, #28
    4f38:	af00      	add	r7, sp, #0
    4f3a:	ed87 0a03 	vstr	s0, [r7, #12]
    4f3e:	edc7 0a02 	vstr	s1, [r7, #8]
    4f42:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	ee07 3a90 	vmov	s15, r3
    4f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4f4e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    4f52:	edd7 7a03 	vldr	s15, [r7, #12]
    4f56:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    4f5a:	ee27 7a87 	vmul.f32	s14, s15, s14
    4f5e:	edd7 7a02 	vldr	s15, [r7, #8]
    4f62:	ee67 7a27 	vmul.f32	s15, s14, s15
    4f66:	ed97 7a05 	vldr	s14, [r7, #20]
    4f6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    4f6e:	eef0 7a66 	vmov.f32	s15, s13
}
    4f72:	eeb0 0a67 	vmov.f32	s0, s15
    4f76:	371c      	adds	r7, #28
    4f78:	46bd      	mov	sp, r7
    4f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f7e:	4770      	bx	lr

00004f80 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:
/// @return a fraction that would get the baud rate as close to desired baud
///         rate, given the input divider.
constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    4f80:	b480      	push	{r7}
    4f82:	b087      	sub	sp, #28
    4f84:	af00      	add	r7, sp, #0
    4f86:	ed87 0a03 	vstr	s0, [r7, #12]
    4f8a:	edc7 0a02 	vstr	s1, [r7, #8]
    4f8e:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    4f90:	687b      	ldr	r3, [r7, #4]
    4f92:	ee07 3a90 	vmov	s15, r3
    4f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4f9a:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    4f9e:	edd7 7a03 	vldr	s15, [r7, #12]
    4fa2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    4fa6:	ee27 7a87 	vmul.f32	s14, s15, s14
    4faa:	edd7 7a02 	vldr	s15, [r7, #8]
    4fae:	ee67 7a27 	vmul.f32	s15, s14, s15
    4fb2:	ed97 7a05 	vldr	s14, [r7, #20]
    4fb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
    4fba:	eef0 7a66 	vmov.f32	s15, s13
}
    4fbe:	eeb0 0a67 	vmov.f32	s0, s15
    4fc2:	371c      	adds	r7, #28
    4fc4:	46bd      	mov	sp, r7
    4fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fca:	4770      	bx	lr

00004fcc <sjsu::lpc40xx::uart::RoundFloat(float)>:
/// @param value - value to round
/// @return rounded up and truncated value
constexpr float RoundFloat(float value)
{
    4fcc:	b480      	push	{r7}
    4fce:	b083      	sub	sp, #12
    4fd0:	af00      	add	r7, sp, #0
    4fd2:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    4fd6:	edd7 7a01 	vldr	s15, [r7, #4]
    4fda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    4fde:	ee77 7a87 	vadd.f32	s15, s15, s14
    4fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    4fea:	eeb0 0a67 	vmov.f32	s0, s15
    4fee:	370c      	adds	r7, #12
    4ff0:	46bd      	mov	sp, r7
    4ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ff6:	4770      	bx	lr

00004ff8 <sjsu::lpc40xx::uart::IsDecimal(float)>:
/// @param value input float value.
/// @return true if value is within our threshold of a decimal number, false
///         otherwise.
constexpr bool IsDecimal(float value)
{
    4ff8:	b580      	push	{r7, lr}
    4ffa:	b086      	sub	sp, #24
    4ffc:	af00      	add	r7, sp, #0
    4ffe:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    5002:	2300      	movs	r3, #0
    5004:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    5006:	ed97 0a01 	vldr	s0, [r7, #4]
    500a:	f7ff ffdf 	bl	4fcc <sjsu::lpc40xx::uart::RoundFloat(float)>
    500e:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    5012:	ed97 7a01 	vldr	s14, [r7, #4]
    5016:	edd7 7a04 	vldr	s15, [r7, #16]
    501a:	ee77 7a67 	vsub.f32	s15, s14, s15
    501e:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    5022:	edd7 7a03 	vldr	s15, [r7, #12]
    5026:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5054 <sjsu::lpc40xx::uart::IsDecimal(float)+0x5c>
    502a:	eef4 7ac7 	vcmpe.f32	s15, s14
    502e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5032:	db0a      	blt.n	504a <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
    5034:	edd7 7a03 	vldr	s15, [r7, #12]
    5038:	ed9f 7a07 	vldr	s14, [pc, #28]	; 5058 <sjsu::lpc40xx::uart::IsDecimal(float)+0x60>
    503c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5044:	d801      	bhi.n	504a <sjsu::lpc40xx::uart::IsDecimal(float)+0x52>
  {
    result = true;
    5046:	2301      	movs	r3, #1
    5048:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    504a:	7dfb      	ldrb	r3, [r7, #23]
}
    504c:	4618      	mov	r0, r3
    504e:	3718      	adds	r7, #24
    5050:	46bd      	mov	sp, r7
    5052:	bd80      	pop	{r7, pc}
    5054:	bc23d70a 	.word	0xbc23d70a
    5058:	3c23d70a 	.word	0x3c23d70a

0000505c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
/// @return UartCalibration_t that will get the output baud rate as close to the
///         desired baud_rate as possible.
constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate,
    units::frequency::hertz_t peripheral_frequency)
{
    505c:	b590      	push	{r4, r7, lr}
    505e:	b091      	sub	sp, #68	; 0x44
    5060:	af00      	add	r7, sp, #0
    5062:	61f8      	str	r0, [r7, #28]
    5064:	61b9      	str	r1, [r7, #24]
    5066:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    5068:	f107 0314 	add.w	r3, r7, #20
    506c:	4618      	mov	r0, r3
    506e:	f7fe fdd2 	bl	3c16 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    5072:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    5074:	2300      	movs	r3, #0
    5076:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    5078:	69fb      	ldr	r3, [r7, #28]
    507a:	2200      	movs	r2, #0
    507c:	601a      	str	r2, [r3, #0]
    507e:	69fb      	ldr	r3, [r7, #28]
    5080:	2200      	movs	r2, #0
    5082:	605a      	str	r2, [r3, #4]
    5084:	69fb      	ldr	r3, [r7, #28]
    5086:	2201      	movs	r2, #1
    5088:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    508a:	69bb      	ldr	r3, [r7, #24]
    508c:	ee07 3a90 	vmov	s15, r3
    5090:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5094:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    5098:	f04f 0300 	mov.w	r3, #0
    509c:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    509e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    50a2:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    50a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    50a8:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    50aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    50b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50b2:	2b04      	cmp	r3, #4
    50b4:	f000 80be 	beq.w	5234 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
    50b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50ba:	2b03      	cmp	r3, #3
    50bc:	f200 80b8 	bhi.w	5230 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    50c0:	a201      	add	r2, pc, #4	; (adr r2, 50c8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    50c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    50c6:	bf00      	nop
    50c8:	000050d9 	.word	0x000050d9
    50cc:	00005133 	.word	0x00005133
    50d0:	00005193 	.word	0x00005193
    50d4:	00005203 	.word	0x00005203
    switch (state)
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);
    50d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    50da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    50de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    50e2:	f7ff ff27 	bl	4f34 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    50e6:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

        if (divide_estimate < 1.0f)
    50ea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    50ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    50f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    50f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    50fa:	d505      	bpl.n	5108 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    50fc:	69fb      	ldr	r3, [r7, #28]
    50fe:	2200      	movs	r2, #0
    5100:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    5102:	2304      	movs	r3, #4
    5104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    5106:	e094      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecimal(divide_estimate))
    5108:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    510c:	f7ff ff74 	bl	4ff8 <sjsu::lpc40xx::uart::IsDecimal(float)>
    5110:	4603      	mov	r3, r0
    5112:	2b00      	cmp	r3, #0
    5114:	d00a      	beq.n	512c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    5116:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    511a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    511e:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    5122:	69fb      	ldr	r3, [r7, #28]
    5124:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    5126:	2304      	movs	r3, #4
    5128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    512a:	e082      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    512c:	2301      	movs	r3, #1
    512e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5130:	e07f      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    5132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5134:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    5138:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    513c:	f7ff fefa 	bl	4f34 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    5140:	eef0 7a40 	vmov.f32	s15, s0
    5144:	eeb0 0a67 	vmov.f32	s0, s15
    5148:	f7ff ff40 	bl	4fcc <sjsu::lpc40xx::uart::RoundFloat(float)>
    514c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(baud_rate_float, divide_estimate,
    5150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    5152:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    5156:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    515a:	f7ff ff11 	bl	4f80 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    515e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
                                     integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    5162:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5166:	ed9f 7a36 	vldr	s14, [pc, #216]	; 5240 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    516a:	eef4 7ac7 	vcmpe.f32	s15, s14
    516e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5172:	db0b      	blt.n	518c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    5174:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    5178:	ed9f 7a32 	vldr	s14, [pc, #200]	; 5244 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    517c:	eef4 7ac7 	vcmpe.f32	s15, s14
    5180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5184:	d802      	bhi.n	518c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    5186:	2303      	movs	r3, #3
    5188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    518a:	e052      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    518c:	2302      	movs	r3, #2
    518e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5190:	e04f      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    5192:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    5196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    519a:	ee77 7a87 	vadd.f32	s15, s15, s14
    519e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    51a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    51a6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    51aa:	eef4 7ac7 	vcmpe.f32	s15, s14
    51ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51b2:	dd02      	ble.n	51ba <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    51b4:	2304      	movs	r3, #4
    51b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    51b8:	e03b      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    51ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    51be:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    51c2:	eef4 7ac7 	vcmpe.f32	s15, s14
    51c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51ca:	dd0f      	ble.n	51ec <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    51cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    51d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    51d4:	ee77 7a87 	vadd.f32	s15, s15, s14
    51d8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    51dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    51e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    51e4:	ee77 7a87 	vadd.f32	s15, s15, s14
    51e8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    51ec:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    51f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    51f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
    51f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    51fc:	2301      	movs	r3, #1
    51fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    5200:	e017      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    5202:	69fc      	ldr	r4, [r7, #28]
    5204:	463b      	mov	r3, r7
    5206:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    520a:	4618      	mov	r0, r3
    520c:	f7ff fe22 	bl	4e54 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    5210:	463b      	mov	r3, r7
    5212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    521a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    521e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5222:	ee17 2a90 	vmov	r2, s15
    5226:	69fb      	ldr	r3, [r7, #28]
    5228:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    522a:	2304      	movs	r3, #4
    522c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    522e:	e000      	b.n	5232 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    5230:	bf00      	nop
  while (state != States::kDone)
    5232:	e73d      	b.n	50b0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    5234:	bf00      	nop
}
    5236:	69f8      	ldr	r0, [r7, #28]
    5238:	3744      	adds	r7, #68	; 0x44
    523a:	46bd      	mov	sp, r7
    523c:	bd90      	pop	{r4, r7, pc}
    523e:	bf00      	nop
    5240:	3f8ccccd 	.word	0x3f8ccccd
    5244:	3ff33333 	.word	0x3ff33333

00005248 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:
  };

  /// @param port - a reference to a constant lpc40xx::Uart::Port_t definition
  explicit constexpr Uart(const Port_t & port) : port_(port) {}

  Status Initialize(uint32_t baud_rate) const override
    5248:	b580      	push	{r7, lr}
    524a:	b09a      	sub	sp, #104	; 0x68
    524c:	af00      	add	r7, sp, #0
    524e:	60f8      	str	r0, [r7, #12]
    5250:	60b9      	str	r1, [r7, #8]
    5252:	607a      	str	r2, [r7, #4]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    5254:	2307      	movs	r3, #7
    5256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    525a:	f7fe fadf 	bl	381c <sjsu::SystemController::GetPlatformController()>
    525e:	4603      	mov	r3, r0
        port_.power_on_id);
    5260:	681a      	ldr	r2, [r3, #0]
    5262:	3210      	adds	r2, #16
    5264:	6812      	ldr	r2, [r2, #0]
    5266:	68b9      	ldr	r1, [r7, #8]
    5268:	6849      	ldr	r1, [r1, #4]
    sjsu::SystemController::GetPlatformController().PowerUpPeripheral(
    526a:	6849      	ldr	r1, [r1, #4]
    526c:	4618      	mov	r0, r3
    526e:	4790      	blx	r2

    SetBaudRate(baud_rate);
    5270:	6879      	ldr	r1, [r7, #4]
    5272:	68b8      	ldr	r0, [r7, #8]
    5274:	f000 f846 	bl	5304 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    5278:	68bb      	ldr	r3, [r7, #8]
    527a:	685b      	ldr	r3, [r3, #4]
    527c:	68db      	ldr	r3, [r3, #12]
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	3304      	adds	r3, #4
    5282:	681b      	ldr	r3, [r3, #0]
    5284:	68ba      	ldr	r2, [r7, #8]
    5286:	6852      	ldr	r2, [r2, #4]
    5288:	68d1      	ldr	r1, [r2, #12]
    528a:	68ba      	ldr	r2, [r7, #8]
    528c:	6852      	ldr	r2, [r2, #4]
    528e:	7c12      	ldrb	r2, [r2, #16]
    5290:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    5294:	b2d2      	uxtb	r2, r2
    5296:	f107 0014 	add.w	r0, r7, #20
    529a:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    529c:	68bb      	ldr	r3, [r7, #8]
    529e:	685b      	ldr	r3, [r3, #4]
    52a0:	689b      	ldr	r3, [r3, #8]
    52a2:	681b      	ldr	r3, [r3, #0]
    52a4:	3304      	adds	r3, #4
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	68ba      	ldr	r2, [r7, #8]
    52aa:	6852      	ldr	r2, [r2, #4]
    52ac:	6891      	ldr	r1, [r2, #8]
    52ae:	68ba      	ldr	r2, [r7, #8]
    52b0:	6852      	ldr	r2, [r2, #4]
    52b2:	7c12      	ldrb	r2, [r2, #16]
    52b4:	f3c2 0202 	ubfx	r2, r2, #0, #3
    52b8:	b2d2      	uxtb	r2, r2
    52ba:	f107 003c 	add.w	r0, r7, #60	; 0x3c
    52be:	4798      	blx	r3
    port_.rx.PullUp();
    52c0:	68bb      	ldr	r3, [r7, #8]
    52c2:	685b      	ldr	r3, [r3, #4]
    52c4:	68db      	ldr	r3, [r3, #12]
    52c6:	4618      	mov	r0, r3
    52c8:	f7ff fc58 	bl	4b7c <sjsu::Pin::PullUp() const>
    port_.tx.PullUp();
    52cc:	68bb      	ldr	r3, [r7, #8]
    52ce:	685b      	ldr	r3, [r3, #4]
    52d0:	689b      	ldr	r3, [r3, #8]
    52d2:	4618      	mov	r0, r3
    52d4:	f7ff fc52 	bl	4b7c <sjsu::Pin::PullUp() const>
    port_.registers->FCR |= kFIFOEnableAndReset;
    52d8:	68bb      	ldr	r3, [r7, #8]
    52da:	685b      	ldr	r3, [r3, #4]
    52dc:	681b      	ldr	r3, [r3, #0]
    52de:	7a1b      	ldrb	r3, [r3, #8]
    52e0:	b2da      	uxtb	r2, r3
    52e2:	68bb      	ldr	r3, [r7, #8]
    52e4:	685b      	ldr	r3, [r3, #4]
    52e6:	681b      	ldr	r3, [r3, #0]
    52e8:	f042 0207 	orr.w	r2, r2, #7
    52ec:	b2d2      	uxtb	r2, r2
    52ee:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    52f0:	4903      	ldr	r1, [pc, #12]	; (5300 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const+0xb8>)
    52f2:	68f8      	ldr	r0, [r7, #12]
    52f4:	f7fb fa10 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>
  }
    52f8:	68f8      	ldr	r0, [r7, #12]
    52fa:	3768      	adds	r7, #104	; 0x68
    52fc:	46bd      	mov	sp, r7
    52fe:	bd80      	pop	{r7, pc}
    5300:	00007134 	.word	0x00007134

00005304 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    5304:	b580      	push	{r7, lr}
    5306:	b088      	sub	sp, #32
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]
    530c:	6039      	str	r1, [r7, #0]
  {
    auto & system = sjsu::SystemController::GetPlatformController();
    530e:	f7fe fa85 	bl	381c <sjsu::SystemController::GetPlatformController()>
    5312:	61f8      	str	r0, [r7, #28]

    auto peripheral_frequency = system.GetClockRate(port_.power_on_id);
    5314:	69fb      	ldr	r3, [r7, #28]
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	3308      	adds	r3, #8
    531a:	681b      	ldr	r3, [r3, #0]
    531c:	687a      	ldr	r2, [r7, #4]
    531e:	6852      	ldr	r2, [r2, #4]
    5320:	6851      	ldr	r1, [r2, #4]
    5322:	69f8      	ldr	r0, [r7, #28]
    5324:	4798      	blx	r3
    5326:	4603      	mov	r3, r0
    5328:	617b      	str	r3, [r7, #20]

    uart::UartCalibration_t calibration =
        uart::GenerateUartCalibration(baud_rate, peripheral_frequency);
    532a:	f107 0308 	add.w	r3, r7, #8
    532e:	697a      	ldr	r2, [r7, #20]
    5330:	6839      	ldr	r1, [r7, #0]
    5332:	4618      	mov	r0, r3
    5334:	f7ff fe92 	bl	505c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    5338:	2380      	movs	r3, #128	; 0x80
    533a:	76fb      	strb	r3, [r7, #27]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    533c:	68bb      	ldr	r3, [r7, #8]
    533e:	0a1b      	lsrs	r3, r3, #8
    5340:	76bb      	strb	r3, [r7, #26]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    5342:	68bb      	ldr	r3, [r7, #8]
    5344:	767b      	strb	r3, [r7, #25]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5346:	693b      	ldr	r3, [r7, #16]
    5348:	b2db      	uxtb	r3, r3
    534a:	011b      	lsls	r3, r3, #4
    534c:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	b2db      	uxtb	r3, r3
    5352:	f003 030f 	and.w	r3, r3, #15
    5356:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    5358:	4313      	orrs	r3, r2
    535a:	763b      	strb	r3, [r7, #24]

    port_.registers->LCR = kDlabBit;
    535c:	687b      	ldr	r3, [r7, #4]
    535e:	685b      	ldr	r3, [r3, #4]
    5360:	681b      	ldr	r3, [r3, #0]
    5362:	2280      	movs	r2, #128	; 0x80
    5364:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	685b      	ldr	r3, [r3, #4]
    536a:	681b      	ldr	r3, [r3, #0]
    536c:	7eba      	ldrb	r2, [r7, #26]
    536e:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    5370:	687b      	ldr	r3, [r7, #4]
    5372:	685b      	ldr	r3, [r3, #4]
    5374:	681b      	ldr	r3, [r3, #0]
    5376:	7e7a      	ldrb	r2, [r7, #25]
    5378:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	685b      	ldr	r3, [r3, #4]
    537e:	681b      	ldr	r3, [r3, #0]
    5380:	7e3a      	ldrb	r2, [r7, #24]
    5382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	685b      	ldr	r3, [r3, #4]
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	2203      	movs	r2, #3
    538e:	731a      	strb	r2, [r3, #12]
    return true;
    5390:	2301      	movs	r3, #1
  }
    5392:	4618      	mov	r0, r3
    5394:	3720      	adds	r7, #32
    5396:	46bd      	mov	sp, r7
    5398:	bd80      	pop	{r7, pc}

0000539a <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>:

  void Write(const void * data, size_t size) const override
    539a:	b580      	push	{r7, lr}
    539c:	b086      	sub	sp, #24
    539e:	af00      	add	r7, sp, #0
    53a0:	60f8      	str	r0, [r7, #12]
    53a2:	60b9      	str	r1, [r7, #8]
    53a4:	607a      	str	r2, [r7, #4]
  {
    const uint8_t * data_buffer = reinterpret_cast<const uint8_t *>(data);
    53a6:	68bb      	ldr	r3, [r7, #8]
    53a8:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < size; i++)
    53aa:	2300      	movs	r3, #0
    53ac:	617b      	str	r3, [r7, #20]
    53ae:	697a      	ldr	r2, [r7, #20]
    53b0:	687b      	ldr	r3, [r7, #4]
    53b2:	429a      	cmp	r2, r3
    53b4:	d216      	bcs.n	53e4 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x4a>
    {
      port_.registers->THR = data_buffer[i];
    53b6:	693a      	ldr	r2, [r7, #16]
    53b8:	697b      	ldr	r3, [r7, #20]
    53ba:	441a      	add	r2, r3
    53bc:	68fb      	ldr	r3, [r7, #12]
    53be:	685b      	ldr	r3, [r3, #4]
    53c0:	681b      	ldr	r3, [r3, #0]
    53c2:	7812      	ldrb	r2, [r2, #0]
    53c4:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    53c6:	68f8      	ldr	r0, [r7, #12]
    53c8:	f000 f843 	bl	5452 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    53cc:	4603      	mov	r3, r0
    53ce:	f083 0301 	eor.w	r3, r3, #1
    53d2:	b2db      	uxtb	r3, r3
    53d4:	2b00      	cmp	r3, #0
    53d6:	d001      	beq.n	53dc <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x42>
      {
        continue;
    53d8:	bf00      	nop
      while (!TransmissionComplete())
    53da:	e7f4      	b.n	53c6 <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x2c>
    for (size_t i = 0; i < size; i++)
    53dc:	697b      	ldr	r3, [r7, #20]
    53de:	3301      	adds	r3, #1
    53e0:	617b      	str	r3, [r7, #20]
    53e2:	e7e4      	b.n	53ae <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const+0x14>
      }
    }
  }
    53e4:	bf00      	nop
    53e6:	3718      	adds	r7, #24
    53e8:	46bd      	mov	sp, r7
    53ea:	bd80      	pop	{r7, pc}

000053ec <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>:

  size_t Read(void * data, size_t size) const override
    53ec:	b580      	push	{r7, lr}
    53ee:	b086      	sub	sp, #24
    53f0:	af00      	add	r7, sp, #0
    53f2:	60f8      	str	r0, [r7, #12]
    53f4:	60b9      	str	r1, [r7, #8]
    53f6:	607a      	str	r2, [r7, #4]
  {
    uint8_t * data_buffer = reinterpret_cast<uint8_t *>(data);
    53f8:	68bb      	ldr	r3, [r7, #8]
    53fa:	613b      	str	r3, [r7, #16]
    size_t index          = 0;
    53fc:	2300      	movs	r3, #0
    53fe:	617b      	str	r3, [r7, #20]
    while (FifoHasData())
    5400:	68f8      	ldr	r0, [r7, #12]
    5402:	f000 f838 	bl	5476 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5406:	4603      	mov	r3, r0
    5408:	2b00      	cmp	r3, #0
    540a:	d011      	beq.n	5430 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x44>
    {
      if (index >= size)
    540c:	697a      	ldr	r2, [r7, #20]
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	429a      	cmp	r2, r3
    5412:	d20c      	bcs.n	542e <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x42>
      {
        break;
      }
      data_buffer[index++] = port_.registers->RBR;
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	685b      	ldr	r3, [r3, #4]
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	781b      	ldrb	r3, [r3, #0]
    541c:	b2d9      	uxtb	r1, r3
    541e:	697b      	ldr	r3, [r7, #20]
    5420:	1c5a      	adds	r2, r3, #1
    5422:	617a      	str	r2, [r7, #20]
    5424:	693a      	ldr	r2, [r7, #16]
    5426:	4413      	add	r3, r2
    5428:	460a      	mov	r2, r1
    542a:	701a      	strb	r2, [r3, #0]
    while (FifoHasData())
    542c:	e7e8      	b.n	5400 <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const+0x14>
        break;
    542e:	bf00      	nop
    }
    return index;
    5430:	697b      	ldr	r3, [r7, #20]
  }
    5432:	4618      	mov	r0, r3
    5434:	3718      	adds	r7, #24
    5436:	46bd      	mov	sp, r7
    5438:	bd80      	pop	{r7, pc}

0000543a <sjsu::lpc40xx::Uart::HasData() const>:

  bool HasData() const override
    543a:	b580      	push	{r7, lr}
    543c:	b082      	sub	sp, #8
    543e:	af00      	add	r7, sp, #0
    5440:	6078      	str	r0, [r7, #4]
  {
    return FifoHasData();
    5442:	6878      	ldr	r0, [r7, #4]
    5444:	f000 f817 	bl	5476 <sjsu::lpc40xx::Uart::FifoHasData() const>
    5448:	4603      	mov	r3, r0
  }
    544a:	4618      	mov	r0, r3
    544c:	3708      	adds	r7, #8
    544e:	46bd      	mov	sp, r7
    5450:	bd80      	pop	{r7, pc}

00005452 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  /// @return true if port is still sending the byte.
  bool TransmissionComplete() const
    5452:	b580      	push	{r7, lr}
    5454:	b082      	sub	sp, #8
    5456:	af00      	add	r7, sp, #0
    5458:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    545a:	687b      	ldr	r3, [r7, #4]
    545c:	685b      	ldr	r3, [r3, #4]
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	7d1b      	ldrb	r3, [r3, #20]
    5462:	b2db      	uxtb	r3, r3
    5464:	2105      	movs	r1, #5
    5466:	4618      	mov	r0, r3
    5468:	f000 fb30 	bl	5acc <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    546c:	4603      	mov	r3, r0
  }
    546e:	4618      	mov	r0, r3
    5470:	3708      	adds	r7, #8
    5472:	46bd      	mov	sp, r7
    5474:	bd80      	pop	{r7, pc}

00005476 <sjsu::lpc40xx::Uart::FifoHasData() const>:
  /// @return true if fifo contains receive data.
  bool FifoHasData() const
    5476:	b580      	push	{r7, lr}
    5478:	b082      	sub	sp, #8
    547a:	af00      	add	r7, sp, #0
    547c:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	685b      	ldr	r3, [r3, #4]
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	7d1b      	ldrb	r3, [r3, #20]
    5486:	b2db      	uxtb	r3, r3
    5488:	2100      	movs	r1, #0
    548a:	4618      	mov	r0, r3
    548c:	f000 fb1e 	bl	5acc <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    5490:	4603      	mov	r3, r0
  }
    5492:	4618      	mov	r0, r3
    5494:	3708      	adds	r7, #8
    5496:	46bd      	mov	sp, r7
    5498:	bd80      	pop	{r7, pc}
    549a:	Address 0x000000000000549a is out of bounds.


0000549c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::InterruptController<sjsu::lpc40xx::kNumberOfIrqs,
                                  __NVIC_PRIO_BITS>
    interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    549c:	b580      	push	{r7, lr}
    549e:	b082      	sub	sp, #8
    54a0:	af00      	add	r7, sp, #0
    54a2:	6078      	str	r0, [r7, #4]
    54a4:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    54a6:	683a      	ldr	r2, [r7, #0]
    54a8:	6879      	ldr	r1, [r7, #4]
    54aa:	4804      	ldr	r0, [pc, #16]	; (54bc <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    54ac:	f7ff ff75 	bl	539a <sjsu::lpc40xx::Uart::Write(void const*, unsigned int) const>
  return length;
    54b0:	683b      	ldr	r3, [r7, #0]
}
    54b2:	4618      	mov	r0, r3
    54b4:	3708      	adds	r7, #8
    54b6:	46bd      	mov	sp, r7
    54b8:	bd80      	pop	{r7, pc}
    54ba:	bf00      	nop
    54bc:	10000098 	.word	0x10000098

000054c0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    54c0:	b580      	push	{r7, lr}
    54c2:	b082      	sub	sp, #8
    54c4:	af00      	add	r7, sp, #0
    54c6:	6078      	str	r0, [r7, #4]
    54c8:	6039      	str	r1, [r7, #0]
  // Wait until data comes in
  while (!uart0.HasData())
    54ca:	480a      	ldr	r0, [pc, #40]	; (54f4 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    54cc:	f7ff ffb5 	bl	543a <sjsu::lpc40xx::Uart::HasData() const>
    54d0:	4603      	mov	r3, r0
    54d2:	f083 0301 	eor.w	r3, r3, #1
    54d6:	b2db      	uxtb	r3, r3
    54d8:	2b00      	cmp	r3, #0
    54da:	d001      	beq.n	54e0 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x20>
  {
    continue;
    54dc:	bf00      	nop
  while (!uart0.HasData())
    54de:	e7f4      	b.n	54ca <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0xa>
  }
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    54e0:	683a      	ldr	r2, [r7, #0]
    54e2:	6879      	ldr	r1, [r7, #4]
    54e4:	4803      	ldr	r0, [pc, #12]	; (54f4 <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x34>)
    54e6:	f7ff ff81 	bl	53ec <sjsu::lpc40xx::Uart::Read(void*, unsigned int) const>
  return length;
    54ea:	683b      	ldr	r3, [r7, #0]
}
    54ec:	4618      	mov	r0, r3
    54ee:	3708      	adds	r7, #8
    54f0:	46bd      	mov	sp, r7
    54f2:	bd80      	pop	{r7, pc}
    54f4:	10000098 	.word	0x10000098

000054f8 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    54f8:	b580      	push	{r7, lr}
    54fa:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    54fc:	4802      	ldr	r0, [pc, #8]	; (5508 <ThreadRuntimeCounter+0x10>)
    54fe:	f7fe f851 	bl	35a4 <sjsu::cortex::DwtCounter::GetCount()>
    5502:	4603      	mov	r3, r0
}
    5504:	4618      	mov	r0, r3
    5506:	bd80      	pop	{r7, pc}
    5508:	10000218 	.word	0x10000218

0000550c <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    550c:	b580      	push	{r7, lr}
    550e:	b094      	sub	sp, #80	; 0x50
    5510:	af02      	add	r7, sp, #8
  // Enable FPU (Floating Point Unit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    5512:	f7fe f857 	bl	35c4 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set the platform's interrupt controller.
  // This will be used by other libraries to enable and disable interrupts.
  sjsu::InterruptController::SetPlatformController(&interrupt_controller);
    5516:	4830      	ldr	r0, [pc, #192]	; (55d8 <sjsu::InitializePlatform()+0xcc>)
    5518:	f7fe f868 	bl	35ec <sjsu::InterruptController::SetPlatformController(sjsu::InterruptController*)>
  sjsu::SystemController::SetPlatformController(&system_controller);
    551c:	482f      	ldr	r0, [pc, #188]	; (55dc <sjsu::InitializePlatform()+0xd0>)
    551e:	f7fe f96d 	bl	37fc <sjsu::SystemController::SetPlatformController(sjsu::SystemController*)>

  // Initialize system controller and its clocks with the default configuration.
  system_controller.Initialize();
    5522:	482e      	ldr	r0, [pc, #184]	; (55dc <sjsu::InitializePlatform()+0xd0>)
    5524:	f7fe fdac 	bl	4080 <sjsu::lpc40xx::SystemController::Initialize()>

  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    5528:	f107 030c 	add.w	r3, r7, #12
    552c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
    5530:	492b      	ldr	r1, [pc, #172]	; (55e0 <sjsu::InitializePlatform()+0xd4>)
    5532:	4618      	mov	r0, r3
    5534:	f7ff fe88 	bl	5248 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    5538:	482a      	ldr	r0, [pc, #168]	; (55e4 <sjsu::InitializePlatform()+0xd8>)
    553a:	f001 f99d 	bl	6878 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    553e:	482a      	ldr	r0, [pc, #168]	; (55e8 <sjsu::InitializePlatform()+0xdc>)
    5540:	f001 f9aa 	bl	6898 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.Initialize();
    5544:	4829      	ldr	r0, [pc, #164]	; (55ec <sjsu::InitializePlatform()+0xe0>)
    5546:	f7fe fa45 	bl	39d4 <sjsu::cortex::SystemTimer::Initialize() const>
  system_timer.SetTickFrequency(config::kRtosFrequency);
    554a:	4b29      	ldr	r3, [pc, #164]	; (55f0 <sjsu::InitializePlatform()+0xe4>)
    554c:	6819      	ldr	r1, [r3, #0]
    554e:	4827      	ldr	r0, [pc, #156]	; (55ec <sjsu::InitializePlatform()+0xe0>)
    5550:	f7fe fb80 	bl	3c54 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    5554:	463b      	mov	r3, r7
    5556:	4925      	ldr	r1, [pc, #148]	; (55ec <sjsu::InitializePlatform()+0xe0>)
    5558:	4618      	mov	r0, r3
    555a:	f7fe faa3 	bl	3aa4 <sjsu::cortex::SystemTimer::StartTimer() const>

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    555e:	f107 0318 	add.w	r3, r7, #24
    5562:	4924      	ldr	r1, [pc, #144]	; (55f4 <sjsu::InitializePlatform()+0xe8>)
    5564:	4618      	mov	r0, r3
    5566:	f7fb f8d7 	bl	718 <sjsu::Status::Status(sjsu::Status_t const&)>
    556a:	f107 0218 	add.w	r2, r7, #24
    556e:	463b      	mov	r3, r7
    5570:	4611      	mov	r1, r2
    5572:	4618      	mov	r0, r3
    5574:	f7fe f920 	bl	37b8 <sjsu::operator==(sjsu::Status const&, sjsu::Status const&)>
    5578:	4603      	mov	r3, r0
    557a:	f083 0301 	eor.w	r3, r3, #1
    557e:	b2db      	uxtb	r3, r3
    5580:	2b00      	cmp	r3, #0
    5582:	d012      	beq.n	55aa <sjsu::InitializePlatform()+0x9e>
    5584:	f107 0028 	add.w	r0, r7, #40	; 0x28
    5588:	2300      	movs	r3, #0
    558a:	9300      	str	r3, [sp, #0]
    558c:	23c1      	movs	r3, #193	; 0xc1
    558e:	4a1a      	ldr	r2, [pc, #104]	; (55f8 <sjsu::InitializePlatform()+0xec>)
    5590:	491a      	ldr	r1, [pc, #104]	; (55fc <sjsu::InitializePlatform()+0xf0>)
    5592:	f7fa feed 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
    5596:	f107 0228 	add.w	r2, r7, #40	; 0x28
    559a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    559e:	4918      	ldr	r1, [pc, #96]	; (5600 <sjsu::InitializePlatform()+0xf4>)
    55a0:	4618      	mov	r0, r3
    55a2:	f7fc f9d3 	bl	194c <sjsu::LogError<>::LogError(char const*, std::experimental::fundamentals_v2::source_location const&)>
    55a6:	f7fc f9cd 	bl	1944 <sjsu::Halt()>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    55aa:	4816      	ldr	r0, [pc, #88]	; (5604 <sjsu::InitializePlatform()+0xf8>)
    55ac:	f7fd ffd8 	bl	3560 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    55b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
    55b4:	4914      	ldr	r1, [pc, #80]	; (5608 <sjsu::InitializePlatform()+0xfc>)
    55b6:	4618      	mov	r0, r3
    55b8:	f7fb fa80 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    55bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
    55c0:	4618      	mov	r0, r3
    55c2:	f7fe f90d 	bl	37e0 <sjsu::SetUptimeFunction(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>)>
    55c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
    55ca:	4618      	mov	r0, r3
    55cc:	f7fb f936 	bl	83c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
}
    55d0:	bf00      	nop
    55d2:	3748      	adds	r7, #72	; 0x48
    55d4:	46bd      	mov	sp, r7
    55d6:	bd80      	pop	{r7, pc}
    55d8:	100000b8 	.word	0x100000b8
    55dc:	1000007c 	.word	0x1000007c
    55e0:	10000098 	.word	0x10000098
    55e4:	0000549d 	.word	0x0000549d
    55e8:	000054c1 	.word	0x000054c1
    55ec:	100000a0 	.word	0x100000a0
    55f0:	00007dbc 	.word	0x00007dbc
    55f4:	00007134 	.word	0x00007134
    55f8:	00007bd8 	.word	0x00007bd8
    55fc:	00007bec 	.word	0x00007bec
    5600:	00007c34 	.word	0x00007c34
    5604:	10000218 	.word	0x10000218
    5608:	0000395d 	.word	0x0000395d

0000560c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator=(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
      operator=(const function& __x)
    560c:	b580      	push	{r7, lr}
    560e:	b086      	sub	sp, #24
    5610:	af00      	add	r7, sp, #0
    5612:	6078      	str	r0, [r7, #4]
    5614:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    5616:	f107 0308 	add.w	r3, r7, #8
    561a:	6839      	ldr	r1, [r7, #0]
    561c:	4618      	mov	r0, r3
    561e:	f000 fad3 	bl	5bc8 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>
    5622:	f107 0308 	add.w	r3, r7, #8
    5626:	6879      	ldr	r1, [r7, #4]
    5628:	4618      	mov	r0, r3
    562a:	f000 faef 	bl	5c0c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>
    562e:	f107 0308 	add.w	r3, r7, #8
    5632:	4618      	mov	r0, r3
    5634:	f7fb f902 	bl	83c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::~function()>
	return *this;
    5638:	687b      	ldr	r3, [r7, #4]
      }
    563a:	4618      	mov	r0, r3
    563c:	3718      	adds	r7, #24
    563e:	46bd      	mov	sp, r7
    5640:	bd80      	pop	{r7, pc}

00005642 <std::function<void ()>::function(decltype(nullptr))>:
      function(nullptr_t) noexcept
    5642:	b580      	push	{r7, lr}
    5644:	b082      	sub	sp, #8
    5646:	af00      	add	r7, sp, #0
    5648:	6078      	str	r0, [r7, #4]
    564a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	4618      	mov	r0, r3
    5650:	f7fa ff36 	bl	4c0 <std::_Function_base::_Function_base()>
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	4618      	mov	r0, r3
    5658:	3708      	adds	r7, #8
    565a:	46bd      	mov	sp, r7
    565c:	bd80      	pop	{r7, pc}

0000565e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
      operator""ms()
    565e:	b580      	push	{r7, lr}
    5660:	b082      	sub	sp, #8
    5662:	af00      	add	r7, sp, #0
    5664:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	4618      	mov	r0, r3
    566a:	f000 faf0 	bl	5c4e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    566e:	bf00      	nop
    5670:	6878      	ldr	r0, [r7, #4]
    5672:	3708      	adds	r7, #8
    5674:	46bd      	mov	sp, r7
    5676:	bd80      	pop	{r7, pc}

00005678 <std::function<void ()>::operator bool() const>:
      explicit operator bool() const noexcept
    5678:	b580      	push	{r7, lr}
    567a:	b082      	sub	sp, #8
    567c:	af00      	add	r7, sp, #0
    567e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	4618      	mov	r0, r3
    5684:	f7fa ff3d 	bl	502 <std::_Function_base::_M_empty() const>
    5688:	4603      	mov	r3, r0
    568a:	f083 0301 	eor.w	r3, r3, #1
    568e:	b2db      	uxtb	r3, r3
    5690:	4618      	mov	r0, r3
    5692:	3708      	adds	r7, #8
    5694:	46bd      	mov	sp, r7
    5696:	bd80      	pop	{r7, pc}

00005698 <std::function<void ()>::operator()() const>:
    function<_Res(_ArgTypes...)>::
    5698:	b580      	push	{r7, lr}
    569a:	b082      	sub	sp, #8
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
      if (_M_empty())
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	4618      	mov	r0, r3
    56a4:	f7fa ff2d 	bl	502 <std::_Function_base::_M_empty() const>
    56a8:	4603      	mov	r3, r0
    56aa:	2b00      	cmp	r3, #0
    56ac:	d001      	beq.n	56b2 <std::function<void ()>::operator()() const+0x1a>
	__throw_bad_function_call();
    56ae:	f001 f908 	bl	68c2 <std::__throw_bad_function_call()>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    56b2:	687b      	ldr	r3, [r7, #4]
    56b4:	68db      	ldr	r3, [r3, #12]
    56b6:	687a      	ldr	r2, [r7, #4]
    56b8:	4610      	mov	r0, r2
    56ba:	4798      	blx	r3
    56bc:	bf00      	nop
    }
    56be:	3708      	adds	r7, #8
    56c0:	46bd      	mov	sp, r7
    56c2:	bd80      	pop	{r7, pc}

000056c4 <unsigned long units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    56c4:	b580      	push	{r7, lr}
    56c6:	b082      	sub	sp, #8
    56c8:	af00      	add	r7, sp, #0
    56ca:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    56cc:	6878      	ldr	r0, [r7, #4]
    56ce:	f7fe faae 	bl	3c2e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    56d2:	4603      	mov	r3, r0
		}
    56d4:	4618      	mov	r0, r3
    56d6:	3708      	adds	r7, #8
    56d8:	46bd      	mov	sp, r7
    56da:	bd80      	pop	{r7, pc}

000056dc <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::operator"" ns<(char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      operator""ns()
    56dc:	b580      	push	{r7, lr}
    56de:	b082      	sub	sp, #8
    56e0:	af00      	add	r7, sp, #0
    56e2:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	4618      	mov	r0, r3
    56e8:	f000 fac6 	bl	5c78 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>
    56ec:	bf00      	nop
    56ee:	6878      	ldr	r0, [r7, #4]
    56f0:	3708      	adds	r7, #8
    56f2:	46bd      	mov	sp, r7
    56f4:	bd80      	pop	{r7, pc}

000056f6 <std::function<void ()>::operator=(std::function<void ()> const&)>:
      operator=(const function& __x)
    56f6:	b580      	push	{r7, lr}
    56f8:	b086      	sub	sp, #24
    56fa:	af00      	add	r7, sp, #0
    56fc:	6078      	str	r0, [r7, #4]
    56fe:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
    5700:	f107 0308 	add.w	r3, r7, #8
    5704:	6839      	ldr	r1, [r7, #0]
    5706:	4618      	mov	r0, r3
    5708:	f000 f9fc 	bl	5b04 <std::function<void ()>::function(std::function<void ()> const&)>
    570c:	f107 0308 	add.w	r3, r7, #8
    5710:	6879      	ldr	r1, [r7, #4]
    5712:	4618      	mov	r0, r3
    5714:	f000 fac8 	bl	5ca8 <std::function<void ()>::swap(std::function<void ()>&)>
    5718:	f107 0308 	add.w	r3, r7, #8
    571c:	4618      	mov	r0, r3
    571e:	f7fe f889 	bl	3834 <std::function<void ()>::~function()>
	return *this;
    5722:	687b      	ldr	r3, [r7, #4]
      }
    5724:	4618      	mov	r0, r3
    5726:	3718      	adds	r7, #24
    5728:	46bd      	mov	sp, r7
    572a:	bd80      	pop	{r7, pc}

0000572c <std::function<void ()>::function<void (*)(), void, void>(void (*)())>:
      function<_Res(_ArgTypes...)>::
    572c:	b590      	push	{r4, r7, lr}
    572e:	b083      	sub	sp, #12
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
    5734:	6039      	str	r1, [r7, #0]
      : _Function_base()
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	4618      	mov	r0, r3
    573a:	f7fa fec1 	bl	4c0 <std::_Function_base::_Function_base()>
	if (_My_handler::_M_not_empty_function(__f))
    573e:	683b      	ldr	r3, [r7, #0]
    5740:	4618      	mov	r0, r3
    5742:	f000 fad2 	bl	5cea <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>
    5746:	4603      	mov	r3, r0
    5748:	2b00      	cmp	r3, #0
    574a:	d00f      	beq.n	576c <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    574c:	687c      	ldr	r4, [r7, #4]
    574e:	463b      	mov	r3, r7
    5750:	4618      	mov	r0, r3
    5752:	f000 fada 	bl	5d0a <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    5756:	4603      	mov	r3, r0
    5758:	4619      	mov	r1, r3
    575a:	4620      	mov	r0, r4
    575c:	f000 fae0 	bl	5d20 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>
	    _M_invoker = &_My_handler::_M_invoke;
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	4a05      	ldr	r2, [pc, #20]	; (5778 <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x4c>)
    5764:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
    5766:	687b      	ldr	r3, [r7, #4]
    5768:	4a04      	ldr	r2, [pc, #16]	; (577c <std::function<void ()>::function<void (*)(), void, void>(void (*)())+0x50>)
    576a:	609a      	str	r2, [r3, #8]
      }
    576c:	687b      	ldr	r3, [r7, #4]
    576e:	4618      	mov	r0, r3
    5770:	370c      	adds	r7, #12
    5772:	46bd      	mov	sp, r7
    5774:	bd90      	pop	{r4, r7, pc}
    5776:	bf00      	nop
    5778:	00005d45 	.word	0x00005d45
    577c:	00005d61 	.word	0x00005d61

00005780 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    5780:	b580      	push	{r7, lr}
    5782:	b084      	sub	sp, #16
    5784:	af00      	add	r7, sp, #0
    5786:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	4618      	mov	r0, r3
    578c:	f7fc fb42 	bl	1e14 <units::linear_scale<float>::operator()() const>
    5790:	eef0 7a40 	vmov.f32	s15, s0
    5794:	edc7 7a03 	vstr	s15, [r7, #12]
    5798:	f107 030c 	add.w	r3, r7, #12
    579c:	4618      	mov	r0, r3
    579e:	f000 fb0a 	bl	5db6 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    57a2:	eef0 7a40 	vmov.f32	s15, s0
    57a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    57aa:	ee17 3a90 	vmov	r3, s15
		}
    57ae:	4618      	mov	r0, r3
    57b0:	3710      	adds	r7, #16
    57b2:	46bd      	mov	sp, r7
    57b4:	bd80      	pop	{r7, pc}

000057b6 <sjsu::bit::Register<unsigned long>::Register(unsigned long volatile*)>:
  explicit constexpr Register(volatile T * reg) : reg_(reg), value_(*reg) {}
    57b6:	b480      	push	{r7}
    57b8:	b083      	sub	sp, #12
    57ba:	af00      	add	r7, sp, #0
    57bc:	6078      	str	r0, [r7, #4]
    57be:	6039      	str	r1, [r7, #0]
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	683a      	ldr	r2, [r7, #0]
    57c4:	601a      	str	r2, [r3, #0]
    57c6:	683b      	ldr	r3, [r7, #0]
    57c8:	681a      	ldr	r2, [r3, #0]
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	605a      	str	r2, [r3, #4]
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	4618      	mov	r0, r3
    57d2:	370c      	adds	r7, #12
    57d4:	46bd      	mov	sp, r7
    57d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    57da:	4770      	bx	lr

000057dc <sjsu::bit::Register<unsigned long>::Insert(unsigned long, sjsu::bit::Mask)>:
  constexpr Register & Insert(T value, Mask bitmask)
    57dc:	b580      	push	{r7, lr}
    57de:	b084      	sub	sp, #16
    57e0:	af00      	add	r7, sp, #0
    57e2:	60f8      	str	r0, [r7, #12]
    57e4:	60b9      	str	r1, [r7, #8]
    57e6:	4639      	mov	r1, r7
    57e8:	e881 000c 	stmia.w	r1, {r2, r3}
    value_ = sjsu::bit::Insert<T>(value_, static_cast<T>(value), bitmask);
    57ec:	68fb      	ldr	r3, [r7, #12]
    57ee:	6858      	ldr	r0, [r3, #4]
    57f0:	463b      	mov	r3, r7
    57f2:	cb0c      	ldmia	r3, {r2, r3}
    57f4:	68b9      	ldr	r1, [r7, #8]
    57f6:	f000 f90e 	bl	5a16 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    57fa:	4602      	mov	r2, r0
    57fc:	68fb      	ldr	r3, [r7, #12]
    57fe:	605a      	str	r2, [r3, #4]
    return *this;
    5800:	68fb      	ldr	r3, [r7, #12]
  }
    5802:	4618      	mov	r0, r3
    5804:	3710      	adds	r7, #16
    5806:	46bd      	mov	sp, r7
    5808:	bd80      	pop	{r7, pc}

0000580a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    580a:	b580      	push	{r7, lr}
    580c:	b082      	sub	sp, #8
    580e:	af00      	add	r7, sp, #0
    5810:	6078      	str	r0, [r7, #4]
    5812:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    5814:	683b      	ldr	r3, [r7, #0]
    5816:	4618      	mov	r0, r3
    5818:	f000 fadb 	bl	5dd2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    581c:	eef0 7a40 	vmov.f32	s15, s0
    5820:	687b      	ldr	r3, [r7, #4]
    5822:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    5826:	687b      	ldr	r3, [r7, #4]
		}
    5828:	4618      	mov	r0, r3
    582a:	3708      	adds	r7, #8
    582c:	46bd      	mov	sp, r7
    582e:	bd80      	pop	{r7, pc}

00005830 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    5830:	b580      	push	{r7, lr}
    5832:	b084      	sub	sp, #16
    5834:	af00      	add	r7, sp, #0
    5836:	6078      	str	r0, [r7, #4]
    5838:	460b      	mov	r3, r1
    583a:	70fb      	strb	r3, [r7, #3]
		return UnitTypeLhs(lhs() / rhs);
    583c:	687b      	ldr	r3, [r7, #4]
    583e:	4618      	mov	r0, r3
    5840:	f7fc fae8 	bl	1e14 <units::linear_scale<float>::operator()() const>
    5844:	eef0 6a40 	vmov.f32	s13, s0
    5848:	78fb      	ldrb	r3, [r7, #3]
    584a:	ee07 3a90 	vmov	s15, r3
    584e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    5856:	f107 030c 	add.w	r3, r7, #12
    585a:	eeb0 0a47 	vmov.f32	s0, s14
    585e:	4618      	mov	r0, r3
    5860:	f7fd ff5b 	bl	371a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    5864:	68fb      	ldr	r3, [r7, #12]
	}
    5866:	4618      	mov	r0, r3
    5868:	3710      	adds	r7, #16
    586a:	46bd      	mov	sp, r7
    586c:	bd80      	pop	{r7, pc}

0000586e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    586e:	b580      	push	{r7, lr}
    5870:	b084      	sub	sp, #16
    5872:	af00      	add	r7, sp, #0
    5874:	6078      	str	r0, [r7, #4]
    5876:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    5878:	687b      	ldr	r3, [r7, #4]
    587a:	4618      	mov	r0, r3
    587c:	f7fc faca 	bl	1e14 <units::linear_scale<float>::operator()() const>
    5880:	eef0 6a40 	vmov.f32	s13, s0
    5884:	683b      	ldr	r3, [r7, #0]
    5886:	ee07 3a90 	vmov	s15, r3
    588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    588e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    5892:	f107 030c 	add.w	r3, r7, #12
    5896:	eeb0 0a47 	vmov.f32	s0, s14
    589a:	4618      	mov	r0, r3
    589c:	f7fd ff3d 	bl	371a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    58a0:	68fb      	ldr	r3, [r7, #12]
	}
    58a2:	4618      	mov	r0, r3
    58a4:	3710      	adds	r7, #16
    58a6:	46bd      	mov	sp, r7
    58a8:	bd80      	pop	{r7, pc}

000058aa <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    58aa:	b580      	push	{r7, lr}
    58ac:	ed2d 8b02 	vpush	{d8}
    58b0:	b082      	sub	sp, #8
    58b2:	af00      	add	r7, sp, #0
    58b4:	6078      	str	r0, [r7, #4]
    58b6:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	ed93 8a00 	vldr	s16, [r3]
    58be:	683b      	ldr	r3, [r7, #0]
    58c0:	4618      	mov	r0, r3
    58c2:	f000 fa86 	bl	5dd2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    58c6:	eef0 7a40 	vmov.f32	s15, s0
    58ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
    58ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    58d2:	bf4c      	ite	mi
    58d4:	2301      	movmi	r3, #1
    58d6:	2300      	movpl	r3, #0
    58d8:	b2db      	uxtb	r3, r3
		}
    58da:	4618      	mov	r0, r3
    58dc:	3708      	adds	r7, #8
    58de:	46bd      	mov	sp, r7
    58e0:	ecbd 8b02 	vpop	{d8}
    58e4:	bd80      	pop	{r7, pc}

000058e6 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator>=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    58e6:	b580      	push	{r7, lr}
    58e8:	ed2d 8b02 	vpush	{d8}
    58ec:	b082      	sub	sp, #8
    58ee:	af00      	add	r7, sp, #0
    58f0:	6078      	str	r0, [r7, #4]
    58f2:	6039      	str	r1, [r7, #0]
			return (nls::m_value >= units::convert<UnitsRhs, Units>(rhs.m_value));
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	ed93 8a00 	vldr	s16, [r3]
    58fa:	683b      	ldr	r3, [r7, #0]
    58fc:	4618      	mov	r0, r3
    58fe:	f000 fa68 	bl	5dd2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    5902:	eef0 7a40 	vmov.f32	s15, s0
    5906:	eeb4 8ae7 	vcmpe.f32	s16, s15
    590a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    590e:	bfac      	ite	ge
    5910:	2301      	movge	r3, #1
    5912:	2300      	movlt	r3, #0
    5914:	b2db      	uxtb	r3, r3
		}
    5916:	4618      	mov	r0, r3
    5918:	3708      	adds	r7, #8
    591a:	46bd      	mov	sp, r7
    591c:	ecbd 8b02 	vpop	{d8}
    5920:	bd80      	pop	{r7, pc}

00005922 <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5922:	b580      	push	{r7, lr}
    5924:	b084      	sub	sp, #16
    5926:	af00      	add	r7, sp, #0
    5928:	60f8      	str	r0, [r7, #12]
    592a:	60b9      	str	r1, [r7, #8]
    592c:	4639      	mov	r1, r7
    592e:	e881 000c 	stmia.w	r1, {r2, r3}
  return Insert(target, value, bitmask.position, bitmask.width);
    5932:	683a      	ldr	r2, [r7, #0]
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	68b9      	ldr	r1, [r7, #8]
    5938:	68f8      	ldr	r0, [r7, #12]
    593a:	f000 fa58 	bl	5dee <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>
    593e:	4603      	mov	r3, r0
}
    5940:	4618      	mov	r0, r3
    5942:	3710      	adds	r7, #16
    5944:	46bd      	mov	sp, r7
    5946:	bd80      	pop	{r7, pc}

00005948 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned char, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned char)>:
		inline constexpr UnitTypeLhs operator*(const UnitTypeLhs& lhs, T rhs) noexcept
    5948:	b580      	push	{r7, lr}
    594a:	b084      	sub	sp, #16
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
    5950:	460b      	mov	r3, r1
    5952:	70fb      	strb	r3, [r7, #3]
		return UnitTypeLhs(lhs() * rhs);
    5954:	687b      	ldr	r3, [r7, #4]
    5956:	4618      	mov	r0, r3
    5958:	f7fc fa5c 	bl	1e14 <units::linear_scale<float>::operator()() const>
    595c:	eeb0 7a40 	vmov.f32	s14, s0
    5960:	78fb      	ldrb	r3, [r7, #3]
    5962:	ee07 3a90 	vmov	s15, r3
    5966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    596a:	ee67 7a27 	vmul.f32	s15, s14, s15
    596e:	f107 030c 	add.w	r3, r7, #12
    5972:	eeb0 0a67 	vmov.f32	s0, s15
    5976:	4618      	mov	r0, r3
    5978:	f7fd fe80 	bl	367c <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    597c:	68fb      	ldr	r3, [r7, #12]
	}
    597e:	4618      	mov	r0, r3
    5980:	3710      	adds	r7, #16
    5982:	46bd      	mov	sp, r7
    5984:	bd80      	pop	{r7, pc}

00005986 <std::initializer_list<int>::size() const>:
      size() const noexcept { return _M_len; }
    5986:	b480      	push	{r7}
    5988:	b083      	sub	sp, #12
    598a:	af00      	add	r7, sp, #0
    598c:	6078      	str	r0, [r7, #4]
    598e:	687b      	ldr	r3, [r7, #4]
    5990:	685b      	ldr	r3, [r3, #4]
    5992:	4618      	mov	r0, r3
    5994:	370c      	adds	r7, #12
    5996:	46bd      	mov	sp, r7
    5998:	f85d 7b04 	ldr.w	r7, [sp], #4
    599c:	4770      	bx	lr

0000599e <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator*<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
		inline constexpr UnitTypeLhs operator*(const UnitTypeLhs& lhs, T rhs) noexcept
    599e:	b580      	push	{r7, lr}
    59a0:	b084      	sub	sp, #16
    59a2:	af00      	add	r7, sp, #0
    59a4:	6078      	str	r0, [r7, #4]
    59a6:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() * rhs);
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	4618      	mov	r0, r3
    59ac:	f7fc fa32 	bl	1e14 <units::linear_scale<float>::operator()() const>
    59b0:	eeb0 7a40 	vmov.f32	s14, s0
    59b4:	683b      	ldr	r3, [r7, #0]
    59b6:	ee07 3a90 	vmov	s15, r3
    59ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    59be:	ee67 7a27 	vmul.f32	s15, s14, s15
    59c2:	f107 030c 	add.w	r3, r7, #12
    59c6:	eeb0 0a67 	vmov.f32	s0, s15
    59ca:	4618      	mov	r0, r3
    59cc:	f7fd fea5 	bl	371a <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    59d0:	68fb      	ldr	r3, [r7, #12]
	}
    59d2:	4618      	mov	r0, r3
    59d4:	3710      	adds	r7, #16
    59d6:	46bd      	mov	sp, r7
    59d8:	bd80      	pop	{r7, pc}

000059da <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    59da:	b580      	push	{r7, lr}
    59dc:	ed2d 8b02 	vpush	{d8}
    59e0:	b082      	sub	sp, #8
    59e2:	af00      	add	r7, sp, #0
    59e4:	6078      	str	r0, [r7, #4]
    59e6:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	ed93 8a00 	vldr	s16, [r3]
    59ee:	683b      	ldr	r3, [r7, #0]
    59f0:	4618      	mov	r0, r3
    59f2:	f000 f9ee 	bl	5dd2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    59f6:	eef0 7a40 	vmov.f32	s15, s0
    59fa:	eeb4 8ae7 	vcmpe.f32	s16, s15
    59fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a02:	bf94      	ite	ls
    5a04:	2301      	movls	r3, #1
    5a06:	2300      	movhi	r3, #0
    5a08:	b2db      	uxtb	r3, r3
		}
    5a0a:	4618      	mov	r0, r3
    5a0c:	3708      	adds	r7, #8
    5a0e:	46bd      	mov	sp, r7
    5a10:	ecbd 8b02 	vpop	{d8}
    5a14:	bd80      	pop	{r7, pc}

00005a16 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5a16:	b580      	push	{r7, lr}
    5a18:	b084      	sub	sp, #16
    5a1a:	af00      	add	r7, sp, #0
    5a1c:	60f8      	str	r0, [r7, #12]
    5a1e:	60b9      	str	r1, [r7, #8]
    5a20:	4639      	mov	r1, r7
    5a22:	e881 000c 	stmia.w	r1, {r2, r3}
  return Insert(target, value, bitmask.position, bitmask.width);
    5a26:	683a      	ldr	r2, [r7, #0]
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	68b9      	ldr	r1, [r7, #8]
    5a2c:	68f8      	ldr	r0, [r7, #12]
    5a2e:	f000 fa0a 	bl	5e46 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    5a32:	4603      	mov	r3, r0
}
    5a34:	4618      	mov	r0, r3
    5a36:	3710      	adds	r7, #16
    5a38:	46bd      	mov	sp, r7
    5a3a:	bd80      	pop	{r7, pc}

00005a3c <bool sjsu::bit::Read<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr bool Read(T target, Mask bitmask)
    5a3c:	b580      	push	{r7, lr}
    5a3e:	b084      	sub	sp, #16
    5a40:	af00      	add	r7, sp, #0
    5a42:	60f8      	str	r0, [r7, #12]
    5a44:	1d3b      	adds	r3, r7, #4
    5a46:	e883 0006 	stmia.w	r3, {r1, r2}
  return Read(target, bitmask.position);
    5a4a:	687b      	ldr	r3, [r7, #4]
    5a4c:	4619      	mov	r1, r3
    5a4e:	68f8      	ldr	r0, [r7, #12]
    5a50:	f000 fa25 	bl	5e9e <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    5a54:	4603      	mov	r3, r0
}
    5a56:	4618      	mov	r0, r3
    5a58:	3710      	adds	r7, #16
    5a5a:	46bd      	mov	sp, r7
    5a5c:	bd80      	pop	{r7, pc}

00005a5e <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Clear(T target, Mask bitmask)
    5a5e:	b580      	push	{r7, lr}
    5a60:	b084      	sub	sp, #16
    5a62:	af00      	add	r7, sp, #0
    5a64:	60f8      	str	r0, [r7, #12]
    5a66:	1d3b      	adds	r3, r7, #4
    5a68:	e883 0006 	stmia.w	r3, {r1, r2}
  return Clear(target, bitmask.position);
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	4619      	mov	r1, r3
    5a70:	68f8      	ldr	r0, [r7, #12]
    5a72:	f000 fa2e 	bl	5ed2 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    5a76:	4603      	mov	r3, r0
}
    5a78:	4618      	mov	r0, r3
    5a7a:	3710      	adds	r7, #16
    5a7c:	46bd      	mov	sp, r7
    5a7e:	bd80      	pop	{r7, pc}

00005a80 <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Set(T target, Mask bitmask)
    5a80:	b580      	push	{r7, lr}
    5a82:	b084      	sub	sp, #16
    5a84:	af00      	add	r7, sp, #0
    5a86:	60f8      	str	r0, [r7, #12]
    5a88:	1d3b      	adds	r3, r7, #4
    5a8a:	e883 0006 	stmia.w	r3, {r1, r2}
  return Set(target, bitmask.position);
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	4619      	mov	r1, r3
    5a92:	68f8      	ldr	r0, [r7, #12]
    5a94:	f000 fa33 	bl	5efe <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    5a98:	4603      	mov	r3, r0
}
    5a9a:	4618      	mov	r0, r3
    5a9c:	3710      	adds	r7, #16
    5a9e:	46bd      	mov	sp, r7
    5aa0:	bd80      	pop	{r7, pc}

00005aa2 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    5aa2:	b580      	push	{r7, lr}
    5aa4:	b084      	sub	sp, #16
    5aa6:	af00      	add	r7, sp, #0
    5aa8:	60f8      	str	r0, [r7, #12]
    5aaa:	4608      	mov	r0, r1
    5aac:	4639      	mov	r1, r7
    5aae:	e881 000c 	stmia.w	r1, {r2, r3}
    5ab2:	4603      	mov	r3, r0
    5ab4:	72fb      	strb	r3, [r7, #11]
  return Insert(target, value, bitmask.position, bitmask.width);
    5ab6:	683a      	ldr	r2, [r7, #0]
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	7af9      	ldrb	r1, [r7, #11]
    5abc:	68f8      	ldr	r0, [r7, #12]
    5abe:	f000 fa33 	bl	5f28 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    5ac2:	4603      	mov	r3, r0
}
    5ac4:	4618      	mov	r0, r3
    5ac6:	3710      	adds	r7, #16
    5ac8:	46bd      	mov	sp, r7
    5aca:	bd80      	pop	{r7, pc}

00005acc <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    5acc:	b480      	push	{r7}
    5ace:	b085      	sub	sp, #20
    5ad0:	af00      	add	r7, sp, #0
    5ad2:	4603      	mov	r3, r0
    5ad4:	6039      	str	r1, [r7, #0]
    5ad6:	71fb      	strb	r3, [r7, #7]
  T mask = static_cast<T>(1);
    5ad8:	2301      	movs	r3, #1
    5ada:	73fb      	strb	r3, [r7, #15]
  mask   = static_cast<T>(mask << position);
    5adc:	7bfa      	ldrb	r2, [r7, #15]
    5ade:	683b      	ldr	r3, [r7, #0]
    5ae0:	fa02 f303 	lsl.w	r3, r2, r3
    5ae4:	73fb      	strb	r3, [r7, #15]
  return static_cast<bool>(target & mask);
    5ae6:	79fa      	ldrb	r2, [r7, #7]
    5ae8:	7bfb      	ldrb	r3, [r7, #15]
    5aea:	4013      	ands	r3, r2
    5aec:	b2db      	uxtb	r3, r3
    5aee:	2b00      	cmp	r3, #0
    5af0:	bf14      	ite	ne
    5af2:	2301      	movne	r3, #1
    5af4:	2300      	moveq	r3, #0
    5af6:	b2db      	uxtb	r3, r3
}
    5af8:	4618      	mov	r0, r3
    5afa:	3714      	adds	r7, #20
    5afc:	46bd      	mov	sp, r7
    5afe:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b02:	4770      	bx	lr

00005b04 <std::function<void ()>::function(std::function<void ()> const&)>:
    function<_Res(_ArgTypes...)>::
    5b04:	b580      	push	{r7, lr}
    5b06:	b082      	sub	sp, #8
    5b08:	af00      	add	r7, sp, #0
    5b0a:	6078      	str	r0, [r7, #4]
    5b0c:	6039      	str	r1, [r7, #0]
    : _Function_base()
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	4618      	mov	r0, r3
    5b12:	f7fa fcd5 	bl	4c0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    5b16:	6838      	ldr	r0, [r7, #0]
    5b18:	f7ff fdae 	bl	5678 <std::function<void ()>::operator bool() const>
    5b1c:	4603      	mov	r3, r0
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d00d      	beq.n	5b3e <std::function<void ()>::function(std::function<void ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    5b22:	683b      	ldr	r3, [r7, #0]
    5b24:	689b      	ldr	r3, [r3, #8]
    5b26:	6878      	ldr	r0, [r7, #4]
    5b28:	6839      	ldr	r1, [r7, #0]
    5b2a:	2202      	movs	r2, #2
    5b2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    5b2e:	683b      	ldr	r3, [r7, #0]
    5b30:	68da      	ldr	r2, [r3, #12]
    5b32:	687b      	ldr	r3, [r7, #4]
    5b34:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    5b36:	683b      	ldr	r3, [r7, #0]
    5b38:	689a      	ldr	r2, [r3, #8]
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	609a      	str	r2, [r3, #8]
    }
    5b3e:	687b      	ldr	r3, [r7, #4]
    5b40:	4618      	mov	r0, r3
    5b42:	3708      	adds	r7, #8
    5b44:	46bd      	mov	sp, r7
    5b46:	bd80      	pop	{r7, pc}

00005b48 <std::array<std::function<void ()>, 59u>::array()>:
    5b48:	b5b0      	push	{r4, r5, r7, lr}
    5b4a:	b082      	sub	sp, #8
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
    5b50:	687b      	ldr	r3, [r7, #4]
    5b52:	243a      	movs	r4, #58	; 0x3a
    5b54:	461d      	mov	r5, r3
    5b56:	2c00      	cmp	r4, #0
    5b58:	db05      	blt.n	5b66 <std::array<std::function<void ()>, 59u>::array()+0x1e>
    5b5a:	4628      	mov	r0, r5
    5b5c:	f000 fa1d 	bl	5f9a <std::function<void ()>::function()>
    5b60:	3510      	adds	r5, #16
    5b62:	3c01      	subs	r4, #1
    5b64:	e7f7      	b.n	5b56 <std::array<std::function<void ()>, 59u>::array()+0xe>
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	4618      	mov	r0, r3
    5b6a:	3708      	adds	r7, #8
    5b6c:	46bd      	mov	sp, r7
    5b6e:	bdb0      	pop	{r4, r5, r7, pc}

00005b70 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()>:

  /// This must be put into the interrupt vector table for all of the interrupts
  /// this lookup handler will work for in ROM at compile time.
  /// @note This must not be executed directly, only by the processor when an
  ///       interrupt occurs.
  static void LookupHandler()
    5b70:	b580      	push	{r7, lr}
    5b72:	b086      	sub	sp, #24
    5b74:	af00      	add	r7, sp, #0
  {
    int active_interrupt     = (scb->ICSR & 0xFF);
    5b76:	4b11      	ldr	r3, [pc, #68]	; (5bbc <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x4c>)
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	685b      	ldr	r3, [r3, #4]
    5b7c:	b2db      	uxtb	r3, r3
    5b7e:	617b      	str	r3, [r7, #20]
    current_vector           = IndexToIRQ(active_interrupt);
    5b80:	6978      	ldr	r0, [r7, #20]
    5b82:	f000 f9fe 	bl	5f82 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>
    5b86:	4603      	mov	r3, r0
    5b88:	4a0d      	ldr	r2, [pc, #52]	; (5bc0 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x50>)
    5b8a:	6013      	str	r3, [r2, #0]
    InterruptHandler handler = table[active_interrupt];
    5b8c:	697b      	ldr	r3, [r7, #20]
    5b8e:	4619      	mov	r1, r3
    5b90:	480c      	ldr	r0, [pc, #48]	; (5bc4 <sjsu::cortex::InterruptController<43u, 5ul>::LookupHandler()+0x54>)
    5b92:	f000 fa0f 	bl	5fb4 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    5b96:	4602      	mov	r2, r0
    5b98:	1d3b      	adds	r3, r7, #4
    5b9a:	4611      	mov	r1, r2
    5b9c:	4618      	mov	r0, r3
    5b9e:	f7ff ffb1 	bl	5b04 <std::function<void ()>::function(std::function<void ()> const&)>
    handler();
    5ba2:	1d3b      	adds	r3, r7, #4
    5ba4:	4618      	mov	r0, r3
    5ba6:	f7ff fd77 	bl	5698 <std::function<void ()>::operator()() const>
    InterruptHandler handler = table[active_interrupt];
    5baa:	1d3b      	adds	r3, r7, #4
    5bac:	4618      	mov	r0, r3
    5bae:	f7fd fe41 	bl	3834 <std::function<void ()>::~function()>
  }
    5bb2:	bf00      	nop
    5bb4:	3718      	adds	r7, #24
    5bb6:	46bd      	mov	sp, r7
    5bb8:	bd80      	pop	{r7, pc}
    5bba:	bf00      	nop
    5bbc:	100000ac 	.word	0x100000ac
    5bc0:	100000b4 	.word	0x100000b4
    5bc4:	1000021c 	.word	0x1000021c

00005bc8 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)>:
    function<_Res(_ArgTypes...)>::
    5bc8:	b580      	push	{r7, lr}
    5bca:	b082      	sub	sp, #8
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	6039      	str	r1, [r7, #0]
    : _Function_base()
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	4618      	mov	r0, r3
    5bd6:	f7fa fc73 	bl	4c0 <std::_Function_base::_Function_base()>
      if (static_cast<bool>(__x))
    5bda:	6838      	ldr	r0, [r7, #0]
    5bdc:	f000 f9f9 	bl	5fd2 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>
    5be0:	4603      	mov	r3, r0
    5be2:	2b00      	cmp	r3, #0
    5be4:	d00d      	beq.n	5c02 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()> const&)+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    5be6:	683b      	ldr	r3, [r7, #0]
    5be8:	689b      	ldr	r3, [r3, #8]
    5bea:	6878      	ldr	r0, [r7, #4]
    5bec:	6839      	ldr	r1, [r7, #0]
    5bee:	2202      	movs	r2, #2
    5bf0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
    5bf2:	683b      	ldr	r3, [r7, #0]
    5bf4:	68da      	ldr	r2, [r3, #12]
    5bf6:	687b      	ldr	r3, [r7, #4]
    5bf8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
    5bfa:	683b      	ldr	r3, [r7, #0]
    5bfc:	689a      	ldr	r2, [r3, #8]
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	609a      	str	r2, [r3, #8]
    }
    5c02:	687b      	ldr	r3, [r7, #4]
    5c04:	4618      	mov	r0, r3
    5c06:	3708      	adds	r7, #8
    5c08:	46bd      	mov	sp, r7
    5c0a:	bd80      	pop	{r7, pc}

00005c0c <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::swap(std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>&)>:
      void swap(function& __x) noexcept
    5c0c:	b580      	push	{r7, lr}
    5c0e:	b082      	sub	sp, #8
    5c10:	af00      	add	r7, sp, #0
    5c12:	6078      	str	r0, [r7, #4]
    5c14:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	683a      	ldr	r2, [r7, #0]
    5c1a:	4611      	mov	r1, r2
    5c1c:	4618      	mov	r0, r3
    5c1e:	f000 f9f3 	bl	6008 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    5c22:	687b      	ldr	r3, [r7, #4]
    5c24:	f103 0208 	add.w	r2, r3, #8
    5c28:	683b      	ldr	r3, [r7, #0]
    5c2a:	3308      	adds	r3, #8
    5c2c:	4619      	mov	r1, r3
    5c2e:	4610      	mov	r0, r2
    5c30:	f000 fa1c 	bl	606c <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	f103 020c 	add.w	r2, r3, #12
    5c3a:	683b      	ldr	r3, [r7, #0]
    5c3c:	330c      	adds	r3, #12
    5c3e:	4619      	mov	r1, r3
    5c40:	4610      	mov	r0, r2
    5c42:	f000 fa3d 	bl	60c0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
      }
    5c46:	bf00      	nop
    5c48:	3708      	adds	r7, #8
    5c4a:	46bd      	mov	sp, r7
    5c4c:	bd80      	pop	{r7, pc}

00005c4e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    5c4e:	b580      	push	{r7, lr}
    5c50:	b084      	sub	sp, #16
    5c52:	af00      	add	r7, sp, #0
    5c54:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5c56:	f04f 0201 	mov.w	r2, #1
    5c5a:	f04f 0300 	mov.w	r3, #0
    5c5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5c62:	f107 0308 	add.w	r3, r7, #8
    5c66:	4619      	mov	r1, r3
    5c68:	6878      	ldr	r0, [r7, #4]
    5c6a:	f7fb fd02 	bl	1672 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    5c6e:	6878      	ldr	r0, [r7, #4]
    5c70:	3710      	adds	r7, #16
    5c72:	46bd      	mov	sp, r7
    5c74:	bd80      	pop	{r7, pc}
    5c76:	Address 0x0000000000005c76 is out of bounds.


00005c78 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()>:
      constexpr _Dur __check_overflow()
    5c78:	b580      	push	{r7, lr}
    5c7a:	b084      	sub	sp, #16
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
    5c80:	a307      	add	r3, pc, #28	; (adr r3, 5ca0 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >, (char)49, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48, (char)39, (char)48, (char)48, (char)48>()+0x28>)
    5c82:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
    5c8a:	f107 0308 	add.w	r3, r7, #8
    5c8e:	4619      	mov	r1, r3
    5c90:	6878      	ldr	r0, [r7, #4]
    5c92:	f7fa fc7d 	bl	590 <std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> >::duration<long long, void>(long long const&)>
      }
    5c96:	6878      	ldr	r0, [r7, #4]
    5c98:	3710      	adds	r7, #16
    5c9a:	46bd      	mov	sp, r7
    5c9c:	bd80      	pop	{r7, pc}
    5c9e:	bf00      	nop
    5ca0:	3b9aca00 	.word	0x3b9aca00
    5ca4:	00000000 	.word	0x00000000

00005ca8 <std::function<void ()>::swap(std::function<void ()>&)>:
      void swap(function& __x) noexcept
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	683a      	ldr	r2, [r7, #0]
    5cb6:	4611      	mov	r1, r2
    5cb8:	4618      	mov	r0, r3
    5cba:	f000 f9a5 	bl	6008 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>
	std::swap(_M_manager, __x._M_manager);
    5cbe:	687b      	ldr	r3, [r7, #4]
    5cc0:	f103 0208 	add.w	r2, r3, #8
    5cc4:	683b      	ldr	r3, [r7, #0]
    5cc6:	3308      	adds	r3, #8
    5cc8:	4619      	mov	r1, r3
    5cca:	4610      	mov	r0, r2
    5ccc:	f000 f9ce 	bl	606c <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
	std::swap(_M_invoker, __x._M_invoker);
    5cd0:	687b      	ldr	r3, [r7, #4]
    5cd2:	f103 020c 	add.w	r2, r3, #12
    5cd6:	683b      	ldr	r3, [r7, #0]
    5cd8:	330c      	adds	r3, #12
    5cda:	4619      	mov	r1, r3
    5cdc:	4610      	mov	r0, r2
    5cde:	f000 fa19 	bl	6114 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>
      }
    5ce2:	bf00      	nop
    5ce4:	3708      	adds	r7, #8
    5ce6:	46bd      	mov	sp, r7
    5ce8:	bd80      	pop	{r7, pc}

00005cea <bool std::_Function_base::_Base_manager<void (*)()>::_M_not_empty_function<void ()>(void (*)())>:
	  _M_not_empty_function(_Tp* __fp)
    5cea:	b480      	push	{r7}
    5cec:	b083      	sub	sp, #12
    5cee:	af00      	add	r7, sp, #0
    5cf0:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
    5cf2:	687b      	ldr	r3, [r7, #4]
    5cf4:	2b00      	cmp	r3, #0
    5cf6:	bf14      	ite	ne
    5cf8:	2301      	movne	r3, #1
    5cfa:	2300      	moveq	r3, #0
    5cfc:	b2db      	uxtb	r3, r3
    5cfe:	4618      	mov	r0, r3
    5d00:	370c      	adds	r7, #12
    5d02:	46bd      	mov	sp, r7
    5d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d08:	4770      	bx	lr

00005d0a <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>:
    move(_Tp&& __t) noexcept
    5d0a:	b480      	push	{r7}
    5d0c:	b083      	sub	sp, #12
    5d0e:	af00      	add	r7, sp, #0
    5d10:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	4618      	mov	r0, r3
    5d16:	370c      	adds	r7, #12
    5d18:	46bd      	mov	sp, r7
    5d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d1e:	4770      	bx	lr

00005d20 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)())>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    5d20:	b590      	push	{r4, r7, lr}
    5d22:	b085      	sub	sp, #20
    5d24:	af00      	add	r7, sp, #0
    5d26:	6078      	str	r0, [r7, #4]
    5d28:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    5d2a:	6838      	ldr	r0, [r7, #0]
    5d2c:	f7ff ffed 	bl	5d0a <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    5d30:	4603      	mov	r3, r0
    5d32:	4622      	mov	r2, r4
    5d34:	4619      	mov	r1, r3
    5d36:	6878      	ldr	r0, [r7, #4]
    5d38:	f000 fa0b 	bl	6152 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>
    5d3c:	bf00      	nop
    5d3e:	3714      	adds	r7, #20
    5d40:	46bd      	mov	sp, r7
    5d42:	bd90      	pop	{r4, r7, pc}

00005d44 <std::_Function_handler<void (), void (*)()>::_M_invoke(std::_Any_data const&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    5d44:	b580      	push	{r7, lr}
    5d46:	b082      	sub	sp, #8
    5d48:	af00      	add	r7, sp, #0
    5d4a:	6078      	str	r0, [r7, #4]
	(*_Base::_M_get_pointer(__functor))(
    5d4c:	6878      	ldr	r0, [r7, #4]
    5d4e:	f000 fa19 	bl	6184 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    5d52:	4603      	mov	r3, r0
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	4798      	blx	r3
      }
    5d58:	bf00      	nop
    5d5a:	3708      	adds	r7, #8
    5d5c:	46bd      	mov	sp, r7
    5d5e:	bd80      	pop	{r7, pc}

00005d60 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    5d60:	b5b0      	push	{r4, r5, r7, lr}
    5d62:	b086      	sub	sp, #24
    5d64:	af00      	add	r7, sp, #0
    5d66:	60f8      	str	r0, [r7, #12]
    5d68:	60b9      	str	r1, [r7, #8]
    5d6a:	4613      	mov	r3, r2
    5d6c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
    5d6e:	79fb      	ldrb	r3, [r7, #7]
    5d70:	2b03      	cmp	r3, #3
    5d72:	d016      	beq.n	5da2 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x42>
    5d74:	2b03      	cmp	r3, #3
    5d76:	dc19      	bgt.n	5dac <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
    5d78:	2b01      	cmp	r3, #1
    5d7a:	d002      	beq.n	5d82 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x22>
    5d7c:	2b02      	cmp	r3, #2
    5d7e:	d00a      	beq.n	5d96 <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x36>
    5d80:	e014      	b.n	5dac <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    5d82:	68b8      	ldr	r0, [r7, #8]
    5d84:	f000 f9fe 	bl	6184 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>
    5d88:	4604      	mov	r4, r0
    5d8a:	68f8      	ldr	r0, [r7, #12]
    5d8c:	f000 fa0a 	bl	61a4 <void (**&std::_Any_data::_M_access<void (**)()>())()>
    5d90:	4603      	mov	r3, r0
    5d92:	601c      	str	r4, [r3, #0]
	      break;
    5d94:	e00a      	b.n	5dac <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
    5d96:	462a      	mov	r2, r5
    5d98:	68b9      	ldr	r1, [r7, #8]
    5d9a:	68f8      	ldr	r0, [r7, #12]
    5d9c:	f000 fa0e 	bl	61bc <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>
	      break;
    5da0:	e004      	b.n	5dac <std::_Function_base::_Base_manager<void (*)()>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x4c>
	      _M_destroy(__dest, _Local_storage());
    5da2:	4621      	mov	r1, r4
    5da4:	68f8      	ldr	r0, [r7, #12]
    5da6:	f000 fa22 	bl	61ee <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>
	      break;
    5daa:	bf00      	nop
	  return false;
    5dac:	2300      	movs	r3, #0
	}
    5dae:	4618      	mov	r0, r3
    5db0:	3718      	adds	r7, #24
    5db2:	46bd      	mov	sp, r7
    5db4:	bdb0      	pop	{r4, r5, r7, pc}

00005db6 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5db6:	b580      	push	{r7, lr}
    5db8:	b086      	sub	sp, #24
    5dba:	af00      	add	r7, sp, #0
    5dbc:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5dbe:	6878      	ldr	r0, [r7, #4]
    5dc0:	f000 fa21 	bl	6206 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5dc4:	eef0 7a40 	vmov.f32	s15, s0
	}
    5dc8:	eeb0 0a67 	vmov.f32	s0, s15
    5dcc:	3718      	adds	r7, #24
    5dce:	46bd      	mov	sp, r7
    5dd0:	bd80      	pop	{r7, pc}

00005dd2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    5dd2:	b580      	push	{r7, lr}
    5dd4:	b086      	sub	sp, #24
    5dd6:	af00      	add	r7, sp, #0
    5dd8:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    5dda:	6878      	ldr	r0, [r7, #4]
    5ddc:	f000 fa26 	bl	622c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    5de0:	eef0 7a40 	vmov.f32	s15, s0
	}
    5de4:	eeb0 0a67 	vmov.f32	s0, s15
    5de8:	3718      	adds	r7, #24
    5dea:	46bd      	mov	sp, r7
    5dec:	bd80      	pop	{r7, pc}

00005dee <unsigned long sjsu::bit::Insert<unsigned long, int>(unsigned long, int, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    5dee:	b480      	push	{r7}
    5df0:	b089      	sub	sp, #36	; 0x24
    5df2:	af00      	add	r7, sp, #0
    5df4:	60f8      	str	r0, [r7, #12]
    5df6:	60b9      	str	r1, [r7, #8]
    5df8:	607a      	str	r2, [r7, #4]
    5dfa:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    5dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e00:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    5e02:	2320      	movs	r3, #32
    5e04:	61bb      	str	r3, [r7, #24]
      static_cast<UnsignedT>(kFieldOfOnes >> (kTargetWidth - width));
    5e06:	683b      	ldr	r3, [r7, #0]
    5e08:	f1c3 0320 	rsb	r3, r3, #32
  UnsignedT mask =
    5e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e10:	fa22 f303 	lsr.w	r3, r2, r3
    5e14:	617b      	str	r3, [r7, #20]
  target = static_cast<UnsignedT>(target & ~(mask << position));
    5e16:	697a      	ldr	r2, [r7, #20]
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	fa02 f303 	lsl.w	r3, r2, r3
    5e1e:	43db      	mvns	r3, r3
    5e20:	68fa      	ldr	r2, [r7, #12]
    5e22:	4013      	ands	r3, r2
    5e24:	60fb      	str	r3, [r7, #12]
  target = static_cast<UnsignedT>(target | (value & mask) << position);
    5e26:	68ba      	ldr	r2, [r7, #8]
    5e28:	697b      	ldr	r3, [r7, #20]
    5e2a:	401a      	ands	r2, r3
    5e2c:	687b      	ldr	r3, [r7, #4]
    5e2e:	fa02 f303 	lsl.w	r3, r2, r3
    5e32:	68fa      	ldr	r2, [r7, #12]
    5e34:	4313      	orrs	r3, r2
    5e36:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    5e38:	68fb      	ldr	r3, [r7, #12]
}
    5e3a:	4618      	mov	r0, r3
    5e3c:	3724      	adds	r7, #36	; 0x24
    5e3e:	46bd      	mov	sp, r7
    5e40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e44:	4770      	bx	lr

00005e46 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    5e46:	b480      	push	{r7}
    5e48:	b089      	sub	sp, #36	; 0x24
    5e4a:	af00      	add	r7, sp, #0
    5e4c:	60f8      	str	r0, [r7, #12]
    5e4e:	60b9      	str	r1, [r7, #8]
    5e50:	607a      	str	r2, [r7, #4]
    5e52:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    5e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e58:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    5e5a:	2320      	movs	r3, #32
    5e5c:	61bb      	str	r3, [r7, #24]
      static_cast<UnsignedT>(kFieldOfOnes >> (kTargetWidth - width));
    5e5e:	683b      	ldr	r3, [r7, #0]
    5e60:	f1c3 0320 	rsb	r3, r3, #32
  UnsignedT mask =
    5e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5e68:	fa22 f303 	lsr.w	r3, r2, r3
    5e6c:	617b      	str	r3, [r7, #20]
  target = static_cast<UnsignedT>(target & ~(mask << position));
    5e6e:	697a      	ldr	r2, [r7, #20]
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	fa02 f303 	lsl.w	r3, r2, r3
    5e76:	43db      	mvns	r3, r3
    5e78:	68fa      	ldr	r2, [r7, #12]
    5e7a:	4013      	ands	r3, r2
    5e7c:	60fb      	str	r3, [r7, #12]
  target = static_cast<UnsignedT>(target | (value & mask) << position);
    5e7e:	68ba      	ldr	r2, [r7, #8]
    5e80:	697b      	ldr	r3, [r7, #20]
    5e82:	401a      	ands	r2, r3
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	fa02 f303 	lsl.w	r3, r2, r3
    5e8a:	68fa      	ldr	r2, [r7, #12]
    5e8c:	4313      	orrs	r3, r2
    5e8e:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    5e90:	68fb      	ldr	r3, [r7, #12]
}
    5e92:	4618      	mov	r0, r3
    5e94:	3724      	adds	r7, #36	; 0x24
    5e96:	46bd      	mov	sp, r7
    5e98:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e9c:	4770      	bx	lr

00005e9e <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    5e9e:	b480      	push	{r7}
    5ea0:	b085      	sub	sp, #20
    5ea2:	af00      	add	r7, sp, #0
    5ea4:	6078      	str	r0, [r7, #4]
    5ea6:	6039      	str	r1, [r7, #0]
  T mask = static_cast<T>(1);
    5ea8:	2301      	movs	r3, #1
    5eaa:	60fb      	str	r3, [r7, #12]
  mask   = static_cast<T>(mask << position);
    5eac:	68fa      	ldr	r2, [r7, #12]
    5eae:	683b      	ldr	r3, [r7, #0]
    5eb0:	fa02 f303 	lsl.w	r3, r2, r3
    5eb4:	60fb      	str	r3, [r7, #12]
  return static_cast<bool>(target & mask);
    5eb6:	687a      	ldr	r2, [r7, #4]
    5eb8:	68fb      	ldr	r3, [r7, #12]
    5eba:	4013      	ands	r3, r2
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	bf14      	ite	ne
    5ec0:	2301      	movne	r3, #1
    5ec2:	2300      	moveq	r3, #0
    5ec4:	b2db      	uxtb	r3, r3
}
    5ec6:	4618      	mov	r0, r3
    5ec8:	3714      	adds	r7, #20
    5eca:	46bd      	mov	sp, r7
    5ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ed0:	4770      	bx	lr

00005ed2 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    5ed2:	b480      	push	{r7}
    5ed4:	b085      	sub	sp, #20
    5ed6:	af00      	add	r7, sp, #0
    5ed8:	6078      	str	r0, [r7, #4]
    5eda:	6039      	str	r1, [r7, #0]
  T mask = static_cast<T>(1);
    5edc:	2301      	movs	r3, #1
    5ede:	60fb      	str	r3, [r7, #12]
  mask   = static_cast<T>(mask << position);
    5ee0:	68fa      	ldr	r2, [r7, #12]
    5ee2:	683b      	ldr	r3, [r7, #0]
    5ee4:	fa02 f303 	lsl.w	r3, r2, r3
    5ee8:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target & ~mask);
    5eea:	68fb      	ldr	r3, [r7, #12]
    5eec:	43da      	mvns	r2, r3
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	4013      	ands	r3, r2
}
    5ef2:	4618      	mov	r0, r3
    5ef4:	3714      	adds	r7, #20
    5ef6:	46bd      	mov	sp, r7
    5ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5efc:	4770      	bx	lr

00005efe <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    5efe:	b480      	push	{r7}
    5f00:	b085      	sub	sp, #20
    5f02:	af00      	add	r7, sp, #0
    5f04:	6078      	str	r0, [r7, #4]
    5f06:	6039      	str	r1, [r7, #0]
  T mask = static_cast<T>(1);
    5f08:	2301      	movs	r3, #1
    5f0a:	60fb      	str	r3, [r7, #12]
  mask   = static_cast<T>(mask << position);
    5f0c:	68fa      	ldr	r2, [r7, #12]
    5f0e:	683b      	ldr	r3, [r7, #0]
    5f10:	fa02 f303 	lsl.w	r3, r2, r3
    5f14:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target | mask);
    5f16:	687a      	ldr	r2, [r7, #4]
    5f18:	68fb      	ldr	r3, [r7, #12]
    5f1a:	4313      	orrs	r3, r2
}
    5f1c:	4618      	mov	r0, r3
    5f1e:	3714      	adds	r7, #20
    5f20:	46bd      	mov	sp, r7
    5f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f26:	4770      	bx	lr

00005f28 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    5f28:	b480      	push	{r7}
    5f2a:	b089      	sub	sp, #36	; 0x24
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	60f8      	str	r0, [r7, #12]
    5f30:	607a      	str	r2, [r7, #4]
    5f32:	603b      	str	r3, [r7, #0]
    5f34:	460b      	mov	r3, r1
    5f36:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    5f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f3c:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    5f3e:	2320      	movs	r3, #32
    5f40:	61bb      	str	r3, [r7, #24]
      static_cast<UnsignedT>(kFieldOfOnes >> (kTargetWidth - width));
    5f42:	683b      	ldr	r3, [r7, #0]
    5f44:	f1c3 0320 	rsb	r3, r3, #32
  UnsignedT mask =
    5f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5f4c:	fa22 f303 	lsr.w	r3, r2, r3
    5f50:	617b      	str	r3, [r7, #20]
  target = static_cast<UnsignedT>(target & ~(mask << position));
    5f52:	697a      	ldr	r2, [r7, #20]
    5f54:	687b      	ldr	r3, [r7, #4]
    5f56:	fa02 f303 	lsl.w	r3, r2, r3
    5f5a:	43db      	mvns	r3, r3
    5f5c:	68fa      	ldr	r2, [r7, #12]
    5f5e:	4013      	ands	r3, r2
    5f60:	60fb      	str	r3, [r7, #12]
  target = static_cast<UnsignedT>(target | (value & mask) << position);
    5f62:	7afa      	ldrb	r2, [r7, #11]
    5f64:	697b      	ldr	r3, [r7, #20]
    5f66:	401a      	ands	r2, r3
    5f68:	687b      	ldr	r3, [r7, #4]
    5f6a:	fa02 f303 	lsl.w	r3, r2, r3
    5f6e:	68fa      	ldr	r2, [r7, #12]
    5f70:	4313      	orrs	r3, r2
    5f72:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    5f74:	68fb      	ldr	r3, [r7, #12]
}
    5f76:	4618      	mov	r0, r3
    5f78:	3724      	adds	r7, #36	; 0x24
    5f7a:	46bd      	mov	sp, r7
    5f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f80:	4770      	bx	lr

00005f82 <sjsu::cortex::InterruptController<43u, 5ul>::IndexToIRQ(int)>:
  static int IndexToIRQ(int index)
    5f82:	b480      	push	{r7}
    5f84:	b083      	sub	sp, #12
    5f86:	af00      	add	r7, sp, #0
    5f88:	6078      	str	r0, [r7, #4]
    return index - kArmExceptionOffset;
    5f8a:	687b      	ldr	r3, [r7, #4]
    5f8c:	3b10      	subs	r3, #16
  }
    5f8e:	4618      	mov	r0, r3
    5f90:	370c      	adds	r7, #12
    5f92:	46bd      	mov	sp, r7
    5f94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f98:	4770      	bx	lr

00005f9a <std::function<void ()>::function()>:
      function() noexcept
    5f9a:	b580      	push	{r7, lr}
    5f9c:	b082      	sub	sp, #8
    5f9e:	af00      	add	r7, sp, #0
    5fa0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	4618      	mov	r0, r3
    5fa6:	f7fa fa8b 	bl	4c0 <std::_Function_base::_Function_base()>
    5faa:	687b      	ldr	r3, [r7, #4]
    5fac:	4618      	mov	r0, r3
    5fae:	3708      	adds	r7, #8
    5fb0:	46bd      	mov	sp, r7
    5fb2:	bd80      	pop	{r7, pc}

00005fb4 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>:
      operator[](size_type __n) noexcept
    5fb4:	b580      	push	{r7, lr}
    5fb6:	b082      	sub	sp, #8
    5fb8:	af00      	add	r7, sp, #0
    5fba:	6078      	str	r0, [r7, #4]
    5fbc:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	6839      	ldr	r1, [r7, #0]
    5fc2:	4618      	mov	r0, r3
    5fc4:	f000 f94a 	bl	625c <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>
    5fc8:	4603      	mov	r3, r0
    5fca:	4618      	mov	r0, r3
    5fcc:	3708      	adds	r7, #8
    5fce:	46bd      	mov	sp, r7
    5fd0:	bd80      	pop	{r7, pc}

00005fd2 <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::operator bool() const>:
      explicit operator bool() const noexcept
    5fd2:	b580      	push	{r7, lr}
    5fd4:	b082      	sub	sp, #8
    5fd6:	af00      	add	r7, sp, #0
    5fd8:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
    5fda:	687b      	ldr	r3, [r7, #4]
    5fdc:	4618      	mov	r0, r3
    5fde:	f7fa fa90 	bl	502 <std::_Function_base::_M_empty() const>
    5fe2:	4603      	mov	r3, r0
    5fe4:	f083 0301 	eor.w	r3, r3, #1
    5fe8:	b2db      	uxtb	r3, r3
    5fea:	4618      	mov	r0, r3
    5fec:	3708      	adds	r7, #8
    5fee:	46bd      	mov	sp, r7
    5ff0:	bd80      	pop	{r7, pc}

00005ff2 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>:
    move(_Tp&& __t) noexcept
    5ff2:	b480      	push	{r7}
    5ff4:	b083      	sub	sp, #12
    5ff6:	af00      	add	r7, sp, #0
    5ff8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	4618      	mov	r0, r3
    5ffe:	370c      	adds	r7, #12
    6000:	46bd      	mov	sp, r7
    6002:	f85d 7b04 	ldr.w	r7, [sp], #4
    6006:	4770      	bx	lr

00006008 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::_Any_data> >, std::is_move_constructible<std::_Any_data>, std::is_move_assignable<std::_Any_data> >::value, void>::type std::swap<std::_Any_data>(std::_Any_data&, std::_Any_data&)>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    6008:	b580      	push	{r7, lr}
    600a:	b084      	sub	sp, #16
    600c:	af00      	add	r7, sp, #0
    600e:	6078      	str	r0, [r7, #4]
    6010:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
    6012:	6878      	ldr	r0, [r7, #4]
    6014:	f7ff ffed 	bl	5ff2 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    6018:	4602      	mov	r2, r0
    601a:	f107 0308 	add.w	r3, r7, #8
    601e:	e892 0003 	ldmia.w	r2, {r0, r1}
    6022:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
    6026:	6838      	ldr	r0, [r7, #0]
    6028:	f7ff ffe3 	bl	5ff2 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    602c:	4602      	mov	r2, r0
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	e892 0003 	ldmia.w	r2, {r0, r1}
    6034:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
    6038:	f107 0308 	add.w	r3, r7, #8
    603c:	4618      	mov	r0, r3
    603e:	f7ff ffd8 	bl	5ff2 <std::remove_reference<std::_Any_data&>::type&& std::move<std::_Any_data&>(std::_Any_data&)>
    6042:	4602      	mov	r2, r0
    6044:	683b      	ldr	r3, [r7, #0]
    6046:	e892 0003 	ldmia.w	r2, {r0, r1}
    604a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
    604e:	bf00      	nop
    6050:	3710      	adds	r7, #16
    6052:	46bd      	mov	sp, r7
    6054:	bd80      	pop	{r7, pc}

00006056 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    move(_Tp&& __t) noexcept
    6056:	b480      	push	{r7}
    6058:	b083      	sub	sp, #12
    605a:	af00      	add	r7, sp, #0
    605c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    605e:	687b      	ldr	r3, [r7, #4]
    6060:	4618      	mov	r0, r3
    6062:	370c      	adds	r7, #12
    6064:	46bd      	mov	sp, r7
    6066:	f85d 7b04 	ldr.w	r7, [sp], #4
    606a:	4770      	bx	lr

0000606c <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >, std::is_move_constructible<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>, std::is_move_assignable<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)> >::value, void>::type std::swap<bool (*)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation), bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>:
    swap(_Tp& __a, _Tp& __b)
    606c:	b580      	push	{r7, lr}
    606e:	b084      	sub	sp, #16
    6070:	af00      	add	r7, sp, #0
    6072:	6078      	str	r0, [r7, #4]
    6074:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    6076:	6878      	ldr	r0, [r7, #4]
    6078:	f7ff ffed 	bl	6056 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    607c:	4603      	mov	r3, r0
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    6082:	6838      	ldr	r0, [r7, #0]
    6084:	f7ff ffe7 	bl	6056 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    6088:	4603      	mov	r3, r0
    608a:	681a      	ldr	r2, [r3, #0]
    608c:	687b      	ldr	r3, [r7, #4]
    608e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    6090:	f107 030c 	add.w	r3, r7, #12
    6094:	4618      	mov	r0, r3
    6096:	f7ff ffde 	bl	6056 <std::remove_reference<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>::type&& std::move<bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>(bool (*&)(std::_Any_data&, std::_Any_data const&, std::_Manager_operation))>
    609a:	4603      	mov	r3, r0
    609c:	681a      	ldr	r2, [r3, #0]
    609e:	683b      	ldr	r3, [r7, #0]
    60a0:	601a      	str	r2, [r3, #0]
    }
    60a2:	bf00      	nop
    60a4:	3710      	adds	r7, #16
    60a6:	46bd      	mov	sp, r7
    60a8:	bd80      	pop	{r7, pc}

000060aa <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    60aa:	b480      	push	{r7}
    60ac:	b083      	sub	sp, #12
    60ae:	af00      	add	r7, sp, #0
    60b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	4618      	mov	r0, r3
    60b6:	370c      	adds	r7, #12
    60b8:	46bd      	mov	sp, r7
    60ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    60be:	4770      	bx	lr

000060c0 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >, std::is_move_constructible<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>, std::is_move_assignable<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)> >::value, void>::type std::swap<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&), std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    60c0:	b580      	push	{r7, lr}
    60c2:	b084      	sub	sp, #16
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
    60c8:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    60ca:	6878      	ldr	r0, [r7, #4]
    60cc:	f7ff ffed 	bl	60aa <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    60d0:	4603      	mov	r3, r0
    60d2:	681b      	ldr	r3, [r3, #0]
    60d4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    60d6:	6838      	ldr	r0, [r7, #0]
    60d8:	f7ff ffe7 	bl	60aa <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    60dc:	4603      	mov	r3, r0
    60de:	681a      	ldr	r2, [r3, #0]
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    60e4:	f107 030c 	add.w	r3, r7, #12
    60e8:	4618      	mov	r0, r3
    60ea:	f7ff ffde 	bl	60aa <std::remove_reference<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>::type&& std::move<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&)>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*&)(std::_Any_data const&))>
    60ee:	4603      	mov	r3, r0
    60f0:	681a      	ldr	r2, [r3, #0]
    60f2:	683b      	ldr	r3, [r7, #0]
    60f4:	601a      	str	r2, [r3, #0]
    }
    60f6:	bf00      	nop
    60f8:	3710      	adds	r7, #16
    60fa:	46bd      	mov	sp, r7
    60fc:	bd80      	pop	{r7, pc}

000060fe <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>:
    move(_Tp&& __t) noexcept
    60fe:	b480      	push	{r7}
    6100:	b083      	sub	sp, #12
    6102:	af00      	add	r7, sp, #0
    6104:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	4618      	mov	r0, r3
    610a:	370c      	adds	r7, #12
    610c:	46bd      	mov	sp, r7
    610e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6112:	4770      	bx	lr

00006114 <std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<void (*)(std::_Any_data const&)> >, std::is_move_constructible<void (*)(std::_Any_data const&)>, std::is_move_assignable<void (*)(std::_Any_data const&)> >::value, void>::type std::swap<void (*)(std::_Any_data const&)>(void (*&)(std::_Any_data const&), void (*&)(std::_Any_data const&))>:
    swap(_Tp& __a, _Tp& __b)
    6114:	b580      	push	{r7, lr}
    6116:	b084      	sub	sp, #16
    6118:	af00      	add	r7, sp, #0
    611a:	6078      	str	r0, [r7, #4]
    611c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    611e:	6878      	ldr	r0, [r7, #4]
    6120:	f7ff ffed 	bl	60fe <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    6124:	4603      	mov	r3, r0
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
    612a:	6838      	ldr	r0, [r7, #0]
    612c:	f7ff ffe7 	bl	60fe <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    6130:	4603      	mov	r3, r0
    6132:	681a      	ldr	r2, [r3, #0]
    6134:	687b      	ldr	r3, [r7, #4]
    6136:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
    6138:	f107 030c 	add.w	r3, r7, #12
    613c:	4618      	mov	r0, r3
    613e:	f7ff ffde 	bl	60fe <std::remove_reference<void (*&)(std::_Any_data const&)>::type&& std::move<void (*&)(std::_Any_data const&)>(void (*&)(std::_Any_data const&))>
    6142:	4603      	mov	r3, r0
    6144:	681a      	ldr	r2, [r3, #0]
    6146:	683b      	ldr	r3, [r7, #0]
    6148:	601a      	str	r2, [r3, #0]
    }
    614a:	bf00      	nop
    614c:	3710      	adds	r7, #16
    614e:	46bd      	mov	sp, r7
    6150:	bd80      	pop	{r7, pc}

00006152 <std::_Function_base::_Base_manager<void (*)()>::_M_init_functor(std::_Any_data&, void (*&&)(), std::integral_constant<bool, true>)>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    6152:	b590      	push	{r4, r7, lr}
    6154:	b085      	sub	sp, #20
    6156:	af00      	add	r7, sp, #0
    6158:	60f8      	str	r0, [r7, #12]
    615a:	60b9      	str	r1, [r7, #8]
    615c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
    615e:	68b8      	ldr	r0, [r7, #8]
    6160:	f7ff fdd3 	bl	5d0a <std::remove_reference<void (*&)()>::type&& std::move<void (*&)()>(void (*&)())>
    6164:	4603      	mov	r3, r0
    6166:	681c      	ldr	r4, [r3, #0]
    6168:	68f8      	ldr	r0, [r7, #12]
    616a:	f7fa f993 	bl	494 <std::_Any_data::_M_access()>
    616e:	4603      	mov	r3, r0
    6170:	4619      	mov	r1, r3
    6172:	2004      	movs	r0, #4
    6174:	f7fa f956 	bl	424 <operator new(unsigned int, void*)>
    6178:	4603      	mov	r3, r0
    617a:	601c      	str	r4, [r3, #0]
    617c:	bf00      	nop
    617e:	3714      	adds	r7, #20
    6180:	46bd      	mov	sp, r7
    6182:	bd90      	pop	{r4, r7, pc}

00006184 <std::_Function_base::_Base_manager<void (*)()>::_M_get_pointer(std::_Any_data const&)>:
	_M_get_pointer(const _Any_data& __source)
    6184:	b580      	push	{r7, lr}
    6186:	b084      	sub	sp, #16
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
    618c:	6878      	ldr	r0, [r7, #4]
    618e:	f000 f874 	bl	627a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    6192:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
    6194:	68f8      	ldr	r0, [r7, #12]
    6196:	f000 f87c 	bl	6292 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>
    619a:	4603      	mov	r3, r0
	}
    619c:	4618      	mov	r0, r3
    619e:	3710      	adds	r7, #16
    61a0:	46bd      	mov	sp, r7
    61a2:	bd80      	pop	{r7, pc}

000061a4 <void (**&std::_Any_data::_M_access<void (**)()>())()>:
      _M_access()
    61a4:	b580      	push	{r7, lr}
    61a6:	b082      	sub	sp, #8
    61a8:	af00      	add	r7, sp, #0
    61aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    61ac:	6878      	ldr	r0, [r7, #4]
    61ae:	f7fa f971 	bl	494 <std::_Any_data::_M_access()>
    61b2:	4603      	mov	r3, r0
    61b4:	4618      	mov	r0, r3
    61b6:	3708      	adds	r7, #8
    61b8:	46bd      	mov	sp, r7
    61ba:	bd80      	pop	{r7, pc}

000061bc <std::_Function_base::_Base_manager<void (*)()>::_M_clone(std::_Any_data&, std::_Any_data const&, std::integral_constant<bool, true>)>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    61bc:	b590      	push	{r4, r7, lr}
    61be:	b085      	sub	sp, #20
    61c0:	af00      	add	r7, sp, #0
    61c2:	60f8      	str	r0, [r7, #12]
    61c4:	60b9      	str	r1, [r7, #8]
    61c6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    61c8:	68b8      	ldr	r0, [r7, #8]
    61ca:	f000 f856 	bl	627a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>
    61ce:	4603      	mov	r3, r0
    61d0:	681c      	ldr	r4, [r3, #0]
    61d2:	68f8      	ldr	r0, [r7, #12]
    61d4:	f7fa f95e 	bl	494 <std::_Any_data::_M_access()>
    61d8:	4603      	mov	r3, r0
    61da:	4619      	mov	r1, r3
    61dc:	2004      	movs	r0, #4
    61de:	f7fa f921 	bl	424 <operator new(unsigned int, void*)>
    61e2:	4603      	mov	r3, r0
    61e4:	601c      	str	r4, [r3, #0]
	}
    61e6:	bf00      	nop
    61e8:	3714      	adds	r7, #20
    61ea:	46bd      	mov	sp, r7
    61ec:	bd90      	pop	{r4, r7, pc}

000061ee <std::_Function_base::_Base_manager<void (*)()>::_M_destroy(std::_Any_data&, std::integral_constant<bool, true>)>:
	_M_destroy(_Any_data& __victim, true_type)
    61ee:	b580      	push	{r7, lr}
    61f0:	b082      	sub	sp, #8
    61f2:	af00      	add	r7, sp, #0
    61f4:	6078      	str	r0, [r7, #4]
    61f6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
    61f8:	6878      	ldr	r0, [r7, #4]
    61fa:	f000 f855 	bl	62a8 <void (*&std::_Any_data::_M_access<void (*)()>())()>
	}
    61fe:	bf00      	nop
    6200:	3708      	adds	r7, #8
    6202:	46bd      	mov	sp, r7
    6204:	bd80      	pop	{r7, pc}

00006206 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    6206:	b480      	push	{r7}
    6208:	b085      	sub	sp, #20
    620a:	af00      	add	r7, sp, #0
    620c:	60f8      	str	r0, [r7, #12]
    620e:	7239      	strb	r1, [r7, #8]
    6210:	713a      	strb	r2, [r7, #4]
    6212:	703b      	strb	r3, [r7, #0]
			return value;
    6214:	68fb      	ldr	r3, [r7, #12]
    6216:	681b      	ldr	r3, [r3, #0]
    6218:	ee07 3a90 	vmov	s15, r3
		}
    621c:	eeb0 0a67 	vmov.f32	s0, s15
    6220:	3714      	adds	r7, #20
    6222:	46bd      	mov	sp, r7
    6224:	f85d 7b04 	ldr.w	r7, [sp], #4
    6228:	4770      	bx	lr
    622a:	Address 0x000000000000622a is out of bounds.


0000622c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    622c:	b480      	push	{r7}
    622e:	b085      	sub	sp, #20
    6230:	af00      	add	r7, sp, #0
    6232:	60f8      	str	r0, [r7, #12]
    6234:	7239      	strb	r1, [r7, #8]
    6236:	713a      	strb	r2, [r7, #4]
    6238:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    623a:	68fb      	ldr	r3, [r7, #12]
    623c:	edd3 7a00 	vldr	s15, [r3]
    6240:	ed9f 7a05 	vldr	s14, [pc, #20]	; 6258 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    6244:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    6248:	eeb0 0a67 	vmov.f32	s0, s15
    624c:	3714      	adds	r7, #20
    624e:	46bd      	mov	sp, r7
    6250:	f85d 7b04 	ldr.w	r7, [sp], #4
    6254:	4770      	bx	lr
    6256:	bf00      	nop
    6258:	49742400 	.word	0x49742400

0000625c <std::__array_traits<std::function<void ()>, 59u>::_S_ref(std::function<void ()> const (&) [59], unsigned int)>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
    625c:	b480      	push	{r7}
    625e:	b083      	sub	sp, #12
    6260:	af00      	add	r7, sp, #0
    6262:	6078      	str	r0, [r7, #4]
    6264:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
    6266:	683b      	ldr	r3, [r7, #0]
    6268:	011b      	lsls	r3, r3, #4
    626a:	687a      	ldr	r2, [r7, #4]
    626c:	4413      	add	r3, r2
    626e:	4618      	mov	r0, r3
    6270:	370c      	adds	r7, #12
    6272:	46bd      	mov	sp, r7
    6274:	f85d 7b04 	ldr.w	r7, [sp], #4
    6278:	4770      	bx	lr

0000627a <void (* const&std::_Any_data::_M_access<void (*)()>() const)()>:
      _M_access() const
    627a:	b580      	push	{r7, lr}
    627c:	b082      	sub	sp, #8
    627e:	af00      	add	r7, sp, #0
    6280:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
    6282:	6878      	ldr	r0, [r7, #4]
    6284:	f7fa f911 	bl	4aa <std::_Any_data::_M_access() const>
    6288:	4603      	mov	r3, r0
    628a:	4618      	mov	r0, r3
    628c:	3708      	adds	r7, #8
    628e:	46bd      	mov	sp, r7
    6290:	bd80      	pop	{r7, pc}

00006292 <void (* const*std::__addressof<void (* const)()>(void (* const&)()))()>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    6292:	b480      	push	{r7}
    6294:	b083      	sub	sp, #12
    6296:	af00      	add	r7, sp, #0
    6298:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
    629a:	687b      	ldr	r3, [r7, #4]
    629c:	4618      	mov	r0, r3
    629e:	370c      	adds	r7, #12
    62a0:	46bd      	mov	sp, r7
    62a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    62a6:	4770      	bx	lr

000062a8 <void (*&std::_Any_data::_M_access<void (*)()>())()>:
      _M_access()
    62a8:	b580      	push	{r7, lr}
    62aa:	b082      	sub	sp, #8
    62ac:	af00      	add	r7, sp, #0
    62ae:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
    62b0:	6878      	ldr	r0, [r7, #4]
    62b2:	f7fa f8ef 	bl	494 <std::_Any_data::_M_access()>
    62b6:	4603      	mov	r3, r0
    62b8:	4618      	mov	r0, r3
    62ba:	3708      	adds	r7, #8
    62bc:	46bd      	mov	sp, r7
    62be:	bd80      	pop	{r7, pc}

000062c0 <std::array<std::function<void ()>, 59u>::~array()>:
    struct array
    62c0:	b590      	push	{r4, r7, lr}
    62c2:	b083      	sub	sp, #12
    62c4:	af00      	add	r7, sp, #0
    62c6:	6078      	str	r0, [r7, #4]
    62c8:	687b      	ldr	r3, [r7, #4]
    62ca:	2b00      	cmp	r3, #0
    62cc:	d00a      	beq.n	62e4 <std::array<std::function<void ()>, 59u>::~array()+0x24>
    62ce:	687b      	ldr	r3, [r7, #4]
    62d0:	f503 746c 	add.w	r4, r3, #944	; 0x3b0
    62d4:	687b      	ldr	r3, [r7, #4]
    62d6:	429c      	cmp	r4, r3
    62d8:	d004      	beq.n	62e4 <std::array<std::function<void ()>, 59u>::~array()+0x24>
    62da:	3c10      	subs	r4, #16
    62dc:	4620      	mov	r0, r4
    62de:	f7fd faa9 	bl	3834 <std::function<void ()>::~function()>
    62e2:	e7f7      	b.n	62d4 <std::array<std::function<void ()>, 59u>::~array()+0x14>
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	4618      	mov	r0, r3
    62e8:	370c      	adds	r7, #12
    62ea:	46bd      	mov	sp, r7
    62ec:	bd90      	pop	{r4, r7, pc}
    62ee:	Address 0x00000000000062ee is out of bounds.


000062f0 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    62f0:	b580      	push	{r7, lr}
    62f2:	b082      	sub	sp, #8
    62f4:	af00      	add	r7, sp, #0
    62f6:	6078      	str	r0, [r7, #4]
    62f8:	6039      	str	r1, [r7, #0]
    62fa:	687b      	ldr	r3, [r7, #4]
    62fc:	2b01      	cmp	r3, #1
    62fe:	d175      	bne.n	63ec <__static_initialization_and_destruction_0(int, int)+0xfc>
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6306:	4293      	cmp	r3, r2
    6308:	d170      	bne.n	63ec <__static_initialization_and_destruction_0(int, int)+0xfc>
inline UptimeFunction Uptime = DefaultUptime;  // NOLINT
    630a:	4b3a      	ldr	r3, [pc, #232]	; (63f4 <__static_initialization_and_destruction_0(int, int)+0x104>)
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	f003 0301 	and.w	r3, r3, #1
    6312:	2b00      	cmp	r3, #0
    6314:	d10b      	bne.n	632e <__static_initialization_and_destruction_0(int, int)+0x3e>
    6316:	4b37      	ldr	r3, [pc, #220]	; (63f4 <__static_initialization_and_destruction_0(int, int)+0x104>)
    6318:	2201      	movs	r2, #1
    631a:	601a      	str	r2, [r3, #0]
    631c:	4936      	ldr	r1, [pc, #216]	; (63f8 <__static_initialization_and_destruction_0(int, int)+0x108>)
    631e:	4837      	ldr	r0, [pc, #220]	; (63fc <__static_initialization_and_destruction_0(int, int)+0x10c>)
    6320:	f7fa fbcc 	bl	abc <std::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > ()>::function<std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)(), void, void>(std::chrono::duration<long long, std::ratio<1ll, 1000000000ll> > (*)())>
    6324:	4a36      	ldr	r2, [pc, #216]	; (6400 <__static_initialization_and_destruction_0(int, int)+0x110>)
    6326:	4937      	ldr	r1, [pc, #220]	; (6404 <__static_initialization_and_destruction_0(int, int)+0x114>)
    6328:	4834      	ldr	r0, [pc, #208]	; (63fc <__static_initialization_and_destruction_0(int, int)+0x10c>)
    632a:	f000 fac5 	bl	68b8 <__aeabi_atexit>
  inline static InterruptCallback callback = nullptr;
    632e:	4b36      	ldr	r3, [pc, #216]	; (6408 <__static_initialization_and_destruction_0(int, int)+0x118>)
    6330:	681b      	ldr	r3, [r3, #0]
    6332:	f003 0301 	and.w	r3, r3, #1
    6336:	2b00      	cmp	r3, #0
    6338:	d10b      	bne.n	6352 <__static_initialization_and_destruction_0(int, int)+0x62>
    633a:	4b33      	ldr	r3, [pc, #204]	; (6408 <__static_initialization_and_destruction_0(int, int)+0x118>)
    633c:	2201      	movs	r2, #1
    633e:	601a      	str	r2, [r3, #0]
    6340:	2100      	movs	r1, #0
    6342:	4832      	ldr	r0, [pc, #200]	; (640c <__static_initialization_and_destruction_0(int, int)+0x11c>)
    6344:	f7ff f97d 	bl	5642 <std::function<void ()>::function(decltype(nullptr))>
    6348:	4a2d      	ldr	r2, [pc, #180]	; (6400 <__static_initialization_and_destruction_0(int, int)+0x110>)
    634a:	4931      	ldr	r1, [pc, #196]	; (6410 <__static_initialization_and_destruction_0(int, int)+0x120>)
    634c:	482f      	ldr	r0, [pc, #188]	; (640c <__static_initialization_and_destruction_0(int, int)+0x11c>)
    634e:	f000 fab3 	bl	68b8 <__aeabi_atexit>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    6352:	4b30      	ldr	r3, [pc, #192]	; (6414 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6354:	681b      	ldr	r3, [r3, #0]
    6356:	f003 0301 	and.w	r3, r3, #1
    635a:	2b00      	cmp	r3, #0
    635c:	d105      	bne.n	636a <__static_initialization_and_destruction_0(int, int)+0x7a>
    635e:	4b2d      	ldr	r3, [pc, #180]	; (6414 <__static_initialization_and_destruction_0(int, int)+0x124>)
    6360:	2201      	movs	r2, #1
    6362:	601a      	str	r2, [r3, #0]
    6364:	4a2c      	ldr	r2, [pc, #176]	; (6418 <__static_initialization_and_destruction_0(int, int)+0x128>)
    6366:	4b2d      	ldr	r3, [pc, #180]	; (641c <__static_initialization_and_destruction_0(int, int)+0x12c>)
    6368:	601a      	str	r2, [r3, #0]
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    636a:	4b2d      	ldr	r3, [pc, #180]	; (6420 <__static_initialization_and_destruction_0(int, int)+0x130>)
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	f003 0301 	and.w	r3, r3, #1
    6372:	2b00      	cmp	r3, #0
    6374:	d105      	bne.n	6382 <__static_initialization_and_destruction_0(int, int)+0x92>
    6376:	4b2a      	ldr	r3, [pc, #168]	; (6420 <__static_initialization_and_destruction_0(int, int)+0x130>)
    6378:	2201      	movs	r2, #1
    637a:	601a      	str	r2, [r3, #0]
    637c:	4a29      	ldr	r2, [pc, #164]	; (6424 <__static_initialization_and_destruction_0(int, int)+0x134>)
    637e:	4b2a      	ldr	r3, [pc, #168]	; (6428 <__static_initialization_and_destruction_0(int, int)+0x138>)
    6380:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    6382:	4b2a      	ldr	r3, [pc, #168]	; (642c <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	f003 0301 	and.w	r3, r3, #1
    638a:	2b00      	cmp	r3, #0
    638c:	d105      	bne.n	639a <__static_initialization_and_destruction_0(int, int)+0xaa>
    638e:	4b27      	ldr	r3, [pc, #156]	; (642c <__static_initialization_and_destruction_0(int, int)+0x13c>)
    6390:	2201      	movs	r2, #1
    6392:	601a      	str	r2, [r3, #0]
    };
    6394:	4a26      	ldr	r2, [pc, #152]	; (6430 <__static_initialization_and_destruction_0(int, int)+0x140>)
    6396:	4b27      	ldr	r3, [pc, #156]	; (6434 <__static_initialization_and_destruction_0(int, int)+0x144>)
    6398:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    639a:	4b27      	ldr	r3, [pc, #156]	; (6438 <__static_initialization_and_destruction_0(int, int)+0x148>)
    639c:	681b      	ldr	r3, [r3, #0]
    639e:	f003 0301 	and.w	r3, r3, #1
    63a2:	2b00      	cmp	r3, #0
    63a4:	d105      	bne.n	63b2 <__static_initialization_and_destruction_0(int, int)+0xc2>
    63a6:	4b24      	ldr	r3, [pc, #144]	; (6438 <__static_initialization_and_destruction_0(int, int)+0x148>)
    63a8:	2201      	movs	r2, #1
    63aa:	601a      	str	r2, [r3, #0]
    };
    63ac:	4a23      	ldr	r2, [pc, #140]	; (643c <__static_initialization_and_destruction_0(int, int)+0x14c>)
    63ae:	4b24      	ldr	r3, [pc, #144]	; (6440 <__static_initialization_and_destruction_0(int, int)+0x150>)
    63b0:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    63b2:	4b24      	ldr	r3, [pc, #144]	; (6444 <__static_initialization_and_destruction_0(int, int)+0x154>)
    63b4:	681b      	ldr	r3, [r3, #0]
    63b6:	f003 0301 	and.w	r3, r3, #1
    63ba:	2b00      	cmp	r3, #0
    63bc:	d105      	bne.n	63ca <__static_initialization_and_destruction_0(int, int)+0xda>
    63be:	4b21      	ldr	r3, [pc, #132]	; (6444 <__static_initialization_and_destruction_0(int, int)+0x154>)
    63c0:	2201      	movs	r2, #1
    63c2:	601a      	str	r2, [r3, #0]
    };
    63c4:	4a20      	ldr	r2, [pc, #128]	; (6448 <__static_initialization_and_destruction_0(int, int)+0x158>)
    63c6:	4b21      	ldr	r3, [pc, #132]	; (644c <__static_initialization_and_destruction_0(int, int)+0x15c>)
    63c8:	601a      	str	r2, [r3, #0]
  }

 private:
  static inline std::array<InterruptHandler,
                           kNumberOfInterrupts + kArmExceptionOffset>
      table;
    63ca:	4b21      	ldr	r3, [pc, #132]	; (6450 <__static_initialization_and_destruction_0(int, int)+0x160>)
    63cc:	681b      	ldr	r3, [r3, #0]
    63ce:	f003 0301 	and.w	r3, r3, #1
    63d2:	2b00      	cmp	r3, #0
    63d4:	d10a      	bne.n	63ec <__static_initialization_and_destruction_0(int, int)+0xfc>
    63d6:	4b1e      	ldr	r3, [pc, #120]	; (6450 <__static_initialization_and_destruction_0(int, int)+0x160>)
    63d8:	2201      	movs	r2, #1
    63da:	601a      	str	r2, [r3, #0]
    63dc:	481d      	ldr	r0, [pc, #116]	; (6454 <__static_initialization_and_destruction_0(int, int)+0x164>)
    63de:	f7ff fbb3 	bl	5b48 <std::array<std::function<void ()>, 59u>::array()>
    63e2:	4a07      	ldr	r2, [pc, #28]	; (6400 <__static_initialization_and_destruction_0(int, int)+0x110>)
    63e4:	491c      	ldr	r1, [pc, #112]	; (6458 <__static_initialization_and_destruction_0(int, int)+0x168>)
    63e6:	481b      	ldr	r0, [pc, #108]	; (6454 <__static_initialization_and_destruction_0(int, int)+0x164>)
    63e8:	f000 fa66 	bl	68b8 <__aeabi_atexit>
    63ec:	bf00      	nop
    63ee:	3708      	adds	r7, #8
    63f0:	46bd      	mov	sp, r7
    63f2:	bd80      	pop	{r7, pc}
    63f4:	10000158 	.word	0x10000158
    63f8:	000007f5 	.word	0x000007f5
    63fc:	10000148 	.word	0x10000148
    6400:	10000000 	.word	0x10000000
    6404:	0000083d 	.word	0x0000083d
    6408:	100005cc 	.word	0x100005cc
    640c:	100001f8 	.word	0x100001f8
    6410:	00003835 	.word	0x00003835
    6414:	100005d0 	.word	0x100005d0
    6418:	400fc000 	.word	0x400fc000
    641c:	10000214 	.word	0x10000214
    6420:	1000016c 	.word	0x1000016c
    6424:	4002c000 	.word	0x4002c000
    6428:	1000015c 	.word	0x1000015c
    642c:	100005d4 	.word	0x100005d4
    6430:	40098000 	.word	0x40098000
    6434:	1000002c 	.word	0x1000002c
    6438:	100005d8 	.word	0x100005d8
    643c:	4009c000 	.word	0x4009c000
    6440:	10000040 	.word	0x10000040
    6444:	100005dc 	.word	0x100005dc
    6448:	400a4000 	.word	0x400a4000
    644c:	10000054 	.word	0x10000054
    6450:	100005e0 	.word	0x100005e0
    6454:	1000021c 	.word	0x1000021c
    6458:	000062c1 	.word	0x000062c1

0000645c <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)>:
  void Initialize(
    645c:	b590      	push	{r4, r7, lr}
    645e:	b083      	sub	sp, #12
    6460:	af00      	add	r7, sp, #0
    6462:	6078      	str	r0, [r7, #4]
    6464:	6039      	str	r1, [r7, #0]
    std::fill(table.begin(), table.end(), unregistered_handler);
    6466:	4808      	ldr	r0, [pc, #32]	; (6488 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    6468:	f000 f85e 	bl	6528 <std::array<std::function<void ()>, 59u>::begin()>
    646c:	4604      	mov	r4, r0
    646e:	4806      	ldr	r0, [pc, #24]	; (6488 <sjsu::cortex::InterruptController<43u, 5ul>::Initialize(std::function<void ()>)+0x2c>)
    6470:	f000 f866 	bl	6540 <std::array<std::function<void ()>, 59u>::end()>
    6474:	4603      	mov	r3, r0
    6476:	683a      	ldr	r2, [r7, #0]
    6478:	4619      	mov	r1, r3
    647a:	4620      	mov	r0, r4
    647c:	f000 f86e 	bl	655c <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
  }
    6480:	bf00      	nop
    6482:	370c      	adds	r7, #12
    6484:	46bd      	mov	sp, r7
    6486:	bd90      	pop	{r4, r7, pc}
    6488:	1000021c 	.word	0x1000021c

0000648c <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)>:
  void Enable(RegistrationInfo_t register_info) override
    648c:	b590      	push	{r4, r7, lr}
    648e:	b085      	sub	sp, #20
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
    6494:	6039      	str	r1, [r7, #0]
    int irq                = register_info.interrupt_request_number;
    6496:	683b      	ldr	r3, [r7, #0]
    6498:	681b      	ldr	r3, [r3, #0]
    649a:	60fb      	str	r3, [r7, #12]
    table[IRQToIndex(irq)] = register_info.interrupt_handler;
    649c:	683b      	ldr	r3, [r7, #0]
    649e:	1d1c      	adds	r4, r3, #4
    64a0:	68f8      	ldr	r0, [r7, #12]
    64a2:	f000 f872 	bl	658a <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    64a6:	4603      	mov	r3, r0
    64a8:	4619      	mov	r1, r3
    64aa:	480e      	ldr	r0, [pc, #56]	; (64e4 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x58>)
    64ac:	f7ff fd82 	bl	5fb4 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    64b0:	4603      	mov	r3, r0
    64b2:	4621      	mov	r1, r4
    64b4:	4618      	mov	r0, r3
    64b6:	f7ff f91e 	bl	56f6 <std::function<void ()>::operator=(std::function<void ()> const&)>
    if (irq >= 0)
    64ba:	68fb      	ldr	r3, [r7, #12]
    64bc:	2b00      	cmp	r3, #0
    64be:	db02      	blt.n	64c6 <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x3a>
      NvicEnableIRQ(irq);
    64c0:	68f8      	ldr	r0, [r7, #12]
    64c2:	f000 f86f 	bl	65a4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>
    if (register_info.priority > -1)
    64c6:	683b      	ldr	r3, [r7, #0]
    64c8:	695b      	ldr	r3, [r3, #20]
    64ca:	2b00      	cmp	r3, #0
    64cc:	db05      	blt.n	64da <sjsu::cortex::InterruptController<43u, 5ul>::Enable(sjsu::InterruptController::RegistrationInfo_t)+0x4e>
      NvicSetPriority(irq, register_info.priority);
    64ce:	683b      	ldr	r3, [r7, #0]
    64d0:	695b      	ldr	r3, [r3, #20]
    64d2:	4619      	mov	r1, r3
    64d4:	68f8      	ldr	r0, [r7, #12]
    64d6:	f000 f87d 	bl	65d4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>
  }
    64da:	bf00      	nop
    64dc:	3714      	adds	r7, #20
    64de:	46bd      	mov	sp, r7
    64e0:	bd90      	pop	{r4, r7, pc}
    64e2:	bf00      	nop
    64e4:	1000021c 	.word	0x1000021c

000064e8 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)>:
  void Disable(int interrupt_request_number) override
    64e8:	b580      	push	{r7, lr}
    64ea:	b082      	sub	sp, #8
    64ec:	af00      	add	r7, sp, #0
    64ee:	6078      	str	r0, [r7, #4]
    64f0:	6039      	str	r1, [r7, #0]
    if (interrupt_request_number >= 0)
    64f2:	683b      	ldr	r3, [r7, #0]
    64f4:	2b00      	cmp	r3, #0
    64f6:	db02      	blt.n	64fe <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x16>
      NvicDisableIRQ(interrupt_request_number);
    64f8:	6838      	ldr	r0, [r7, #0]
    64fa:	f000 f897 	bl	662c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    table[IRQToIndex(interrupt_request_number)] = UnregisteredHandler;
    64fe:	6838      	ldr	r0, [r7, #0]
    6500:	f000 f843 	bl	658a <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>
    6504:	4603      	mov	r3, r0
    6506:	4619      	mov	r1, r3
    6508:	4805      	ldr	r0, [pc, #20]	; (6520 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x38>)
    650a:	f7ff fd53 	bl	5fb4 <std::array<std::function<void ()>, 59u>::operator[](unsigned int)>
    650e:	4603      	mov	r3, r0
    6510:	4904      	ldr	r1, [pc, #16]	; (6524 <sjsu::cortex::InterruptController<43u, 5ul>::Disable(int)+0x3c>)
    6512:	4618      	mov	r0, r3
    6514:	f000 f8ce 	bl	66b4 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>
  }
    6518:	bf00      	nop
    651a:	3708      	adds	r7, #8
    651c:	46bd      	mov	sp, r7
    651e:	bd80      	pop	{r7, pc}
    6520:	1000021c 	.word	0x1000021c
    6524:	00006661 	.word	0x00006661

00006528 <std::array<std::function<void ()>, 59u>::begin()>:
      begin() noexcept
    6528:	b580      	push	{r7, lr}
    652a:	b082      	sub	sp, #8
    652c:	af00      	add	r7, sp, #0
    652e:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
    6530:	6878      	ldr	r0, [r7, #4]
    6532:	f000 f8de 	bl	66f2 <std::array<std::function<void ()>, 59u>::data()>
    6536:	4603      	mov	r3, r0
    6538:	4618      	mov	r0, r3
    653a:	3708      	adds	r7, #8
    653c:	46bd      	mov	sp, r7
    653e:	bd80      	pop	{r7, pc}

00006540 <std::array<std::function<void ()>, 59u>::end()>:
      end() noexcept
    6540:	b580      	push	{r7, lr}
    6542:	b082      	sub	sp, #8
    6544:	af00      	add	r7, sp, #0
    6546:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
    6548:	6878      	ldr	r0, [r7, #4]
    654a:	f000 f8d2 	bl	66f2 <std::array<std::function<void ()>, 59u>::data()>
    654e:	4603      	mov	r3, r0
    6550:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
    6554:	4618      	mov	r0, r3
    6556:	3708      	adds	r7, #8
    6558:	46bd      	mov	sp, r7
    655a:	bd80      	pop	{r7, pc}

0000655c <void std::fill<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    655c:	b590      	push	{r4, r7, lr}
    655e:	b085      	sub	sp, #20
    6560:	af00      	add	r7, sp, #0
    6562:	60f8      	str	r0, [r7, #12]
    6564:	60b9      	str	r1, [r7, #8]
    6566:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
    6568:	68f8      	ldr	r0, [r7, #12]
    656a:	f000 f8cf 	bl	670c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    656e:	4604      	mov	r4, r0
    6570:	68b8      	ldr	r0, [r7, #8]
    6572:	f000 f8cb 	bl	670c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>
    6576:	4603      	mov	r3, r0
    6578:	687a      	ldr	r2, [r7, #4]
    657a:	4619      	mov	r1, r3
    657c:	4620      	mov	r0, r4
    657e:	f000 f8d0 	bl	6722 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>
		    __value);
    }
    6582:	bf00      	nop
    6584:	3714      	adds	r7, #20
    6586:	46bd      	mov	sp, r7
    6588:	bd90      	pop	{r4, r7, pc}

0000658a <sjsu::cortex::InterruptController<43u, 5ul>::IRQToIndex(int)>:
  static int IRQToIndex(int irq)
    658a:	b480      	push	{r7}
    658c:	b083      	sub	sp, #12
    658e:	af00      	add	r7, sp, #0
    6590:	6078      	str	r0, [r7, #4]
    return irq + kArmExceptionOffset;
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	3310      	adds	r3, #16
  }
    6596:	4618      	mov	r0, r3
    6598:	370c      	adds	r7, #12
    659a:	46bd      	mov	sp, r7
    659c:	f85d 7b04 	ldr.w	r7, [sp], #4
    65a0:	4770      	bx	lr
    65a2:	Address 0x00000000000065a2 is out of bounds.


000065a4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)>:
  /// Enable External Interrupt
  /// Enables a device-specific interrupt in the NVIC interrupt controller.
  ///
  /// @param irq - External interrupt number. Value cannot be negative.
  static void NvicEnableIRQ(int irq)
    65a4:	b480      	push	{r7}
    65a6:	b083      	sub	sp, #12
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
  {
    nvic->ISER[(irq >> 5)] = (1 << (irq & 0x1F));
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	f003 031f 	and.w	r3, r3, #31
    65b2:	2201      	movs	r2, #1
    65b4:	fa02 f103 	lsl.w	r1, r2, r3
    65b8:	4b05      	ldr	r3, [pc, #20]	; (65d0 <sjsu::cortex::InterruptController<43u, 5ul>::NvicEnableIRQ(int)+0x2c>)
    65ba:	681b      	ldr	r3, [r3, #0]
    65bc:	687a      	ldr	r2, [r7, #4]
    65be:	1152      	asrs	r2, r2, #5
    65c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    65c4:	bf00      	nop
    65c6:	370c      	adds	r7, #12
    65c8:	46bd      	mov	sp, r7
    65ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    65ce:	4770      	bx	lr
    65d0:	100000b0 	.word	0x100000b0

000065d4 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)>:
  /// Set Interrupt Priority
  /// Sets the priority of an interrupt.
  /// @note    The priority cannot be set for every core interrupt.
  /// @param irq -  Interrupt number.
  /// @param priority -  Priority to set.
  static void NvicSetPriority(int irq, uint32_t priority)
    65d4:	b480      	push	{r7}
    65d6:	b085      	sub	sp, #20
    65d8:	af00      	add	r7, sp, #0
    65da:	6078      	str	r0, [r7, #4]
    65dc:	6039      	str	r1, [r7, #0]
  {
    uint32_t priority_mask = priority << (8U - kNvicPriorityBits);
    65de:	683b      	ldr	r3, [r7, #0]
    65e0:	00db      	lsls	r3, r3, #3
    65e2:	60fb      	str	r3, [r7, #12]
    if (irq < 0)
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	2b00      	cmp	r3, #0
    65e8:	da0b      	bge.n	6602 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x2e>
    {
      scb->SHP[(irq & 0xFUL) - 4UL] = static_cast<uint8_t>(priority_mask);
    65ea:	4b0e      	ldr	r3, [pc, #56]	; (6624 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x50>)
    65ec:	681a      	ldr	r2, [r3, #0]
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	f003 030f 	and.w	r3, r3, #15
    65f4:	3b04      	subs	r3, #4
    65f6:	68f9      	ldr	r1, [r7, #12]
    65f8:	b2c9      	uxtb	r1, r1
    65fa:	4413      	add	r3, r2
    65fc:	460a      	mov	r2, r1
    65fe:	761a      	strb	r2, [r3, #24]
    }
    else
    {
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    }
  }
    6600:	e009      	b.n	6616 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x42>
      nvic->IP[irq] = static_cast<uint8_t>(priority_mask);
    6602:	4b09      	ldr	r3, [pc, #36]	; (6628 <sjsu::cortex::InterruptController<43u, 5ul>::NvicSetPriority(int, unsigned long)+0x54>)
    6604:	681a      	ldr	r2, [r3, #0]
    6606:	68fb      	ldr	r3, [r7, #12]
    6608:	b2d9      	uxtb	r1, r3
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	4413      	add	r3, r2
    660e:	f503 7340 	add.w	r3, r3, #768	; 0x300
    6612:	460a      	mov	r2, r1
    6614:	701a      	strb	r2, [r3, #0]
  }
    6616:	bf00      	nop
    6618:	3714      	adds	r7, #20
    661a:	46bd      	mov	sp, r7
    661c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6620:	4770      	bx	lr
    6622:	bf00      	nop
    6624:	100000ac 	.word	0x100000ac
    6628:	100000b0 	.word	0x100000b0

0000662c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>:
  static void NvicDisableIRQ(int irq)
    662c:	b480      	push	{r7}
    662e:	b083      	sub	sp, #12
    6630:	af00      	add	r7, sp, #0
    6632:	6078      	str	r0, [r7, #4]
    nvic->ICER[(irq >> 5)] = (1 << (irq & 0x1F));
    6634:	687b      	ldr	r3, [r7, #4]
    6636:	f003 031f 	and.w	r3, r3, #31
    663a:	2201      	movs	r2, #1
    663c:	fa02 f103 	lsl.w	r1, r2, r3
    6640:	4b06      	ldr	r3, [pc, #24]	; (665c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)+0x30>)
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	687a      	ldr	r2, [r7, #4]
    6646:	1152      	asrs	r2, r2, #5
    6648:	3220      	adds	r2, #32
    664a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
    664e:	bf00      	nop
    6650:	370c      	adds	r7, #12
    6652:	46bd      	mov	sp, r7
    6654:	f85d 7b04 	ldr.w	r7, [sp], #4
    6658:	4770      	bx	lr
    665a:	bf00      	nop
    665c:	100000b0 	.word	0x100000b0

00006660 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()>:

  /// Program will call this if an unexpected interrupt occurs or a specific
  /// handler is not present in the application code.
  static void UnregisteredHandler()
    6660:	b590      	push	{r4, r7, lr}
    6662:	b089      	sub	sp, #36	; 0x24
    6664:	af02      	add	r7, sp, #8
  {
    sjsu::LogDebug(
    6666:	4b0f      	ldr	r3, [pc, #60]	; (66a4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x44>)
    6668:	681c      	ldr	r4, [r3, #0]
    666a:	f107 0008 	add.w	r0, r7, #8
    666e:	2300      	movs	r3, #0
    6670:	9300      	str	r3, [sp, #0]
    6672:	2385      	movs	r3, #133	; 0x85
    6674:	4a0c      	ldr	r2, [pc, #48]	; (66a8 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x48>)
    6676:	490d      	ldr	r1, [pc, #52]	; (66ac <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x4c>)
    6678:	f7f9 fe7a 	bl	370 <std::experimental::fundamentals_v2::source_location::current(char const*, char const*, int, int)>
    667c:	f107 0308 	add.w	r3, r7, #8
    6680:	1d38      	adds	r0, r7, #4
    6682:	4622      	mov	r2, r4
    6684:	490a      	ldr	r1, [pc, #40]	; (66b0 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x50>)
    6686:	f000 f862 	bl	674e <sjsu::LogDebug<int>::LogDebug(char const*, int, std::experimental::fundamentals_v2::source_location const&)>
        "No interrupt handler found. Disabling interrupt request %d!",
        current_vector);
    if (current_vector >= 0)
    668a:	4b06      	ldr	r3, [pc, #24]	; (66a4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x44>)
    668c:	681b      	ldr	r3, [r3, #0]
    668e:	2b00      	cmp	r3, #0
    6690:	db04      	blt.n	669c <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x3c>
    {
      NvicDisableIRQ(current_vector);
    6692:	4b04      	ldr	r3, [pc, #16]	; (66a4 <sjsu::cortex::InterruptController<43u, 5ul>::UnregisteredHandler()+0x44>)
    6694:	681b      	ldr	r3, [r3, #0]
    6696:	4618      	mov	r0, r3
    6698:	f7ff ffc8 	bl	662c <sjsu::cortex::InterruptController<43u, 5ul>::NvicDisableIRQ(int)>
    }
  }
    669c:	bf00      	nop
    669e:	371c      	adds	r7, #28
    66a0:	46bd      	mov	sp, r7
    66a2:	bd90      	pop	{r4, r7, pc}
    66a4:	100000b4 	.word	0x100000b4
    66a8:	00007d20 	.word	0x00007d20
    66ac:	00007d34 	.word	0x00007d34
    66b0:	00007d80 	.word	0x00007d80

000066b4 <std::enable_if<std::function<void ()>::_Callable<std::decay<void (&)()>::type, std::__invoke_result<std::decay<void (&)()>::type&> >::value, std::function<void ()>&>::type std::function<void ()>::operator=<void (&)()>(void (&)())>:
	operator=(_Functor&& __f)
    66b4:	b580      	push	{r7, lr}
    66b6:	b086      	sub	sp, #24
    66b8:	af00      	add	r7, sp, #0
    66ba:	6078      	str	r0, [r7, #4]
    66bc:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
    66be:	6838      	ldr	r0, [r7, #0]
    66c0:	f000 f853 	bl	676a <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>
    66c4:	4602      	mov	r2, r0
    66c6:	f107 0308 	add.w	r3, r7, #8
    66ca:	4611      	mov	r1, r2
    66cc:	4618      	mov	r0, r3
    66ce:	f7ff f82d 	bl	572c <std::function<void ()>::function<void (*)(), void, void>(void (*)())>
    66d2:	f107 0308 	add.w	r3, r7, #8
    66d6:	6879      	ldr	r1, [r7, #4]
    66d8:	4618      	mov	r0, r3
    66da:	f7ff fae5 	bl	5ca8 <std::function<void ()>::swap(std::function<void ()>&)>
    66de:	f107 0308 	add.w	r3, r7, #8
    66e2:	4618      	mov	r0, r3
    66e4:	f7fd f8a6 	bl	3834 <std::function<void ()>::~function()>
	  return *this;
    66e8:	687b      	ldr	r3, [r7, #4]
	}
    66ea:	4618      	mov	r0, r3
    66ec:	3718      	adds	r7, #24
    66ee:	46bd      	mov	sp, r7
    66f0:	bd80      	pop	{r7, pc}

000066f2 <std::array<std::function<void ()>, 59u>::data()>:
      data() noexcept
    66f2:	b580      	push	{r7, lr}
    66f4:	b082      	sub	sp, #8
    66f6:	af00      	add	r7, sp, #0
    66f8:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	4618      	mov	r0, r3
    66fe:	f000 f83f 	bl	6780 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>
    6702:	4603      	mov	r3, r0
    6704:	4618      	mov	r0, r3
    6706:	3708      	adds	r7, #8
    6708:	46bd      	mov	sp, r7
    670a:	bd80      	pop	{r7, pc}

0000670c <std::function<void ()>* std::__niter_base<std::function<void ()>*>(std::function<void ()>*)>:
    __niter_base(_Iterator __it)
    670c:	b480      	push	{r7}
    670e:	b083      	sub	sp, #12
    6710:	af00      	add	r7, sp, #0
    6712:	6078      	str	r0, [r7, #4]
    { return __it; }
    6714:	687b      	ldr	r3, [r7, #4]
    6716:	4618      	mov	r0, r3
    6718:	370c      	adds	r7, #12
    671a:	46bd      	mov	sp, r7
    671c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6720:	4770      	bx	lr

00006722 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
    6722:	b580      	push	{r7, lr}
    6724:	b084      	sub	sp, #16
    6726:	af00      	add	r7, sp, #0
    6728:	60f8      	str	r0, [r7, #12]
    672a:	60b9      	str	r1, [r7, #8]
    672c:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
    672e:	68fa      	ldr	r2, [r7, #12]
    6730:	68bb      	ldr	r3, [r7, #8]
    6732:	429a      	cmp	r2, r3
    6734:	d007      	beq.n	6746 <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0x24>
	*__first = __value;
    6736:	6879      	ldr	r1, [r7, #4]
    6738:	68f8      	ldr	r0, [r7, #12]
    673a:	f7fe ffdc 	bl	56f6 <std::function<void ()>::operator=(std::function<void ()> const&)>
      for (; __first != __last; ++__first)
    673e:	68fb      	ldr	r3, [r7, #12]
    6740:	3310      	adds	r3, #16
    6742:	60fb      	str	r3, [r7, #12]
    6744:	e7f3      	b.n	672e <__gnu_cxx::__enable_if<!std::__is_scalar<std::function<void ()> >::__value, void>::__type std::__fill_a<std::function<void ()>*, std::function<void ()> >(std::function<void ()>*, std::function<void ()>*, std::function<void ()> const&)+0xc>
    }
    6746:	bf00      	nop
    6748:	3710      	adds	r7, #16
    674a:	46bd      	mov	sp, r7
    674c:	bd80      	pop	{r7, pc}

0000674e <sjsu::LogDebug<int>::LogDebug(char const*, int, std::experimental::fundamentals_v2::source_location const&)>:
  LogDebug(const char * format,
    674e:	b480      	push	{r7}
    6750:	b085      	sub	sp, #20
    6752:	af00      	add	r7, sp, #0
    6754:	60f8      	str	r0, [r7, #12]
    6756:	60b9      	str	r1, [r7, #8]
    6758:	607a      	str	r2, [r7, #4]
    675a:	603b      	str	r3, [r7, #0]
  }
    675c:	68fb      	ldr	r3, [r7, #12]
    675e:	4618      	mov	r0, r3
    6760:	3714      	adds	r7, #20
    6762:	46bd      	mov	sp, r7
    6764:	f85d 7b04 	ldr.w	r7, [sp], #4
    6768:	4770      	bx	lr

0000676a <void (&std::forward<void (&)()>(std::remove_reference<void (&)()>::type&))()>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    676a:	b480      	push	{r7}
    676c:	b083      	sub	sp, #12
    676e:	af00      	add	r7, sp, #0
    6770:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
    6772:	687b      	ldr	r3, [r7, #4]
    6774:	4618      	mov	r0, r3
    6776:	370c      	adds	r7, #12
    6778:	46bd      	mov	sp, r7
    677a:	f85d 7b04 	ldr.w	r7, [sp], #4
    677e:	4770      	bx	lr

00006780 <std::__array_traits<std::function<void ()>, 59u>::_S_ptr(std::function<void ()> const (&) [59])>:
      _S_ptr(const _Type& __t) noexcept
    6780:	b480      	push	{r7}
    6782:	b083      	sub	sp, #12
    6784:	af00      	add	r7, sp, #0
    6786:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
    6788:	687b      	ldr	r3, [r7, #4]
    678a:	4618      	mov	r0, r3
    678c:	370c      	adds	r7, #12
    678e:	46bd      	mov	sp, r7
    6790:	f85d 7b04 	ldr.w	r7, [sp], #4
    6794:	4770      	bx	lr

00006796 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    6796:	b580      	push	{r7, lr}
    6798:	af00      	add	r7, sp, #0
    679a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    679e:	2001      	movs	r0, #1
    67a0:	f7ff fda6 	bl	62f0 <__static_initialization_and_destruction_0(int, int)>
    67a4:	bd80      	pop	{r7, pc}
    67a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    67aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    67ae:	Address 0x00000000000067ae is out of bounds.


000067b0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    67b0:	4b07      	ldr	r3, [pc, #28]	; (67d0 <pxCurrentTCBConst2>)
    67b2:	6819      	ldr	r1, [r3, #0]
    67b4:	6808      	ldr	r0, [r1, #0]
    67b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67ba:	f380 8809 	msr	PSP, r0
    67be:	f3bf 8f6f 	isb	sy
    67c2:	f04f 0000 	mov.w	r0, #0
    67c6:	f380 8811 	msr	BASEPRI, r0
    67ca:	4770      	bx	lr
    67cc:	f3af 8000 	nop.w

000067d0 <pxCurrentTCBConst2>:
    67d0:	10000170 	.word	0x10000170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    67d4:	bf00      	nop
    67d6:	bf00      	nop
    67d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    67dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000067e0 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    67e0:	f3ef 8009 	mrs	r0, PSP
    67e4:	f3bf 8f6f 	isb	sy
    67e8:	4b15      	ldr	r3, [pc, #84]	; (6840 <pxCurrentTCBConst>)
    67ea:	681a      	ldr	r2, [r3, #0]
    67ec:	f01e 0f10 	tst.w	lr, #16
    67f0:	bf08      	it	eq
    67f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    67f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67fa:	6010      	str	r0, [r2, #0]
    67fc:	e92d 0009 	stmdb	sp!, {r0, r3}
    6800:	f04f 0028 	mov.w	r0, #40	; 0x28
    6804:	f380 8811 	msr	BASEPRI, r0
    6808:	f3bf 8f4f 	dsb	sy
    680c:	f3bf 8f6f 	isb	sy
    6810:	f7fb fd56 	bl	22c0 <vTaskSwitchContext>
    6814:	f04f 0000 	mov.w	r0, #0
    6818:	f380 8811 	msr	BASEPRI, r0
    681c:	bc09      	pop	{r0, r3}
    681e:	6819      	ldr	r1, [r3, #0]
    6820:	6808      	ldr	r0, [r1, #0]
    6822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6826:	f01e 0f10 	tst.w	lr, #16
    682a:	bf08      	it	eq
    682c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    6830:	f380 8809 	msr	PSP, r0
    6834:	f3bf 8f6f 	isb	sy
    6838:	4770      	bx	lr
    683a:	bf00      	nop
    683c:	f3af 8000 	nop.w

00006840 <pxCurrentTCBConst>:
    6840:	10000170 	.word	0x10000170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    6844:	bf00      	nop
    6846:	bf00      	nop

00006848 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    6848:	b480      	push	{r7}
    684a:	b083      	sub	sp, #12
    684c:	af00      	add	r7, sp, #0
    684e:	6078      	str	r0, [r7, #4]
    6850:	6039      	str	r1, [r7, #0]
  return 1;
    6852:	2301      	movs	r3, #1
}
    6854:	4618      	mov	r0, r3
    6856:	370c      	adds	r7, #12
    6858:	46bd      	mov	sp, r7
    685a:	f85d 7b04 	ldr.w	r7, [sp], #4
    685e:	4770      	bx	lr

00006860 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    6860:	b480      	push	{r7}
    6862:	b083      	sub	sp, #12
    6864:	af00      	add	r7, sp, #0
    6866:	6078      	str	r0, [r7, #4]
    6868:	6039      	str	r1, [r7, #0]
  return 0;
    686a:	2300      	movs	r3, #0
}
    686c:	4618      	mov	r0, r3
    686e:	370c      	adds	r7, #12
    6870:	46bd      	mov	sp, r7
    6872:	f85d 7b04 	ldr.w	r7, [sp], #4
    6876:	4770      	bx	lr

00006878 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    6878:	b480      	push	{r7}
    687a:	b083      	sub	sp, #12
    687c:	af00      	add	r7, sp, #0
    687e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    6880:	4a04      	ldr	r2, [pc, #16]	; (6894 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    6882:	687b      	ldr	r3, [r7, #4]
    6884:	6013      	str	r3, [r2, #0]
}
    6886:	bf00      	nop
    6888:	370c      	adds	r7, #12
    688a:	46bd      	mov	sp, r7
    688c:	f85d 7b04 	ldr.w	r7, [sp], #4
    6890:	4770      	bx	lr
    6892:	bf00      	nop
    6894:	10000008 	.word	0x10000008

00006898 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    6898:	b480      	push	{r7}
    689a:	b083      	sub	sp, #12
    689c:	af00      	add	r7, sp, #0
    689e:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    68a0:	4a04      	ldr	r2, [pc, #16]	; (68b4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	6013      	str	r3, [r2, #0]
}
    68a6:	bf00      	nop
    68a8:	370c      	adds	r7, #12
    68aa:	46bd      	mov	sp, r7
    68ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    68b0:	4770      	bx	lr
    68b2:	bf00      	nop
    68b4:	1000000c 	.word	0x1000000c

000068b8 <__aeabi_atexit>:
    68b8:	460b      	mov	r3, r1
    68ba:	4601      	mov	r1, r0
    68bc:	4618      	mov	r0, r3
    68be:	f000 bb35 	b.w	6f2c <__cxa_atexit>

000068c2 <std::__throw_bad_function_call()>:
    68c2:	b508      	push	{r3, lr}
    68c4:	f000 fb2a 	bl	6f1c <abort>

000068c8 <__aeabi_d2f>:
    68c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    68cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    68d0:	bf24      	itt	cs
    68d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    68d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    68da:	d90d      	bls.n	68f8 <__aeabi_d2f+0x30>
    68dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    68e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    68e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    68e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    68ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    68f0:	bf08      	it	eq
    68f2:	f020 0001 	biceq.w	r0, r0, #1
    68f6:	4770      	bx	lr
    68f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    68fc:	d121      	bne.n	6942 <__aeabi_d2f+0x7a>
    68fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    6902:	bfbc      	itt	lt
    6904:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    6908:	4770      	bxlt	lr
    690a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    690e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    6912:	f1c2 0218 	rsb	r2, r2, #24
    6916:	f1c2 0c20 	rsb	ip, r2, #32
    691a:	fa10 f30c 	lsls.w	r3, r0, ip
    691e:	fa20 f002 	lsr.w	r0, r0, r2
    6922:	bf18      	it	ne
    6924:	f040 0001 	orrne.w	r0, r0, #1
    6928:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    692c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    6930:	fa03 fc0c 	lsl.w	ip, r3, ip
    6934:	ea40 000c 	orr.w	r0, r0, ip
    6938:	fa23 f302 	lsr.w	r3, r3, r2
    693c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6940:	e7cc      	b.n	68dc <__aeabi_d2f+0x14>
    6942:	ea7f 5362 	mvns.w	r3, r2, asr #21
    6946:	d107      	bne.n	6958 <__aeabi_d2f+0x90>
    6948:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    694c:	bf1e      	ittt	ne
    694e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    6952:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    6956:	4770      	bxne	lr
    6958:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    695c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    6960:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6964:	4770      	bx	lr
    6966:	bf00      	nop

00006968 <__aeabi_frsub>:
    6968:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    696c:	e002      	b.n	6974 <__addsf3>
    696e:	bf00      	nop

00006970 <__aeabi_fsub>:
    6970:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00006974 <__addsf3>:
    6974:	0042      	lsls	r2, r0, #1
    6976:	bf1f      	itttt	ne
    6978:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    697c:	ea92 0f03 	teqne	r2, r3
    6980:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    6984:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6988:	d06a      	beq.n	6a60 <__addsf3+0xec>
    698a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    698e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    6992:	bfc1      	itttt	gt
    6994:	18d2      	addgt	r2, r2, r3
    6996:	4041      	eorgt	r1, r0
    6998:	4048      	eorgt	r0, r1
    699a:	4041      	eorgt	r1, r0
    699c:	bfb8      	it	lt
    699e:	425b      	neglt	r3, r3
    69a0:	2b19      	cmp	r3, #25
    69a2:	bf88      	it	hi
    69a4:	4770      	bxhi	lr
    69a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    69aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    69ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    69b2:	bf18      	it	ne
    69b4:	4240      	negne	r0, r0
    69b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    69ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    69be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    69c2:	bf18      	it	ne
    69c4:	4249      	negne	r1, r1
    69c6:	ea92 0f03 	teq	r2, r3
    69ca:	d03f      	beq.n	6a4c <__addsf3+0xd8>
    69cc:	f1a2 0201 	sub.w	r2, r2, #1
    69d0:	fa41 fc03 	asr.w	ip, r1, r3
    69d4:	eb10 000c 	adds.w	r0, r0, ip
    69d8:	f1c3 0320 	rsb	r3, r3, #32
    69dc:	fa01 f103 	lsl.w	r1, r1, r3
    69e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    69e4:	d502      	bpl.n	69ec <__addsf3+0x78>
    69e6:	4249      	negs	r1, r1
    69e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    69ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    69f0:	d313      	bcc.n	6a1a <__addsf3+0xa6>
    69f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    69f6:	d306      	bcc.n	6a06 <__addsf3+0x92>
    69f8:	0840      	lsrs	r0, r0, #1
    69fa:	ea4f 0131 	mov.w	r1, r1, rrx
    69fe:	f102 0201 	add.w	r2, r2, #1
    6a02:	2afe      	cmp	r2, #254	; 0xfe
    6a04:	d251      	bcs.n	6aaa <__addsf3+0x136>
    6a06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    6a0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    6a0e:	bf08      	it	eq
    6a10:	f020 0001 	biceq.w	r0, r0, #1
    6a14:	ea40 0003 	orr.w	r0, r0, r3
    6a18:	4770      	bx	lr
    6a1a:	0049      	lsls	r1, r1, #1
    6a1c:	eb40 0000 	adc.w	r0, r0, r0
    6a20:	3a01      	subs	r2, #1
    6a22:	bf28      	it	cs
    6a24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    6a28:	d2ed      	bcs.n	6a06 <__addsf3+0x92>
    6a2a:	fab0 fc80 	clz	ip, r0
    6a2e:	f1ac 0c08 	sub.w	ip, ip, #8
    6a32:	ebb2 020c 	subs.w	r2, r2, ip
    6a36:	fa00 f00c 	lsl.w	r0, r0, ip
    6a3a:	bfaa      	itet	ge
    6a3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    6a40:	4252      	neglt	r2, r2
    6a42:	4318      	orrge	r0, r3
    6a44:	bfbc      	itt	lt
    6a46:	40d0      	lsrlt	r0, r2
    6a48:	4318      	orrlt	r0, r3
    6a4a:	4770      	bx	lr
    6a4c:	f092 0f00 	teq	r2, #0
    6a50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    6a54:	bf06      	itte	eq
    6a56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    6a5a:	3201      	addeq	r2, #1
    6a5c:	3b01      	subne	r3, #1
    6a5e:	e7b5      	b.n	69cc <__addsf3+0x58>
    6a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
    6a64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    6a68:	bf18      	it	ne
    6a6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    6a6e:	d021      	beq.n	6ab4 <__addsf3+0x140>
    6a70:	ea92 0f03 	teq	r2, r3
    6a74:	d004      	beq.n	6a80 <__addsf3+0x10c>
    6a76:	f092 0f00 	teq	r2, #0
    6a7a:	bf08      	it	eq
    6a7c:	4608      	moveq	r0, r1
    6a7e:	4770      	bx	lr
    6a80:	ea90 0f01 	teq	r0, r1
    6a84:	bf1c      	itt	ne
    6a86:	2000      	movne	r0, #0
    6a88:	4770      	bxne	lr
    6a8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    6a8e:	d104      	bne.n	6a9a <__addsf3+0x126>
    6a90:	0040      	lsls	r0, r0, #1
    6a92:	bf28      	it	cs
    6a94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    6a98:	4770      	bx	lr
    6a9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    6a9e:	bf3c      	itt	cc
    6aa0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    6aa4:	4770      	bxcc	lr
    6aa6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    6aaa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    6aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    6ab2:	4770      	bx	lr
    6ab4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    6ab8:	bf16      	itet	ne
    6aba:	4608      	movne	r0, r1
    6abc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    6ac0:	4601      	movne	r1, r0
    6ac2:	0242      	lsls	r2, r0, #9
    6ac4:	bf06      	itte	eq
    6ac6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    6aca:	ea90 0f01 	teqeq	r0, r1
    6ace:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    6ad2:	4770      	bx	lr

00006ad4 <__aeabi_ui2f>:
    6ad4:	f04f 0300 	mov.w	r3, #0
    6ad8:	e004      	b.n	6ae4 <__aeabi_i2f+0x8>
    6ada:	bf00      	nop

00006adc <__aeabi_i2f>:
    6adc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    6ae0:	bf48      	it	mi
    6ae2:	4240      	negmi	r0, r0
    6ae4:	ea5f 0c00 	movs.w	ip, r0
    6ae8:	bf08      	it	eq
    6aea:	4770      	bxeq	lr
    6aec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    6af0:	4601      	mov	r1, r0
    6af2:	f04f 0000 	mov.w	r0, #0
    6af6:	e01c      	b.n	6b32 <__aeabi_l2f+0x2a>

00006af8 <__aeabi_ul2f>:
    6af8:	ea50 0201 	orrs.w	r2, r0, r1
    6afc:	bf08      	it	eq
    6afe:	4770      	bxeq	lr
    6b00:	f04f 0300 	mov.w	r3, #0
    6b04:	e00a      	b.n	6b1c <__aeabi_l2f+0x14>
    6b06:	bf00      	nop

00006b08 <__aeabi_l2f>:
    6b08:	ea50 0201 	orrs.w	r2, r0, r1
    6b0c:	bf08      	it	eq
    6b0e:	4770      	bxeq	lr
    6b10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    6b14:	d502      	bpl.n	6b1c <__aeabi_l2f+0x14>
    6b16:	4240      	negs	r0, r0
    6b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6b1c:	ea5f 0c01 	movs.w	ip, r1
    6b20:	bf02      	ittt	eq
    6b22:	4684      	moveq	ip, r0
    6b24:	4601      	moveq	r1, r0
    6b26:	2000      	moveq	r0, #0
    6b28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    6b2c:	bf08      	it	eq
    6b2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    6b32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    6b36:	fabc f28c 	clz	r2, ip
    6b3a:	3a08      	subs	r2, #8
    6b3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    6b40:	db10      	blt.n	6b64 <__aeabi_l2f+0x5c>
    6b42:	fa01 fc02 	lsl.w	ip, r1, r2
    6b46:	4463      	add	r3, ip
    6b48:	fa00 fc02 	lsl.w	ip, r0, r2
    6b4c:	f1c2 0220 	rsb	r2, r2, #32
    6b50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    6b54:	fa20 f202 	lsr.w	r2, r0, r2
    6b58:	eb43 0002 	adc.w	r0, r3, r2
    6b5c:	bf08      	it	eq
    6b5e:	f020 0001 	biceq.w	r0, r0, #1
    6b62:	4770      	bx	lr
    6b64:	f102 0220 	add.w	r2, r2, #32
    6b68:	fa01 fc02 	lsl.w	ip, r1, r2
    6b6c:	f1c2 0220 	rsb	r2, r2, #32
    6b70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    6b74:	fa21 f202 	lsr.w	r2, r1, r2
    6b78:	eb43 0002 	adc.w	r0, r3, r2
    6b7c:	bf08      	it	eq
    6b7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    6b82:	4770      	bx	lr

00006b84 <__aeabi_ldivmod>:
    6b84:	b97b      	cbnz	r3, 6ba6 <__aeabi_ldivmod+0x22>
    6b86:	b972      	cbnz	r2, 6ba6 <__aeabi_ldivmod+0x22>
    6b88:	2900      	cmp	r1, #0
    6b8a:	bfbe      	ittt	lt
    6b8c:	2000      	movlt	r0, #0
    6b8e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    6b92:	e006      	blt.n	6ba2 <__aeabi_ldivmod+0x1e>
    6b94:	bf08      	it	eq
    6b96:	2800      	cmpeq	r0, #0
    6b98:	bf1c      	itt	ne
    6b9a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    6b9e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6ba2:	f000 b9b9 	b.w	6f18 <__aeabi_idiv0>
    6ba6:	f1ad 0c08 	sub.w	ip, sp, #8
    6baa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6bae:	2900      	cmp	r1, #0
    6bb0:	db09      	blt.n	6bc6 <__aeabi_ldivmod+0x42>
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	db1a      	blt.n	6bec <__aeabi_ldivmod+0x68>
    6bb6:	f000 f84d 	bl	6c54 <__udivmoddi4>
    6bba:	f8dd e004 	ldr.w	lr, [sp, #4]
    6bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6bc2:	b004      	add	sp, #16
    6bc4:	4770      	bx	lr
    6bc6:	4240      	negs	r0, r0
    6bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6bcc:	2b00      	cmp	r3, #0
    6bce:	db1b      	blt.n	6c08 <__aeabi_ldivmod+0x84>
    6bd0:	f000 f840 	bl	6c54 <__udivmoddi4>
    6bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
    6bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6bdc:	b004      	add	sp, #16
    6bde:	4240      	negs	r0, r0
    6be0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6be4:	4252      	negs	r2, r2
    6be6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6bea:	4770      	bx	lr
    6bec:	4252      	negs	r2, r2
    6bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6bf2:	f000 f82f 	bl	6c54 <__udivmoddi4>
    6bf6:	f8dd e004 	ldr.w	lr, [sp, #4]
    6bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6bfe:	b004      	add	sp, #16
    6c00:	4240      	negs	r0, r0
    6c02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    6c06:	4770      	bx	lr
    6c08:	4252      	negs	r2, r2
    6c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6c0e:	f000 f821 	bl	6c54 <__udivmoddi4>
    6c12:	f8dd e004 	ldr.w	lr, [sp, #4]
    6c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6c1a:	b004      	add	sp, #16
    6c1c:	4252      	negs	r2, r2
    6c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    6c22:	4770      	bx	lr

00006c24 <__aeabi_uldivmod>:
    6c24:	b953      	cbnz	r3, 6c3c <__aeabi_uldivmod+0x18>
    6c26:	b94a      	cbnz	r2, 6c3c <__aeabi_uldivmod+0x18>
    6c28:	2900      	cmp	r1, #0
    6c2a:	bf08      	it	eq
    6c2c:	2800      	cmpeq	r0, #0
    6c2e:	bf1c      	itt	ne
    6c30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    6c34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    6c38:	f000 b96e 	b.w	6f18 <__aeabi_idiv0>
    6c3c:	f1ad 0c08 	sub.w	ip, sp, #8
    6c40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    6c44:	f000 f806 	bl	6c54 <__udivmoddi4>
    6c48:	f8dd e004 	ldr.w	lr, [sp, #4]
    6c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6c50:	b004      	add	sp, #16
    6c52:	4770      	bx	lr

00006c54 <__udivmoddi4>:
    6c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c58:	9d08      	ldr	r5, [sp, #32]
    6c5a:	4604      	mov	r4, r0
    6c5c:	468c      	mov	ip, r1
    6c5e:	2b00      	cmp	r3, #0
    6c60:	f040 8083 	bne.w	6d6a <__udivmoddi4+0x116>
    6c64:	428a      	cmp	r2, r1
    6c66:	4617      	mov	r7, r2
    6c68:	d947      	bls.n	6cfa <__udivmoddi4+0xa6>
    6c6a:	fab2 f282 	clz	r2, r2
    6c6e:	b142      	cbz	r2, 6c82 <__udivmoddi4+0x2e>
    6c70:	f1c2 0020 	rsb	r0, r2, #32
    6c74:	fa24 f000 	lsr.w	r0, r4, r0
    6c78:	4091      	lsls	r1, r2
    6c7a:	4097      	lsls	r7, r2
    6c7c:	ea40 0c01 	orr.w	ip, r0, r1
    6c80:	4094      	lsls	r4, r2
    6c82:	ea4f 4817 	mov.w	r8, r7, lsr #16
    6c86:	0c23      	lsrs	r3, r4, #16
    6c88:	fbbc f6f8 	udiv	r6, ip, r8
    6c8c:	fa1f fe87 	uxth.w	lr, r7
    6c90:	fb08 c116 	mls	r1, r8, r6, ip
    6c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6c98:	fb06 f10e 	mul.w	r1, r6, lr
    6c9c:	4299      	cmp	r1, r3
    6c9e:	d909      	bls.n	6cb4 <__udivmoddi4+0x60>
    6ca0:	18fb      	adds	r3, r7, r3
    6ca2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
    6ca6:	f080 8119 	bcs.w	6edc <__udivmoddi4+0x288>
    6caa:	4299      	cmp	r1, r3
    6cac:	f240 8116 	bls.w	6edc <__udivmoddi4+0x288>
    6cb0:	3e02      	subs	r6, #2
    6cb2:	443b      	add	r3, r7
    6cb4:	1a5b      	subs	r3, r3, r1
    6cb6:	b2a4      	uxth	r4, r4
    6cb8:	fbb3 f0f8 	udiv	r0, r3, r8
    6cbc:	fb08 3310 	mls	r3, r8, r0, r3
    6cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    6cc4:	fb00 fe0e 	mul.w	lr, r0, lr
    6cc8:	45a6      	cmp	lr, r4
    6cca:	d909      	bls.n	6ce0 <__udivmoddi4+0x8c>
    6ccc:	193c      	adds	r4, r7, r4
    6cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6cd2:	f080 8105 	bcs.w	6ee0 <__udivmoddi4+0x28c>
    6cd6:	45a6      	cmp	lr, r4
    6cd8:	f240 8102 	bls.w	6ee0 <__udivmoddi4+0x28c>
    6cdc:	3802      	subs	r0, #2
    6cde:	443c      	add	r4, r7
    6ce0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    6ce4:	eba4 040e 	sub.w	r4, r4, lr
    6ce8:	2600      	movs	r6, #0
    6cea:	b11d      	cbz	r5, 6cf4 <__udivmoddi4+0xa0>
    6cec:	40d4      	lsrs	r4, r2
    6cee:	2300      	movs	r3, #0
    6cf0:	e9c5 4300 	strd	r4, r3, [r5]
    6cf4:	4631      	mov	r1, r6
    6cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cfa:	b902      	cbnz	r2, 6cfe <__udivmoddi4+0xaa>
    6cfc:	deff      	udf	#255	; 0xff
    6cfe:	fab2 f282 	clz	r2, r2
    6d02:	2a00      	cmp	r2, #0
    6d04:	d150      	bne.n	6da8 <__udivmoddi4+0x154>
    6d06:	1bcb      	subs	r3, r1, r7
    6d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6d0c:	fa1f f887 	uxth.w	r8, r7
    6d10:	2601      	movs	r6, #1
    6d12:	fbb3 fcfe 	udiv	ip, r3, lr
    6d16:	0c21      	lsrs	r1, r4, #16
    6d18:	fb0e 331c 	mls	r3, lr, ip, r3
    6d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6d20:	fb08 f30c 	mul.w	r3, r8, ip
    6d24:	428b      	cmp	r3, r1
    6d26:	d907      	bls.n	6d38 <__udivmoddi4+0xe4>
    6d28:	1879      	adds	r1, r7, r1
    6d2a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    6d2e:	d202      	bcs.n	6d36 <__udivmoddi4+0xe2>
    6d30:	428b      	cmp	r3, r1
    6d32:	f200 80e9 	bhi.w	6f08 <__udivmoddi4+0x2b4>
    6d36:	4684      	mov	ip, r0
    6d38:	1ac9      	subs	r1, r1, r3
    6d3a:	b2a3      	uxth	r3, r4
    6d3c:	fbb1 f0fe 	udiv	r0, r1, lr
    6d40:	fb0e 1110 	mls	r1, lr, r0, r1
    6d44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    6d48:	fb08 f800 	mul.w	r8, r8, r0
    6d4c:	45a0      	cmp	r8, r4
    6d4e:	d907      	bls.n	6d60 <__udivmoddi4+0x10c>
    6d50:	193c      	adds	r4, r7, r4
    6d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    6d56:	d202      	bcs.n	6d5e <__udivmoddi4+0x10a>
    6d58:	45a0      	cmp	r8, r4
    6d5a:	f200 80d9 	bhi.w	6f10 <__udivmoddi4+0x2bc>
    6d5e:	4618      	mov	r0, r3
    6d60:	eba4 0408 	sub.w	r4, r4, r8
    6d64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6d68:	e7bf      	b.n	6cea <__udivmoddi4+0x96>
    6d6a:	428b      	cmp	r3, r1
    6d6c:	d909      	bls.n	6d82 <__udivmoddi4+0x12e>
    6d6e:	2d00      	cmp	r5, #0
    6d70:	f000 80b1 	beq.w	6ed6 <__udivmoddi4+0x282>
    6d74:	2600      	movs	r6, #0
    6d76:	e9c5 0100 	strd	r0, r1, [r5]
    6d7a:	4630      	mov	r0, r6
    6d7c:	4631      	mov	r1, r6
    6d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d82:	fab3 f683 	clz	r6, r3
    6d86:	2e00      	cmp	r6, #0
    6d88:	d14a      	bne.n	6e20 <__udivmoddi4+0x1cc>
    6d8a:	428b      	cmp	r3, r1
    6d8c:	d302      	bcc.n	6d94 <__udivmoddi4+0x140>
    6d8e:	4282      	cmp	r2, r0
    6d90:	f200 80b8 	bhi.w	6f04 <__udivmoddi4+0x2b0>
    6d94:	1a84      	subs	r4, r0, r2
    6d96:	eb61 0103 	sbc.w	r1, r1, r3
    6d9a:	2001      	movs	r0, #1
    6d9c:	468c      	mov	ip, r1
    6d9e:	2d00      	cmp	r5, #0
    6da0:	d0a8      	beq.n	6cf4 <__udivmoddi4+0xa0>
    6da2:	e9c5 4c00 	strd	r4, ip, [r5]
    6da6:	e7a5      	b.n	6cf4 <__udivmoddi4+0xa0>
    6da8:	f1c2 0320 	rsb	r3, r2, #32
    6dac:	fa20 f603 	lsr.w	r6, r0, r3
    6db0:	4097      	lsls	r7, r2
    6db2:	fa01 f002 	lsl.w	r0, r1, r2
    6db6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    6dba:	40d9      	lsrs	r1, r3
    6dbc:	4330      	orrs	r0, r6
    6dbe:	0c03      	lsrs	r3, r0, #16
    6dc0:	fbb1 f6fe 	udiv	r6, r1, lr
    6dc4:	fa1f f887 	uxth.w	r8, r7
    6dc8:	fb0e 1116 	mls	r1, lr, r6, r1
    6dcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6dd0:	fb06 f108 	mul.w	r1, r6, r8
    6dd4:	4299      	cmp	r1, r3
    6dd6:	fa04 f402 	lsl.w	r4, r4, r2
    6dda:	d909      	bls.n	6df0 <__udivmoddi4+0x19c>
    6ddc:	18fb      	adds	r3, r7, r3
    6dde:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    6de2:	f080 808d 	bcs.w	6f00 <__udivmoddi4+0x2ac>
    6de6:	4299      	cmp	r1, r3
    6de8:	f240 808a 	bls.w	6f00 <__udivmoddi4+0x2ac>
    6dec:	3e02      	subs	r6, #2
    6dee:	443b      	add	r3, r7
    6df0:	1a5b      	subs	r3, r3, r1
    6df2:	b281      	uxth	r1, r0
    6df4:	fbb3 f0fe 	udiv	r0, r3, lr
    6df8:	fb0e 3310 	mls	r3, lr, r0, r3
    6dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    6e00:	fb00 f308 	mul.w	r3, r0, r8
    6e04:	428b      	cmp	r3, r1
    6e06:	d907      	bls.n	6e18 <__udivmoddi4+0x1c4>
    6e08:	1879      	adds	r1, r7, r1
    6e0a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    6e0e:	d273      	bcs.n	6ef8 <__udivmoddi4+0x2a4>
    6e10:	428b      	cmp	r3, r1
    6e12:	d971      	bls.n	6ef8 <__udivmoddi4+0x2a4>
    6e14:	3802      	subs	r0, #2
    6e16:	4439      	add	r1, r7
    6e18:	1acb      	subs	r3, r1, r3
    6e1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    6e1e:	e778      	b.n	6d12 <__udivmoddi4+0xbe>
    6e20:	f1c6 0c20 	rsb	ip, r6, #32
    6e24:	fa03 f406 	lsl.w	r4, r3, r6
    6e28:	fa22 f30c 	lsr.w	r3, r2, ip
    6e2c:	431c      	orrs	r4, r3
    6e2e:	fa20 f70c 	lsr.w	r7, r0, ip
    6e32:	fa01 f306 	lsl.w	r3, r1, r6
    6e36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    6e3a:	fa21 f10c 	lsr.w	r1, r1, ip
    6e3e:	431f      	orrs	r7, r3
    6e40:	0c3b      	lsrs	r3, r7, #16
    6e42:	fbb1 f9fe 	udiv	r9, r1, lr
    6e46:	fa1f f884 	uxth.w	r8, r4
    6e4a:	fb0e 1119 	mls	r1, lr, r9, r1
    6e4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    6e52:	fb09 fa08 	mul.w	sl, r9, r8
    6e56:	458a      	cmp	sl, r1
    6e58:	fa02 f206 	lsl.w	r2, r2, r6
    6e5c:	fa00 f306 	lsl.w	r3, r0, r6
    6e60:	d908      	bls.n	6e74 <__udivmoddi4+0x220>
    6e62:	1861      	adds	r1, r4, r1
    6e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    6e68:	d248      	bcs.n	6efc <__udivmoddi4+0x2a8>
    6e6a:	458a      	cmp	sl, r1
    6e6c:	d946      	bls.n	6efc <__udivmoddi4+0x2a8>
    6e6e:	f1a9 0902 	sub.w	r9, r9, #2
    6e72:	4421      	add	r1, r4
    6e74:	eba1 010a 	sub.w	r1, r1, sl
    6e78:	b2bf      	uxth	r7, r7
    6e7a:	fbb1 f0fe 	udiv	r0, r1, lr
    6e7e:	fb0e 1110 	mls	r1, lr, r0, r1
    6e82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
    6e86:	fb00 f808 	mul.w	r8, r0, r8
    6e8a:	45b8      	cmp	r8, r7
    6e8c:	d907      	bls.n	6e9e <__udivmoddi4+0x24a>
    6e8e:	19e7      	adds	r7, r4, r7
    6e90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    6e94:	d22e      	bcs.n	6ef4 <__udivmoddi4+0x2a0>
    6e96:	45b8      	cmp	r8, r7
    6e98:	d92c      	bls.n	6ef4 <__udivmoddi4+0x2a0>
    6e9a:	3802      	subs	r0, #2
    6e9c:	4427      	add	r7, r4
    6e9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    6ea2:	eba7 0708 	sub.w	r7, r7, r8
    6ea6:	fba0 8902 	umull	r8, r9, r0, r2
    6eaa:	454f      	cmp	r7, r9
    6eac:	46c6      	mov	lr, r8
    6eae:	4649      	mov	r1, r9
    6eb0:	d31a      	bcc.n	6ee8 <__udivmoddi4+0x294>
    6eb2:	d017      	beq.n	6ee4 <__udivmoddi4+0x290>
    6eb4:	b15d      	cbz	r5, 6ece <__udivmoddi4+0x27a>
    6eb6:	ebb3 020e 	subs.w	r2, r3, lr
    6eba:	eb67 0701 	sbc.w	r7, r7, r1
    6ebe:	fa07 fc0c 	lsl.w	ip, r7, ip
    6ec2:	40f2      	lsrs	r2, r6
    6ec4:	ea4c 0202 	orr.w	r2, ip, r2
    6ec8:	40f7      	lsrs	r7, r6
    6eca:	e9c5 2700 	strd	r2, r7, [r5]
    6ece:	2600      	movs	r6, #0
    6ed0:	4631      	mov	r1, r6
    6ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ed6:	462e      	mov	r6, r5
    6ed8:	4628      	mov	r0, r5
    6eda:	e70b      	b.n	6cf4 <__udivmoddi4+0xa0>
    6edc:	4606      	mov	r6, r0
    6ede:	e6e9      	b.n	6cb4 <__udivmoddi4+0x60>
    6ee0:	4618      	mov	r0, r3
    6ee2:	e6fd      	b.n	6ce0 <__udivmoddi4+0x8c>
    6ee4:	4543      	cmp	r3, r8
    6ee6:	d2e5      	bcs.n	6eb4 <__udivmoddi4+0x260>
    6ee8:	ebb8 0e02 	subs.w	lr, r8, r2
    6eec:	eb69 0104 	sbc.w	r1, r9, r4
    6ef0:	3801      	subs	r0, #1
    6ef2:	e7df      	b.n	6eb4 <__udivmoddi4+0x260>
    6ef4:	4608      	mov	r0, r1
    6ef6:	e7d2      	b.n	6e9e <__udivmoddi4+0x24a>
    6ef8:	4660      	mov	r0, ip
    6efa:	e78d      	b.n	6e18 <__udivmoddi4+0x1c4>
    6efc:	4681      	mov	r9, r0
    6efe:	e7b9      	b.n	6e74 <__udivmoddi4+0x220>
    6f00:	4666      	mov	r6, ip
    6f02:	e775      	b.n	6df0 <__udivmoddi4+0x19c>
    6f04:	4630      	mov	r0, r6
    6f06:	e74a      	b.n	6d9e <__udivmoddi4+0x14a>
    6f08:	f1ac 0c02 	sub.w	ip, ip, #2
    6f0c:	4439      	add	r1, r7
    6f0e:	e713      	b.n	6d38 <__udivmoddi4+0xe4>
    6f10:	3802      	subs	r0, #2
    6f12:	443c      	add	r4, r7
    6f14:	e724      	b.n	6d60 <__udivmoddi4+0x10c>
    6f16:	bf00      	nop

00006f18 <__aeabi_idiv0>:
    6f18:	4770      	bx	lr
    6f1a:	bf00      	nop

00006f1c <abort>:
    6f1c:	b508      	push	{r3, lr}
    6f1e:	2006      	movs	r0, #6
    6f20:	f000 f880 	bl	7024 <raise>
    6f24:	2001      	movs	r0, #1
    6f26:	f7fb fa79 	bl	241c <_exit>
    6f2a:	Address 0x0000000000006f2a is out of bounds.


00006f2c <__cxa_atexit>:
    6f2c:	b510      	push	{r4, lr}
    6f2e:	4c05      	ldr	r4, [pc, #20]	; (6f44 <__cxa_atexit+0x18>)
    6f30:	4613      	mov	r3, r2
    6f32:	b12c      	cbz	r4, 6f40 <__cxa_atexit+0x14>
    6f34:	460a      	mov	r2, r1
    6f36:	4601      	mov	r1, r0
    6f38:	2002      	movs	r0, #2
    6f3a:	f3af 8000 	nop.w
    6f3e:	bd10      	pop	{r4, pc}
    6f40:	4620      	mov	r0, r4
    6f42:	e7fc      	b.n	6f3e <__cxa_atexit+0x12>
    6f44:	00000000 	.word	0x00000000

00006f48 <__libc_init_array>:
    6f48:	b570      	push	{r4, r5, r6, lr}
    6f4a:	4d0d      	ldr	r5, [pc, #52]	; (6f80 <__libc_init_array+0x38>)
    6f4c:	4c0d      	ldr	r4, [pc, #52]	; (6f84 <__libc_init_array+0x3c>)
    6f4e:	1b64      	subs	r4, r4, r5
    6f50:	10a4      	asrs	r4, r4, #2
    6f52:	2600      	movs	r6, #0
    6f54:	42a6      	cmp	r6, r4
    6f56:	d109      	bne.n	6f6c <__libc_init_array+0x24>
    6f58:	4d0b      	ldr	r5, [pc, #44]	; (6f88 <__libc_init_array+0x40>)
    6f5a:	4c0c      	ldr	r4, [pc, #48]	; (6f8c <__libc_init_array+0x44>)
    6f5c:	f7f9 f9d0 	bl	300 <_init>
    6f60:	1b64      	subs	r4, r4, r5
    6f62:	10a4      	asrs	r4, r4, #2
    6f64:	2600      	movs	r6, #0
    6f66:	42a6      	cmp	r6, r4
    6f68:	d105      	bne.n	6f76 <__libc_init_array+0x2e>
    6f6a:	bd70      	pop	{r4, r5, r6, pc}
    6f6c:	f855 3b04 	ldr.w	r3, [r5], #4
    6f70:	4798      	blx	r3
    6f72:	3601      	adds	r6, #1
    6f74:	e7ee      	b.n	6f54 <__libc_init_array+0xc>
    6f76:	f855 3b04 	ldr.w	r3, [r5], #4
    6f7a:	4798      	blx	r3
    6f7c:	3601      	adds	r6, #1
    6f7e:	e7f2      	b.n	6f66 <__libc_init_array+0x1e>
    6f80:	0000030c 	.word	0x0000030c
    6f84:	0000030c 	.word	0x0000030c
    6f88:	0000030c 	.word	0x0000030c
    6f8c:	00000324 	.word	0x00000324

00006f90 <memmove>:
    6f90:	4288      	cmp	r0, r1
    6f92:	b510      	push	{r4, lr}
    6f94:	eb01 0402 	add.w	r4, r1, r2
    6f98:	d902      	bls.n	6fa0 <memmove+0x10>
    6f9a:	4284      	cmp	r4, r0
    6f9c:	4623      	mov	r3, r4
    6f9e:	d807      	bhi.n	6fb0 <memmove+0x20>
    6fa0:	1e43      	subs	r3, r0, #1
    6fa2:	42a1      	cmp	r1, r4
    6fa4:	d008      	beq.n	6fb8 <memmove+0x28>
    6fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
    6faa:	f803 2f01 	strb.w	r2, [r3, #1]!
    6fae:	e7f8      	b.n	6fa2 <memmove+0x12>
    6fb0:	4402      	add	r2, r0
    6fb2:	4601      	mov	r1, r0
    6fb4:	428a      	cmp	r2, r1
    6fb6:	d100      	bne.n	6fba <memmove+0x2a>
    6fb8:	bd10      	pop	{r4, pc}
    6fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
    6fc2:	e7f7      	b.n	6fb4 <memmove+0x24>

00006fc4 <memset>:
    6fc4:	4402      	add	r2, r0
    6fc6:	4603      	mov	r3, r0
    6fc8:	4293      	cmp	r3, r2
    6fca:	d100      	bne.n	6fce <memset+0xa>
    6fcc:	4770      	bx	lr
    6fce:	f803 1b01 	strb.w	r1, [r3], #1
    6fd2:	e7f9      	b.n	6fc8 <memset+0x4>

00006fd4 <_raise_r>:
    6fd4:	291f      	cmp	r1, #31
    6fd6:	b538      	push	{r3, r4, r5, lr}
    6fd8:	4604      	mov	r4, r0
    6fda:	460d      	mov	r5, r1
    6fdc:	d904      	bls.n	6fe8 <_raise_r+0x14>
    6fde:	2316      	movs	r3, #22
    6fe0:	6003      	str	r3, [r0, #0]
    6fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6fe6:	bd38      	pop	{r3, r4, r5, pc}
    6fe8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6fea:	b112      	cbz	r2, 6ff2 <_raise_r+0x1e>
    6fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6ff0:	b94b      	cbnz	r3, 7006 <_raise_r+0x32>
    6ff2:	4620      	mov	r0, r4
    6ff4:	f000 f830 	bl	7058 <_getpid_r>
    6ff8:	462a      	mov	r2, r5
    6ffa:	4601      	mov	r1, r0
    6ffc:	4620      	mov	r0, r4
    6ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7002:	f000 b817 	b.w	7034 <_kill_r>
    7006:	2b01      	cmp	r3, #1
    7008:	d00a      	beq.n	7020 <_raise_r+0x4c>
    700a:	1c59      	adds	r1, r3, #1
    700c:	d103      	bne.n	7016 <_raise_r+0x42>
    700e:	2316      	movs	r3, #22
    7010:	6003      	str	r3, [r0, #0]
    7012:	2001      	movs	r0, #1
    7014:	e7e7      	b.n	6fe6 <_raise_r+0x12>
    7016:	2400      	movs	r4, #0
    7018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    701c:	4628      	mov	r0, r5
    701e:	4798      	blx	r3
    7020:	2000      	movs	r0, #0
    7022:	e7e0      	b.n	6fe6 <_raise_r+0x12>

00007024 <raise>:
    7024:	4b02      	ldr	r3, [pc, #8]	; (7030 <raise+0xc>)
    7026:	4601      	mov	r1, r0
    7028:	6818      	ldr	r0, [r3, #0]
    702a:	f7ff bfd3 	b.w	6fd4 <_raise_r>
    702e:	bf00      	nop
    7030:	100000bc 	.word	0x100000bc

00007034 <_kill_r>:
    7034:	b538      	push	{r3, r4, r5, lr}
    7036:	4d07      	ldr	r5, [pc, #28]	; (7054 <_kill_r+0x20>)
    7038:	2300      	movs	r3, #0
    703a:	4604      	mov	r4, r0
    703c:	4608      	mov	r0, r1
    703e:	4611      	mov	r1, r2
    7040:	602b      	str	r3, [r5, #0]
    7042:	f7fb f9a7 	bl	2394 <_kill>
    7046:	1c43      	adds	r3, r0, #1
    7048:	d102      	bne.n	7050 <_kill_r+0x1c>
    704a:	682b      	ldr	r3, [r5, #0]
    704c:	b103      	cbz	r3, 7050 <_kill_r+0x1c>
    704e:	6023      	str	r3, [r4, #0]
    7050:	bd38      	pop	{r3, r4, r5, pc}
    7052:	bf00      	nop
    7054:	100005e4 	.word	0x100005e4

00007058 <_getpid_r>:
    7058:	f7fb b994 	b.w	2384 <_getpid>

0000705c <strlen>:
    705c:	4603      	mov	r3, r0
    705e:	f813 2b01 	ldrb.w	r2, [r3], #1
    7062:	2a00      	cmp	r2, #0
    7064:	d1fb      	bne.n	705e <strlen+0x2>
    7066:	1a18      	subs	r0, r3, r0
    7068:	3801      	subs	r0, #1
    706a:	4770      	bx	lr
    706c:	6e6b6e75 	.word	0x6e6b6e75
    7070:	006e776f 	.word	0x006e776f
    7074:	63637553 	.word	0x63637553
    7078:	00737365 	.word	0x00737365
    707c:	656d6954 	.word	0x656d6954
    7080:	754f2064 	.word	0x754f2064
    7084:	00000074 	.word	0x00000074
    7088:	6e6b6e55 	.word	0x6e6b6e55
    708c:	006e776f 	.word	0x006e776f
    7090:	6e69616d 	.word	0x6e69616d
    7094:	00000000 	.word	0x00000000
    7098:	72756f73 	.word	0x72756f73
    709c:	6d2f6563 	.word	0x6d2f6563
    70a0:	2e6e6961 	.word	0x2e6e6961
    70a4:	00707063 	.word	0x00707063
    70a8:	72617453 	.word	0x72617453
    70ac:	676e6974 	.word	0x676e6974
    70b0:	6c654820 	.word	0x6c654820
    70b4:	57206f6c 	.word	0x57206f6c
    70b8:	646c726f 	.word	0x646c726f
    70bc:	70704120 	.word	0x70704120
    70c0:	6163696c 	.word	0x6163696c
    70c4:	6e6f6974 	.word	0x6e6f6974
    70c8:	00000000 	.word	0x00000000
    70cc:	6c6c6548 	.word	0x6c6c6548
    70d0:	6f57206f 	.word	0x6f57206f
    70d4:	20646c72 	.word	0x20646c72
    70d8:	58257830 	.word	0x58257830
    70dc:	00000000 	.word	0x00000000
    70e0:	32345b1b 	.word	0x32345b1b
    70e4:	2020206d 	.word	0x2020206d
    70e8:	464e4920 	.word	0x464e4920
    70ec:	0000004f 	.word	0x0000004f
    70f0:	0a2e2e2e 	.word	0x0a2e2e2e
    70f4:	6d305b1b 	.word	0x6d305b1b
    70f8:	00000000 	.word	0x00000000
    70fc:	5b1b7325 	.word	0x5b1b7325
    7100:	34393b30 	.word	0x34393b30
    7104:	73253a6d 	.word	0x73253a6d
    7108:	305b1b3a 	.word	0x305b1b3a
    710c:	6d32393b 	.word	0x6d32393b
    7110:	29287325 	.word	0x29287325
    7114:	305b1b3a 	.word	0x305b1b3a
    7118:	6d33393b 	.word	0x6d33393b
    711c:	3e756c25 	.word	0x3e756c25
    7120:	305b1b20 	.word	0x305b1b20
    7124:	6d37333b 	.word	0x6d37333b
    7128:	00000000 	.word	0x00000000
    712c:	305b1b0a 	.word	0x305b1b0a
    7130:	ffff006d 	.word	0xffff006d

00007134 <sjsu::Status::kSuccess>:
    7134:	00000000 00000007 00007074              ........tp..

00007140 <sjsu::Status::kTimedOut>:
    7140:	ffffffff 00000009 0000707c              ........|p..

0000714c <sjsu::Log<>::Log(char const*, char const*, std::experimental::fundamentals_v2::source_location const&)::kEllipsisEnding>:
    714c:	00000008 000070f0                       .....p..

00007154 <sjsu::Log<unsigned char>::Log(char const*, char const*, unsigned char, std::experimental::fundamentals_v2::source_location const&)::kEllipsisEnding>:
    7154:	00000008 000070f0 6e6b6e75 006e776f     .....p..unknown.
    7164:	546e7552 006b7361 6d6f682f 616e2f65     RunTask./home/na
    7174:	70726574 7461746f 2f72656f 55534a53     terpotatoer/SJSU
    7184:	7665442d 696c2f32 72617262 334c2f79     -Dev2/library/L3
    7194:	7070415f 6163696c 6e6f6974 7361742f     _Application/tas
    71a4:	63735f6b 75646568 2e72656c 00707063     k_scheduler.cpp.
    71b4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    71c4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    71d4:	3a646574 546b2820 496b7361 7865646e     ted: (kTaskIndex
    71e4:	6b203c20 6b736154 6e756f43 200a2974      < kTaskCount). 
    71f4:	20202020 20202020 65685420 73617420              The tas
    7204:	6e69206b 20786564 756f6873 6e20646c     k index should n
    7214:	6520746f 65656378 68742064 61742065     ot exceed the ta
    7224:	63206b73 746e756f 305b1b2e 0000006d     sk count..[0m...
    7234:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    7244:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    7254:	3a646574 61742820 502e6b73 75526572     ted: (task.PreRu
    7264:	2929286e 2020200a 20202020 50202020     n()).          P
    7274:	75526572 2029286e 6c696166 66206465     reRun() failed f
    7284:	7420726f 3a6b7361 2c732520 72657420     or task: %s, ter
    7294:	616e696d 676e6974 68637320 6c756465     minating schedul
    72a4:	1b217265 006d305b 65206e41 726f7272     er!.[0m.An error
    72b4:	63636f20 65727275 74202c64 66206568      occurred, the f
    72c4:	6f6c6c6f 676e6977 73617420 6977206b     ollowing task wi
    72d4:	62206c6c 75732065 6e657073 3a646564     ll be suspended:
    72e4:	00732520 74696e49 696c6169 6c41657a      %s.InitializeAl
    72f4:	7361546c 0000736b 65737341 6f697472     lTasks..Assertio
    7304:	6146206e 72756c69 43202c65 69646e6f     n Failure, Condi
    7314:	6e6f6974 73655420 3a646574 61742820     tion Tested: (ta
    7324:	3e2d6b73 48746547 6c646e61 20292865     sk->GetHandle() 
    7334:	6e203d21 706c6c75 0a297274 20202020     != nullptr).    
    7344:	20202020 6e552020 656c6261 206f7420           Unable to 
    7354:	61657263 74206574 3a6b7361 1b732520     create task: %s.
    7364:	006d305b 65737341 6f697472 6146206e     [0m.Assertion Fa
    7374:	72756c69 43202c65 69646e6f 6e6f6974     ilure, Condition
    7384:	73655420 3a646574 61742820 3e2d6b73      Tested: (task->
    7394:	75746553 29292870 2020200a 20202020     Setup()).       
    73a4:	46202020 656c6961 6f742064 6d6f6320        Failed to com
    73b4:	74656c70 65532065 28707574 6f662029     plete Setup() fo
    73c4:	61742072 203a6b73 5b1b7325 00006d30     r task: %s.[0m..
    73d4:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    73e4:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    73f4:	3a646574 72702820 75725f65 76655f6e     ted: (pre_run_ev
    7404:	5f746e65 756f7267 61685f70 656c646e     ent_group_handle
    7414:	3d21205f 6c756e20 7274706c 20200a29     _ != nullptr).  
    7424:	20202020 20202020 6c696146 74206465             Failed t
    7434:	7263206f 65746165 65725020 206e7552     o create PreRun 
    7444:	6e657645 72472074 2170756f 6d305b1b     Event Group!.[0m
    7454:	00000000 54646441 006b7361 65737341     ....AddTask.Asse
    7464:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    7474:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    7484:	61742820 635f6b73 746e756f 202b205f      (task_count_ + 
    7494:	203c2031 666e6f63 3a3a6769 7361546b     1 < config::kTas
    74a4:	6863536b 6c756465 69537265 0a29657a     kSchedulerSize).
    74b4:	20202020 20202020 68542020 63732065               The sc
    74c4:	75646568 2072656c 63207369 65727275     heduler is curre
    74d4:	796c746e 6c756620 74202c6c 74206568     ntly full, the t
    74e4:	206b7361 6c6c6977 746f6e20 20656220     ask will not be 
    74f4:	65646461 43202e64 69736e6f 20726564     added. Consider 
    7504:	72636e69 69736165 7420676e 73206568     increasing the s
    7514:	64656863 72656c75 7a697320 6f632065     cheduler size co
    7524:	6769666e 74617275 2e6e6f69 6d305b1b     nfiguration..[0m
    7534:	00000000 31345b1b 2020206d 4f525245     .....[41m   ERRO
    7544:	00000052 33345b1b 4157206d 4e494e52     R....[43m WARNIN
    7554:	00000047 0a2e2e2e 6d305b1b 00000000     G........[0m....
    7564:	5b1b7325 34393b30 73253a6d 305b1b3a     %s.[0;94m:%s:.[0
    7574:	6d32393b 29287325 305b1b3a 6d33393b     ;92m%s():.[0;93m
    7584:	3e756c25 305b1b20 6d37333b 00000000     %lu> .[0;37m....
    7594:	305b1b0a ffff006d 6e6b6e75 006e776f     ..[0m...unknown.
    75a4:	61766e49 2064696c 74746553 73676e69     Invalid Settings
    75b4:	00000000 6e6b6e55 006e776f 00000000     ....Unknown.....
    75c4:	3b315b1b 456d3333 726f7272 315b1b3a     .[1;33mError:.[1
    75d4:	6d31393b 25287325 5b1b2964 37393b31     ;91m%s(%d).[1;97
    75e4:	73253a6d 756c253a 2873253a 25203a29     m:%s:%lu:%s(): %
    75f4:	5b1b0a73 00006d30 76697244 756e2065     s..[0m..Drive nu
    7604:	7265626d 70757320 65696c70 73692064     mber supplied is
    7614:	79656220 20646e6f 20656874 626d756e      beyond the numb
    7624:	6f207265 74732066 6761726f 72642065     er of storage dr
    7634:	73657669 61687420 61632074 6562206e     ives that can be
    7644:	67657220 65747369 20646572 70207361      registered as p
    7654:	73697968 206c6163 76697264 20737265     hyiscal drivers 
    7664:	20726f66 46746146 54202e53 6c206568     for FatFS. The l
    7674:	74696d69 20736920 69666564 2064656e     imit is defined 
    7684:	63207962 69666e6f 6b3a3a67 44746146     by config::kFatD
    7694:	65766972 6e756f43 49202e74 6572636e     riveCount. Incre
    76a4:	20657361 74616874 6e6f6320 20676966     ase that config 
    76b4:	756c6176 6e692065 64726f20 74207265     value in order t
    76c4:	6461206f 6f6d2064 64206572 65766972     o add more drive
    76d4:	00002e73 69676552 72657473 46746146     s...RegisterFatF
    76e4:	69724473 00006576 6d6f682f 616e2f65     sDrive../home/na
    76f4:	70726574 7461746f 2f72656f 55534a53     terpotatoer/SJSU
    7704:	7665442d 696c2f32 72617262 334c2f79     -Dev2/library/L3
    7714:	7070415f 6163696c 6e6f6974 6c69662f     _Application/fil
    7724:	6f695f65 7369642f 2e6f696b 00707063     e_io/diskio.cpp.

00007734 <sjsu::Status::kInvalidSettings>:
    7734:	fffffffc 00000010 000075a4              .........u..

00007740 <vtable for sjsu::GetInactive<sjsu::Storage>()::InactiveStorage>:
	...
    7748:	00001bd3 00001be9 00001c25 00001c0f     ........%.......
    7758:	00001c4b 00001c61 00001c7f 00001c9d     K...a...........
    7768:	00001cc7 00001cf1 00001d1b 31345b1b     .............[41
    7778:	7261486d 61462064 20746c75 65637845     mHard Fault Exce
    7788:	6f697470 634f206e 72727563 0a216465     ption Occurred!.
    7798:	6d305b1b 00000000 203a3072 30257830     .[0m....r0: 0x%0
    77a8:	2c586c38 3a317220 25783020 586c3830     8lX, r1: 0x%08lX
    77b8:	3272202c 7830203a 6c383025 72202c58     , r2: 0x%08lX, r
    77c8:	30203a33 38302578 000a586c 3a323172     3: 0x%08lX..r12:
    77d8:	25783020 586c3830 726c202c 7830203a      0x%08lX, lr: 0x
    77e8:	6c383025 70202c58 30203a63 38302578     %08lX, pc: 0x%08
    77f8:	202c586c 3a727370 25783020 586c3830     lX, psr: 0x%08lX
    7808:	0000000a 315b1b0a 6d37333b 32345b1b     ......[1;37m.[42
    7818:	6f72506d 6d617267 74655220 656e7275     mProgram Returne
    7828:	78452064 43207469 3a65646f 646c2520     d Exit Code: %ld
    7838:	305b1b0a 0000006d 315b1b0a 6d37333b     ..[0m.....[1;37m
    7848:	31345b1b 6f72506d 6d617267 74655220     .[41mProgram Ret
    7858:	656e7275 78452064 43207469 3a65646f     urned Exit Code:
    7868:	646c2520 305b1b0a ffff006d               %ld..[0m...

00007874 <_imprecise_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, float, unsigned int, unsigned int)::kRounders>:
    7874:	3f000000 3d4ccccd 3ba3d70a 3a03126f     ...?..L=...;o..:
    7884:	3851b717 36a7c5ac 350637bd 3356bf95     ..Q8...6.7.5..V3
    7894:	00000000 0000002d 6c257325 6c252e64     ....-...%s%ld.%l
    78a4:	00000064 006e616e 2d696e66 00000000     d...nan.fni-....
    78b4:	2b696e66 00000000 00696e66 0074743a     fni+....fni.:tt.
    78c4:	6e6b6e75 006e776f 63637553 00737365     unknown.Success.
    78d4:	61766e49 2064696c 74746553 73676e69     Invalid Settings
    78e4:	00000000 61766e49 2064696c 61726150     ....Invalid Para
    78f4:	6574656d 00007372 6e6b6e55 006e776f     meters..Unknown.
    7904:	00000000 3b315b1b 456d3333 726f7272     .....[1;33mError
    7914:	315b1b3a 6d31393b 25287325 5b1b2964     :.[1;91m%s(%d).[
    7924:	37393b31 73253a6d 756c253a 2873253a     1;97m:%s:%lu:%s(
    7934:	25203a29 5b1b0a73 00006d30 75746553     ): %s..[0m..Setu
    7944:	6c6c5070 00000000 6d6f682f 616e2f65     pPll..../home/na
    7954:	70726574 7461746f 2f72656f 55534a53     terpotatoer/SJSU
    7964:	7665442d 696c2f32 72617262 314c2f79     -Dev2/library/L1
    7974:	7265505f 65687069 2f6c6172 3463706c     _Peripheral/lpc4
    7984:	2f787830 74737973 635f6d65 72746e6f     0xx/system_contr
    7994:	656c6c6f 70682e72 00000070 65737341     oller.hpp...Asse
    79a4:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    79b4:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    79c4:	63662820 645f6f63 64697669 3d212065      (fcco_divide !=
    79d4:	0a293020 20202020 20202020 68542020      0).          Th
    79e4:	72702065 6469766f 6d206465 69746c75     e provided multi
    79f4:	20796c70 756c6176 6e612065 736f2064     ply value and os
    7a04:	6c6c6963 726f7461 6f686320 73656369     cillator choices
    7a14:	73657220 73746c75 206e6920 4f434346      results in FCCO
    7a24:	65726620 6e657571 6f207963 69737475      frequency outsi
    7a34:	6f206564 35312066 484d2036 6e61207a     de of 156 MHz an
    7a44:	32332064 484d2030 53202e7a 70206565     d 320 MHz. See p
    7a54:	20656761 55203536 3530314d 4c203236     age 65 UM10562 L
    7a64:	30344350 342f7838 20783730 72657355     PC408x/407x User
    7a74:	6e616d20 206c6175 20726f66 65726f6d      manual for more
    7a84:	74656420 736c6961 305b1b2e 0000006d      details..[0m...
    7a94:	62616e45 7845656c 6e726574 734f6c61     EnableExternalOs
    7aa4:	6c6c6963 726f7461 00000000 65737341     cillator....Asse
    7ab4:	6f697472 6146206e 72756c69 43202c65     rtion Failure, C
    7ac4:	69646e6f 6e6f6974 73655420 3a646574     ondition Tested:
    7ad4:	61662820 2965736c 2020200a 20202020      (false).       
    7ae4:	45202020 72657478 206c616e 6963734f        External Osci
    7af4:	74616c6c 4620726f 75716572 79636e65     llator Frequency
    7b04:	20736920 7374756f 20656469 7420666f      is outside of t
    7b14:	74206568 61206568 70656363 6c626174     he the acceptabl
    7b24:	20312065 207a484d 3e2d2d3c 20353220     e 1 MHz <--> 25 
    7b34:	2e7a484d 6d305b1b 00000000 20656854     MHz..[0m....The 
    7b44:	636e7566 6e6f6974 646f6320 756d2065     function code mu
    7b54:	62207473 20612065 69622d33 61762074     st be a 3-bit va
    7b64:	2065756c 77746562 206e6565 30306230     lue between 0b00
    7b74:	6e612030 62302064 2e313131 00000000     0 and 0b111.....
    7b84:	50746553 75466e69 6974636e 00006e6f     SetPinFunction..
    7b94:	6d6f682f 616e2f65 70726574 7461746f     /home/naterpotat
    7ba4:	2f72656f 55534a53 7665442d 696c2f32     oer/SJSU-Dev2/li
    7bb4:	72617262 314c2f79 7265505f 65687069     brary/L1_Periphe
    7bc4:	2f6c6172 3463706c 2f787830 2e6e6970     ral/lpc40xx/pin.
    7bd4:	00707068 74696e49 696c6169 6c50657a     hpp.InitializePl
    7be4:	6f667461 00006d72 6d6f682f 616e2f65     atform../home/na
    7bf4:	70726574 7461746f 2f72656f 55534a53     terpotatoer/SJSU
    7c04:	7665442d 696c2f32 72617262 304c2f79     -Dev2/library/L0
    7c14:	616c505f 726f6674 706c2f6d 78303463     _Platform/lpc40x
    7c24:	74732f78 75747261 70632e70 00000070     x/startup.cpp...
    7c34:	65737341 6f697472 6146206e 72756c69     Assertion Failur
    7c44:	43202c65 69646e6f 6e6f6974 73655420     e, Condition Tes
    7c54:	3a646574 69742820 5f72656d 72617473     ted: (timer_star
    7c64:	74735f74 73757461 203d3d20 75736a73     t_status == sjsu
    7c74:	74533a3a 73757461 536b3a3a 65636375     ::Status::kSucce
    7c84:	0a297373 20202020 20202020 79532020     ss).          Sy
    7c94:	6d657473 6d695420 28207265 64657375     stem Timer (used
    7ca4:	20796220 65657246 534f5452 61682029      by FreeRTOS) ha
    7cb4:	41462073 44454c49 206f7420 72617473     s FAILED to star
    7cc4:	5b1b2174 00006d30 31345b1b 2020206d     t!.[0m...[41m   
    7cd4:	4f525245 00000052 0a2e2e2e 6d305b1b     ERROR........[0m
    7ce4:	00000000 5b1b7325 34393b30 73253a6d     ....%s.[0;94m:%s
    7cf4:	305b1b3a 6d32393b 29287325 305b1b3a     :.[0;92m%s():.[0
    7d04:	6d33393b 3e756c25 305b1b20 6d37333b     ;93m%lu> .[0;37m
    7d14:	00000000 305b1b0a 0000006d 65726e55     ......[0m...Unre
    7d24:	74736967 64657265 646e6148 0072656c     gisteredHandler.
    7d34:	6d6f682f 616e2f65 70726574 7461746f     /home/naterpotat
    7d44:	2f72656f 55534a53 7665442d 696c2f32     oer/SJSU-Dev2/li
    7d54:	72617262 314c2f79 7265505f 65687069     brary/L1_Periphe
    7d64:	2f6c6172 74726f63 692f7865 7265746e     ral/cortex/inter
    7d74:	74707572 7070682e 00000000 69206f4e     rupt.hpp....No i
    7d84:	7265746e 74707572 6e616820 72656c64     nterrupt handler
    7d94:	756f6620 202e646e 61736944 6e696c62      found. Disablin
    7da4:	6e692067 72726574 20747075 75716572     g interrupt requ
    7db4:	20747365 00216425                       est %d!.

00007dbc <config::kRtosFrequency>:
    7dbc:	447a0000                                ..zD

00007dc0 <sjsu::Status::kInvalidParameters>:
    7dc0:	fffffff9 00000012 000078e8              .........x..

00007dcc <sjsu::cortex::SystemTimer::kFixedPointScaling>:
    7dcc:	000f4240                                @B..

00007dd0 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    7dd0:	41400000                                ..@A

00007dd4 <sjsu::lpc40xx::SystemController::PllRegister::kMultiplier>:
    7dd4:	00000000 00000005                       ........

00007ddc <sjsu::lpc40xx::SystemController::PllRegister::kDivider>:
    7ddc:	00000005 00000002                       ........

00007de4 <sjsu::lpc40xx::SystemController::PllRegister::kPllLockStatus>:
    7de4:	0000000a 00000001                       ........

00007dec <sjsu::lpc40xx::SystemController::OscillatorRegister::kRangeSelect>:
    7dec:	00000004 00000001                       ........

00007df4 <sjsu::lpc40xx::SystemController::OscillatorRegister::kExternalEnable>:
    7df4:	00000005 00000001                       ........

00007dfc <sjsu::lpc40xx::SystemController::OscillatorRegister::kExternalReady>:
    7dfc:	00000006 00000001                       ........

00007e04 <sjsu::lpc40xx::SystemController::CpuClockRegister::kDivider>:
    7e04:	00000000 00000005                       ........

00007e0c <sjsu::lpc40xx::SystemController::CpuClockRegister::kSelect>:
    7e0c:	00000008 00000001                       ........

00007e14 <sjsu::lpc40xx::SystemController::PeripheralClockRegister::kDivider>:
    7e14:	00000000 00000005                       ........

00007e1c <sjsu::lpc40xx::SystemController::EmcClockRegister::kDivider>:
    7e1c:	00000000 00000001                       ........

00007e24 <sjsu::lpc40xx::SystemController::UsbClockRegister::kDivider>:
    7e24:	00000000 00000005                       ........

00007e2c <sjsu::lpc40xx::SystemController::UsbClockRegister::kSelect>:
    7e2c:	00000008 00000002                       ........

00007e34 <sjsu::lpc40xx::SystemController::SpiFiClockRegister::kDivider>:
    7e34:	00000000 00000005                       ........

00007e3c <sjsu::lpc40xx::SystemController::SpiFiClockRegister::kSelect>:
    7e3c:	00000008 00000002                       ........

00007e44 <sjsu::lpc40xx::Pin::kFunction>:
    7e44:	00000000 00000003                       ........

00007e4c <sjsu::lpc40xx::Pin::kResistor>:
    7e4c:	00000003 00000002                       ........

00007e54 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    7e54:	00000007 00000001                       ........

00007e5c <sjsu::lpc40xx::Pin::kOpenDrain>:
    7e5c:	0000000a 00000001                       ........

00007e64 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    7e64:	00007ef4 00000200                       .~......

00007e6c <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7e6c:	00007ef4 00000300                       .~......

00007e74 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7e74:	00007ef4 00000802                       .~......

00007e7c <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    7e7c:	00007ef4 00000902                       .~......

00007e84 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    7e84:	00007ef4 00001c04                       .~......

00007e8c <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    7e8c:	00007ef4 00001d04                       .~......

00007e94 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    7e94:	00007ef4 00001d01                       .~......

00007e9c <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    7e9c:	00007ef4 00000902                       .~......

00007ea4 <sjsu::lpc40xx::Uart::Port::kUart0>:
    7ea4:	4000c000 00000003 00007e64 00007e6c     ...@....d~..l~..
    7eb4:	00000009                                ....

00007eb8 <vtable for sjsu::cortex::InterruptController<43u, 5ul>>:
	...
    7ec0:	0000645d 0000648d 000064e9              ]d...d...d..

00007ecc <vtable for sjsu::lpc40xx::Uart>:
	...
    7ed4:	00005249 00005305 0000539b 000053ed     IR...S...S...S..
    7ee4:	0000543b 00004ddd                       ;T...M..

00007eec <vtable for sjsu::lpc40xx::Pin>:
	...
    7ef4:	00004bcf 00004bf5 00004ca1 00004d21     .K...K...L..!M..
    7f04:	00004cdd                                .L..

00007f08 <vtable for sjsu::lpc40xx::SystemController>:
	...
    7f10:	00004081 00003e19 00003f3d 00003e31     .@...>..=?..1>..
    7f20:	00003e9d 00003eed                       .>...>..

00007f28 <vtable for sjsu::cortex::SystemTimer>:
	...
    7f30:	000039d5 00003a69 00003c55 00003aa5     .9..i:..U<...:..

00007f40 <C.32.215511>:
    7f40:	00000000 00000001 00000002 00000003     ................

00007f50 <__sf_fake_stderr>:
	...

00007f70 <__sf_fake_stdin>:
	...

00007f90 <__sf_fake_stdout>:
	...
